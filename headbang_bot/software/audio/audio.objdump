
audio.elf:     file format elf32-littlenios2
audio.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020228

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005e1c memsz 0x00005e1c flags r-x
    LOAD off    0x00006e3c vaddr 0x00025e3c paddr 0x000278d8 align 2**12
         filesz 0x00001a9c memsz 0x00001a9c flags rw-
    LOAD off    0x00000374 vaddr 0x00029374 paddr 0x00029374 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b90  00020228  00020228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000084  00025db8  00025db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a9c  00025e3c  000278d8  00006e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00029374  00029374  00009374  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000294cc  000294cc  000088d8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000088d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a20  00000000  00000000  00008908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000185c9  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006a34  00000000  00000000  000218f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009c2e  00000000  00000000  00028325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001750  00000000  00000000  00031f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002a57  00000000  00000000  000336a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  000360fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003c02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003c040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003f062  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003f065  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003f06f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003f070  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003f071  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003f07a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003f083  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0003f08c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0003f095  2**0
                  CONTENTS, READONLY
 26 .jdi          00004eac  00000000  00000000  0003f0ce  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f2d3  00000000  00000000  00043f7a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020228 l    d  .text	00000000 .text
00025db8 l    d  .rodata	00000000 .rodata
00025e3c l    d  .rwdata	00000000 .rwdata
00029374 l    d  .bss	00000000 .bss
000294cc l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/Robin/Documents/GitHub/Headbang-bot/headbang_bot/software/audio_bsp//obj/HAL/src/crt0.o
00020260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020498 l     F .text	00000008 __fp_lock
000204ac l     F .text	00000008 __fp_unlock
000204b4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025e3c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
000222d8 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023140 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023258 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023284 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002337c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023468 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023554 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000278c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000239a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023ae0 l     F .text	00000034 alt_dev_reg
00026810 l     O .rwdata	00001060 jtag_uart
00027870 l     O .rwdata	00000030 audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023dbc l     F .text	00000210 altera_avalon_jtag_uart_irq
00023fcc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024f20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002517c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0002544c l     F .text	0000003c alt_get_errno
00025488 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000293a0 g     O .bss	00000004 alt_instruction_exception_handler
00022f0c g     F .text	00000058 _isatty_r
00023670 g     F .text	0000007c alt_main
00020324 g     F .text	000000cc _puts_r
000293cc g     O .bss	00000100 alt_irq
00022b9c g     F .text	00000064 _lseek_r
000278d8 g       *ABS*	00000000 __flash_rwdata_start
000248b0 g     F .text	00000060 alt_up_audio_read_fifo_avail
000294cc g       *ABS*	00000000 __alt_heap_start
00024910 g     F .text	00000068 alt_up_audio_record_r
00022054 g     F .text	0000005c __sseek
000207fc g     F .text	00000010 __sinit
0002061c g     F .text	00000078 __sfmoreglue
00023710 g     F .text	00000024 __malloc_unlock
0002481c g     F .text	00000094 alt_up_audio_reset_audio_core
000217c8 g     F .text	0000012c memmove
000207e8 g     F .text	00000014 _cleanup
00025894 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022eac g     F .text	00000060 _fstat_r
00029380 g     O .bss	00000004 errno
00021fcc g     F .text	00000008 __seofread
000247e0 g     F .text	0000003c alt_up_audio_write_interrupt_pending
00029388 g     O .bss	00000004 alt_argv
0002f8a0 g       *ABS*	00000000 _gp
00026690 g     O .rwdata	00000180 alt_fd_list
000250cc g     F .text	00000090 alt_find_dev
000216c8 g     F .text	00000100 memcpy
000204a0 g     F .text	0000000c _cleanup_r
00025250 g     F .text	0000007c alt_io_redirect
00025db8 g       *ABS*	00000000 __DTOR_END__
000203f0 g     F .text	00000010 puts
00025a78 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00024ce8 g     F .text	00000050 alt_up_audio_read_fifo_head
000241c8 g     F .text	00000220 altera_avalon_jtag_uart_read
00023058 g     F .text	00000064 .hidden __udivsi3
000233b8 g     F .text	000000b0 isatty
0002937c g     O .bss	00000004 __malloc_top_pad
00020844 g     F .text	00000494 __sfvwrite_r
00021f20 g     F .text	00000058 _sbrk_r
00022e48 g     F .text	00000064 _read_r
000278c0 g     O .rwdata	00000004 alt_max_fd
00024d38 g     F .text	00000068 alt_up_audio_write_fifo_head
00022398 g     F .text	00000070 _fclose_r
00022700 g     F .text	00000084 fflush
00029378 g     O .bss	00000004 __malloc_max_sbrked_mem
000252cc g     F .text	00000180 alt_irq_register
00023590 g     F .text	000000e0 lseek
000278a0 g     O .rwdata	00000004 _global_impure_ptr
000219e4 g     F .text	0000053c _realloc_r
000294cc g       *ABS*	00000000 __bss_end
00025768 g     F .text	0000012c alt_tick
00024610 g     F .text	0000003c alt_up_audio_open_dev
0002081c g     F .text	00000014 __fp_lock_all
00024a40 g     F .text	00000068 alt_up_audio_play_r
000256c4 g     F .text	000000a4 alt_alarm_stop
00029390 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000cc alt_irq_handler
00026668 g     O .rwdata	00000028 alt_dev_null
00024f00 g     F .text	00000020 alt_dcache_flush_all
000278d8 g       *ABS*	00000000 __ram_rwdata_end
000278b8 g     O .rwdata	00000008 alt_dev_list
000239dc g     F .text	00000104 write
00025e3c g       *ABS*	00000000 __ram_rodata_end
000232c0 g     F .text	000000bc fstat
000230bc g     F .text	0000005c .hidden __umodsi3
000294cc g       *ABS*	00000000 end
00023d08 g     F .text	000000b4 altera_avalon_jtag_uart_init
000201c8 g     F .exceptions	00000060 alt_instruction_exception_entry
00025db8 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000243e8 g     F .text	00000228 altera_avalon_jtag_uart_write
0002080c g     F .text	00000004 __sfp_lock_acquire
000215f8 g     F .text	000000d0 memchr
000228a0 g     F .text	000002fc _free_r
00025c60 g     F .text	00000120 __call_exitprocs
000278a8 g     O .rwdata	00000004 __malloc_sbrk_base
00020228 g     F .text	0000003c _start
00029394 g     O .bss	00000004 _alt_tick_rate
00024bf0 g     F .text	000000f8 alt_up_audio_write_fifo
00029398 g     O .bss	00000008 _alt_nticks
00023770 g     F .text	00000108 read
00023b50 g     F .text	00000054 alt_sys_init
00024b10 g     F .text	000000e0 alt_up_audio_read_fifo
00025bd0 g     F .text	00000090 __register_exitproc
0002474c g     F .text	00000058 alt_up_audio_disable_write_interrupt
0002406c g     F .text	00000068 altera_avalon_jtag_uart_close
00023118 g     F .text	00000028 .hidden __mulsi3
00025e3c g       *ABS*	00000000 __ram_rwdata_start
00025db8 g       *ABS*	00000000 __ram_rodata_start
000293a4 g     O .bss	00000028 __malloc_current_mallinfo
00023ba4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000259c0 g     F .text	000000b8 alt_get_fd
00022280 g     F .text	00000058 _close_r
000246f8 g     F .text	00000054 alt_up_audio_enable_write_interrupt
00025b58 g     F .text	00000078 memcmp
00023c64 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000294cc g       *ABS*	00000000 __alt_stack_base
00023cb4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002211c g     F .text	00000164 __swsetup_r
000246a0 g     F .text	00000058 alt_up_audio_disable_read_interrupt
00020694 g     F .text	00000154 __sfp
00026260 g     O .rwdata	00000408 __malloc_av_
00020818 g     F .text	00000004 __sinit_lock_release
00021f78 g     F .text	00000054 __sread
000258b8 g     F .text	00000108 alt_find_file
00024f5c g     F .text	000000a8 alt_dev_llist_insert
000236ec g     F .text	00000024 __malloc_lock
000238e8 g     F .text	000000b8 sbrk
000226a0 g     F .text	00000060 _fflush_r
00029374 g       *ABS*	00000000 __bss_start
000218f4 g     F .text	000000f0 memset
00020264 g     F .text	000000c0 main
000249e0 g     F .text	00000060 alt_up_audio_write_fifo_space
0002938c g     O .bss	00000004 alt_envp
00029374 g     O .bss	00000004 __malloc_max_total_mem
00023c04 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000220b0 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022408 g     F .text	00000070 fclose
00020e18 g     F .text	000007e0 _malloc_r
000278c4 g     O .rwdata	00000004 alt_errno
00020cd8 g     F .text	00000098 _fwalk
00022f64 g     F .text	00000080 .hidden __divsi3
00022784 g     F .text	0000011c _malloc_trim_r
00025db8 g       *ABS*	00000000 __CTOR_END__
00025db8 g       *ABS*	00000000 __flash_rodata_start
00025db8 g       *ABS*	00000000 __DTOR_LIST__
00023b14 g     F .text	0000003c alt_irq_init
00023878 g     F .text	00000070 alt_release_fd
00025b10 g     F .text	00000014 atexit
000220b8 g     F .text	00000064 _write_r
000278a4 g     O .rwdata	00000004 _impure_ptr
00029384 g     O .bss	00000004 alt_argc
00022478 g     F .text	00000228 __sflush_r
00025068 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020830 g     F .text	00000014 __fp_unlock_all
000278b0 g     O .rwdata	00000008 alt_fs_list
00024978 g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00022db0 g     F .text	00000098 __swhatbuf_r
000278d8 g       *ABS*	00000000 _edata
000294cc g       *ABS*	00000000 _end
00020228 g       *ABS*	00000000 __ram_exceptions_end
000240d4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00024aa8 g     F .text	00000068 alt_up_audio_play_l
00021fd4 g     F .text	00000080 __swrite
000278ac g     O .rwdata	00000004 __malloc_trim_threshold
00025b24 g     F .text	00000034 exit
00020d70 g     F .text	000000a8 _fwalk_reent
00022fe4 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020810 g     F .text	00000004 __sfp_lock_release
00025d80 g     F .text	00000038 _exit
00024da0 g     F .text	00000160 alt_alarm_start
00022c00 g     F .text	000001b0 __smakebuf_r
00020400 g     F .text	00000098 strlen
00025564 g     F .text	00000160 open
0002515c g     F .text	00000020 alt_icache_flush_all
000278cc g     O .rwdata	00000004 alt_priority_mask
000278d0 g     O .rwdata	00000008 alt_alarm_list
00025004 g     F .text	00000064 _do_ctors
0002317c g     F .text	000000dc close
000234d0 g     F .text	00000084 alt_load
0002464c g     F .text	00000054 alt_up_audio_enable_read_interrupt
00020814 g     F .text	00000004 __sinit_lock_acquire
000247a4 g     F .text	0000003c alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408a14 	ori	at,at,552
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c80 	call	201c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001226 	beq	r2,zero,20184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10e4f317 	ldw	r3,-27700(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10a4f417 	ldw	r2,-27696(r2)
   20164:	e17ffd17 	ldw	r5,-12(fp)
   20168:	1009883a 	mov	r4,r2
   2016c:	183ee83a 	callr	r3
#endif
        break;
   20170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20174:	0005313a 	rdctl	r2,ipending
   20178:	e0bffb15 	stw	r2,-20(fp)
  return active;
   2017c:	e0bffb17 	ldw	r2,-20(fp)
   20180:	00000706 	br	201a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   2019c:	003fe306 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   201a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a4:	e0bfff17 	ldw	r2,-4(fp)
   201a8:	103fdd1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201ac:	0001883a 	nop
}
   201b0:	0001883a 	nop
   201b4:	e037883a 	mov	sp,fp
   201b8:	dfc00117 	ldw	ra,4(sp)
   201bc:	df000017 	ldw	fp,0(sp)
   201c0:	dec00204 	addi	sp,sp,8
   201c4:	f800283a 	ret

000201c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c8:	defffb04 	addi	sp,sp,-20
   201cc:	dfc00415 	stw	ra,16(sp)
   201d0:	df000315 	stw	fp,12(sp)
   201d4:	df000304 	addi	fp,sp,12
   201d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201dc:	00bfffc4 	movi	r2,-1
   201e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e8:	d0a6c017 	ldw	r2,-25856(gp)
   201ec:	10000726 	beq	r2,zero,2020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201f0:	d0a6c017 	ldw	r2,-25856(gp)
   201f4:	e0ffff17 	ldw	r3,-4(fp)
   201f8:	e1bffe17 	ldw	r6,-8(fp)
   201fc:	e17ffd17 	ldw	r5,-12(fp)
   20200:	1809883a 	mov	r4,r3
   20204:	103ee83a 	callr	r2
   20208:	00000206 	br	20214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   2020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20210:	0005883a 	mov	r2,zero
}
   20214:	e037883a 	mov	sp,fp
   20218:	dfc00117 	ldw	ra,4(sp)
   2021c:	df000017 	ldw	fp,0(sp)
   20220:	dec00204 	addi	sp,sp,8
   20224:	f800283a 	ret

Disassembly of section .text:

00020228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20228:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   2022c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20230:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20234:	d6be2814 	ori	gp,gp,63648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20238:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   2023c:	10a4dd14 	ori	r2,r2,37748

    movhi r3, %hi(__bss_end)
   20240:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20244:	18e53314 	ori	r3,r3,38092

    beq r2, r3, 1f
   20248:	10c00326 	beq	r2,r3,20258 <_start+0x30>

0:
    stw zero, (r2)
   2024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20254:	10fffd36 	bltu	r2,r3,2024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20258:	00234d00 	call	234d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   2025c:	00236700 	call	23670 <alt_main>

00020260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20260:	003fff06 	br	20260 <alt_after_alt_main>

00020264 <main>:
#include <altera_up_avalon_audio.h>
#include <stdio.h>

int main(void)
{
   20264:	defffa04 	addi	sp,sp,-24
   20268:	dfc00515 	stw	ra,20(sp)
   2026c:	df000415 	stw	fp,16(sp)
   20270:	df000404 	addi	fp,sp,16
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;

	// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/audio");
   20274:	010000b4 	movhi	r4,2
   20278:	21176e04 	addi	r4,r4,23992
   2027c:	00246100 	call	24610 <alt_up_audio_open_dev>
   20280:	e0bfff15 	stw	r2,-4(fp)
	if (audio_dev == NULL)
   20284:	e0bfff17 	ldw	r2,-4(fp)
   20288:	1000041e 	bne	r2,zero,2029c <main+0x38>
	printf("Error: could not open audio device \n");
   2028c:	010000b4 	movhi	r4,2
   20290:	21177104 	addi	r4,r4,24004
   20294:	00203f00 	call	203f0 <puts>
   20298:	00000306 	br	202a8 <main+0x44>
	else
	printf("Opened audio device \n");
   2029c:	010000b4 	movhi	r4,2
   202a0:	21177a04 	addi	r4,r4,24040
   202a4:	00203f00 	call	203f0 <puts>

	/* read and echo audio data */
	while(1)
	{
		int fifospace = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);
   202a8:	01400044 	movi	r5,1
   202ac:	e13fff17 	ldw	r4,-4(fp)
   202b0:	00248b00 	call	248b0 <alt_up_audio_read_fifo_avail>
   202b4:	e0bffe15 	stw	r2,-8(fp)
		if ( fifospace > 0 ) // check if data is available
   202b8:	e0bffe17 	ldw	r2,-8(fp)
   202bc:	00bffa0e 	bge	zero,r2,202a8 <main+0x44>
		{
			// read audio buffer
			alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
   202c0:	e0bffc04 	addi	r2,fp,-16
   202c4:	01c00044 	movi	r7,1
   202c8:	01800044 	movi	r6,1
   202cc:	100b883a 	mov	r5,r2
   202d0:	e13fff17 	ldw	r4,-4(fp)
   202d4:	0024b100 	call	24b10 <alt_up_audio_read_fifo>
			alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
   202d8:	e0bffd04 	addi	r2,fp,-12
   202dc:	000f883a 	mov	r7,zero
   202e0:	01800044 	movi	r6,1
   202e4:	100b883a 	mov	r5,r2
   202e8:	e13fff17 	ldw	r4,-4(fp)
   202ec:	0024b100 	call	24b10 <alt_up_audio_read_fifo>
			// write audio buffer
			alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
   202f0:	e0bffc04 	addi	r2,fp,-16
   202f4:	01c00044 	movi	r7,1
   202f8:	01800044 	movi	r6,1
   202fc:	100b883a 	mov	r5,r2
   20300:	e13fff17 	ldw	r4,-4(fp)
   20304:	0024bf00 	call	24bf0 <alt_up_audio_write_fifo>
			alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
   20308:	e0bffd04 	addi	r2,fp,-12
   2030c:	000f883a 	mov	r7,zero
   20310:	01800044 	movi	r6,1
   20314:	100b883a 	mov	r5,r2
   20318:	e13fff17 	ldw	r4,-4(fp)
   2031c:	0024bf00 	call	24bf0 <alt_up_audio_write_fifo>
	{
   20320:	003fe106 	br	202a8 <main+0x44>

00020324 <_puts_r>:
   20324:	defff504 	addi	sp,sp,-44
   20328:	dc000815 	stw	r16,32(sp)
   2032c:	2021883a 	mov	r16,r4
   20330:	2809883a 	mov	r4,r5
   20334:	dc400915 	stw	r17,36(sp)
   20338:	dfc00a15 	stw	ra,40(sp)
   2033c:	2823883a 	mov	r17,r5
   20340:	00204000 	call	20400 <strlen>
   20344:	11000044 	addi	r4,r2,1
   20348:	d8800515 	stw	r2,20(sp)
   2034c:	00800044 	movi	r2,1
   20350:	00c000b4 	movhi	r3,2
   20354:	d8800715 	stw	r2,28(sp)
   20358:	d8800404 	addi	r2,sp,16
   2035c:	18d78004 	addi	r3,r3,24064
   20360:	d8800115 	stw	r2,4(sp)
   20364:	00800084 	movi	r2,2
   20368:	dc400415 	stw	r17,16(sp)
   2036c:	d8c00615 	stw	r3,24(sp)
   20370:	d9000315 	stw	r4,12(sp)
   20374:	d8800215 	stw	r2,8(sp)
   20378:	81400217 	ldw	r5,8(r16)
   2037c:	80000226 	beq	r16,zero,20388 <_puts_r+0x64>
   20380:	80800e17 	ldw	r2,56(r16)
   20384:	10001326 	beq	r2,zero,203d4 <_puts_r+0xb0>
   20388:	2880030b 	ldhu	r2,12(r5)
   2038c:	10c8000c 	andi	r3,r2,8192
   20390:	1800061e 	bne	r3,zero,203ac <_puts_r+0x88>
   20394:	28c01917 	ldw	r3,100(r5)
   20398:	0137ffc4 	movi	r4,-8193
   2039c:	10880014 	ori	r2,r2,8192
   203a0:	1906703a 	and	r3,r3,r4
   203a4:	2880030d 	sth	r2,12(r5)
   203a8:	28c01915 	stw	r3,100(r5)
   203ac:	d9800104 	addi	r6,sp,4
   203b0:	8009883a 	mov	r4,r16
   203b4:	00208440 	call	20844 <__sfvwrite_r>
   203b8:	10000b1e 	bne	r2,zero,203e8 <_puts_r+0xc4>
   203bc:	00800284 	movi	r2,10
   203c0:	dfc00a17 	ldw	ra,40(sp)
   203c4:	dc400917 	ldw	r17,36(sp)
   203c8:	dc000817 	ldw	r16,32(sp)
   203cc:	dec00b04 	addi	sp,sp,44
   203d0:	f800283a 	ret
   203d4:	8009883a 	mov	r4,r16
   203d8:	d9400015 	stw	r5,0(sp)
   203dc:	00207fc0 	call	207fc <__sinit>
   203e0:	d9400017 	ldw	r5,0(sp)
   203e4:	003fe806 	br	20388 <_puts_r+0x64>
   203e8:	00bfffc4 	movi	r2,-1
   203ec:	003ff406 	br	203c0 <_puts_r+0x9c>

000203f0 <puts>:
   203f0:	008000b4 	movhi	r2,2
   203f4:	200b883a 	mov	r5,r4
   203f8:	111e2917 	ldw	r4,30884(r2)
   203fc:	00203241 	jmpi	20324 <_puts_r>

00020400 <strlen>:
   20400:	208000cc 	andi	r2,r4,3
   20404:	10000926 	beq	r2,zero,2042c <strlen+0x2c>
   20408:	2005883a 	mov	r2,r4
   2040c:	00000306 	br	2041c <strlen+0x1c>
   20410:	10800044 	addi	r2,r2,1
   20414:	10c000cc 	andi	r3,r2,3
   20418:	18000526 	beq	r3,zero,20430 <strlen+0x30>
   2041c:	10c00007 	ldb	r3,0(r2)
   20420:	183ffb1e 	bne	r3,zero,20410 <strlen+0x10>
   20424:	1105c83a 	sub	r2,r2,r4
   20428:	f800283a 	ret
   2042c:	2005883a 	mov	r2,r4
   20430:	11400017 	ldw	r5,0(r2)
   20434:	01ffbff4 	movhi	r7,65279
   20438:	39ffbfc4 	addi	r7,r7,-257
   2043c:	29c7883a 	add	r3,r5,r7
   20440:	01a02074 	movhi	r6,32897
   20444:	014a303a 	nor	r5,zero,r5
   20448:	1946703a 	and	r3,r3,r5
   2044c:	31a02004 	addi	r6,r6,-32640
   20450:	1986703a 	and	r3,r3,r6
   20454:	1800071e 	bne	r3,zero,20474 <strlen+0x74>
   20458:	11400117 	ldw	r5,4(r2)
   2045c:	10800104 	addi	r2,r2,4
   20460:	29c7883a 	add	r3,r5,r7
   20464:	014a303a 	nor	r5,zero,r5
   20468:	1946703a 	and	r3,r3,r5
   2046c:	1986703a 	and	r3,r3,r6
   20470:	183ff926 	beq	r3,zero,20458 <strlen+0x58>
   20474:	10c00007 	ldb	r3,0(r2)
   20478:	183fea26 	beq	r3,zero,20424 <strlen+0x24>
   2047c:	10c00047 	ldb	r3,1(r2)
   20480:	10800044 	addi	r2,r2,1
   20484:	183fe726 	beq	r3,zero,20424 <strlen+0x24>
   20488:	10c00047 	ldb	r3,1(r2)
   2048c:	10800044 	addi	r2,r2,1
   20490:	183ffa1e 	bne	r3,zero,2047c <strlen+0x7c>
   20494:	003fe306 	br	20424 <strlen+0x24>

00020498 <__fp_lock>:
   20498:	0005883a 	mov	r2,zero
   2049c:	f800283a 	ret

000204a0 <_cleanup_r>:
   204a0:	014000b4 	movhi	r5,2
   204a4:	2948e604 	addi	r5,r5,9112
   204a8:	0020d701 	jmpi	20d70 <_fwalk_reent>

000204ac <__fp_unlock>:
   204ac:	0005883a 	mov	r2,zero
   204b0:	f800283a 	ret

000204b4 <__sinit.part.0>:
   204b4:	00c000b4 	movhi	r3,2
   204b8:	20800117 	ldw	r2,4(r4)
   204bc:	18c12804 	addi	r3,r3,1184
   204c0:	20c00f15 	stw	r3,60(r4)
   204c4:	2140bb04 	addi	r5,r4,748
   204c8:	00c000c4 	movi	r3,3
   204cc:	20c0b915 	stw	r3,740(r4)
   204d0:	2140ba15 	stw	r5,744(r4)
   204d4:	2000b815 	stw	zero,736(r4)
   204d8:	10001705 	stb	zero,92(r2)
   204dc:	10001745 	stb	zero,93(r2)
   204e0:	10001785 	stb	zero,94(r2)
   204e4:	100017c5 	stb	zero,95(r2)
   204e8:	10001805 	stb	zero,96(r2)
   204ec:	10001845 	stb	zero,97(r2)
   204f0:	10001885 	stb	zero,98(r2)
   204f4:	100018c5 	stb	zero,99(r2)
   204f8:	00c00104 	movi	r3,4
   204fc:	10c00315 	stw	r3,12(r2)
   20500:	020000b4 	movhi	r8,2
   20504:	20c00217 	ldw	r3,8(r4)
   20508:	01c000b4 	movhi	r7,2
   2050c:	018000b4 	movhi	r6,2
   20510:	014000b4 	movhi	r5,2
   20514:	4207de04 	addi	r8,r8,8056
   20518:	39c7f504 	addi	r7,r7,8148
   2051c:	31881504 	addi	r6,r6,8276
   20520:	29482c04 	addi	r5,r5,8368
   20524:	02400074 	movhi	r9,1
   20528:	10001915 	stw	zero,100(r2)
   2052c:	10000015 	stw	zero,0(r2)
   20530:	10000115 	stw	zero,4(r2)
   20534:	10000215 	stw	zero,8(r2)
   20538:	10000415 	stw	zero,16(r2)
   2053c:	10000515 	stw	zero,20(r2)
   20540:	10000615 	stw	zero,24(r2)
   20544:	10800715 	stw	r2,28(r2)
   20548:	12000815 	stw	r8,32(r2)
   2054c:	11c00915 	stw	r7,36(r2)
   20550:	11800a15 	stw	r6,40(r2)
   20554:	11400b15 	stw	r5,44(r2)
   20558:	4a400284 	addi	r9,r9,10
   2055c:	1a400315 	stw	r9,12(r3)
   20560:	18001915 	stw	zero,100(r3)
   20564:	18000015 	stw	zero,0(r3)
   20568:	18000115 	stw	zero,4(r3)
   2056c:	18000215 	stw	zero,8(r3)
   20570:	18000415 	stw	zero,16(r3)
   20574:	18001705 	stb	zero,92(r3)
   20578:	18001745 	stb	zero,93(r3)
   2057c:	18001785 	stb	zero,94(r3)
   20580:	180017c5 	stb	zero,95(r3)
   20584:	18001805 	stb	zero,96(r3)
   20588:	18001845 	stb	zero,97(r3)
   2058c:	18001885 	stb	zero,98(r3)
   20590:	180018c5 	stb	zero,99(r3)
   20594:	20800317 	ldw	r2,12(r4)
   20598:	024000b4 	movhi	r9,2
   2059c:	18000515 	stw	zero,20(r3)
   205a0:	18000615 	stw	zero,24(r3)
   205a4:	18c00715 	stw	r3,28(r3)
   205a8:	1a000815 	stw	r8,32(r3)
   205ac:	19c00915 	stw	r7,36(r3)
   205b0:	19800a15 	stw	r6,40(r3)
   205b4:	19400b15 	stw	r5,44(r3)
   205b8:	4a400484 	addi	r9,r9,18
   205bc:	10001915 	stw	zero,100(r2)
   205c0:	10000015 	stw	zero,0(r2)
   205c4:	10000115 	stw	zero,4(r2)
   205c8:	10000215 	stw	zero,8(r2)
   205cc:	12400315 	stw	r9,12(r2)
   205d0:	10000415 	stw	zero,16(r2)
   205d4:	10000515 	stw	zero,20(r2)
   205d8:	10000615 	stw	zero,24(r2)
   205dc:	10001705 	stb	zero,92(r2)
   205e0:	10001745 	stb	zero,93(r2)
   205e4:	10001785 	stb	zero,94(r2)
   205e8:	100017c5 	stb	zero,95(r2)
   205ec:	10001805 	stb	zero,96(r2)
   205f0:	10001845 	stb	zero,97(r2)
   205f4:	10001885 	stb	zero,98(r2)
   205f8:	100018c5 	stb	zero,99(r2)
   205fc:	10800715 	stw	r2,28(r2)
   20600:	12000815 	stw	r8,32(r2)
   20604:	11c00915 	stw	r7,36(r2)
   20608:	11800a15 	stw	r6,40(r2)
   2060c:	11400b15 	stw	r5,44(r2)
   20610:	00800044 	movi	r2,1
   20614:	20800e15 	stw	r2,56(r4)
   20618:	f800283a 	ret

0002061c <__sfmoreglue>:
   2061c:	defffc04 	addi	sp,sp,-16
   20620:	dc800215 	stw	r18,8(sp)
   20624:	2825883a 	mov	r18,r5
   20628:	dc000015 	stw	r16,0(sp)
   2062c:	01401a04 	movi	r5,104
   20630:	2021883a 	mov	r16,r4
   20634:	913fffc4 	addi	r4,r18,-1
   20638:	dfc00315 	stw	ra,12(sp)
   2063c:	dc400115 	stw	r17,4(sp)
   20640:	00231180 	call	23118 <__mulsi3>
   20644:	8009883a 	mov	r4,r16
   20648:	11401d04 	addi	r5,r2,116
   2064c:	1023883a 	mov	r17,r2
   20650:	0020e180 	call	20e18 <_malloc_r>
   20654:	1021883a 	mov	r16,r2
   20658:	10000726 	beq	r2,zero,20678 <__sfmoreglue+0x5c>
   2065c:	11000304 	addi	r4,r2,12
   20660:	10000015 	stw	zero,0(r2)
   20664:	14800115 	stw	r18,4(r2)
   20668:	11000215 	stw	r4,8(r2)
   2066c:	89801a04 	addi	r6,r17,104
   20670:	000b883a 	mov	r5,zero
   20674:	00218f40 	call	218f4 <memset>
   20678:	8005883a 	mov	r2,r16
   2067c:	dfc00317 	ldw	ra,12(sp)
   20680:	dc800217 	ldw	r18,8(sp)
   20684:	dc400117 	ldw	r17,4(sp)
   20688:	dc000017 	ldw	r16,0(sp)
   2068c:	dec00404 	addi	sp,sp,16
   20690:	f800283a 	ret

00020694 <__sfp>:
   20694:	defffb04 	addi	sp,sp,-20
   20698:	008000b4 	movhi	r2,2
   2069c:	dc000015 	stw	r16,0(sp)
   206a0:	141e2817 	ldw	r16,30880(r2)
   206a4:	dc400115 	stw	r17,4(sp)
   206a8:	dfc00415 	stw	ra,16(sp)
   206ac:	80800e17 	ldw	r2,56(r16)
   206b0:	dcc00315 	stw	r19,12(sp)
   206b4:	dc800215 	stw	r18,8(sp)
   206b8:	2023883a 	mov	r17,r4
   206bc:	10003126 	beq	r2,zero,20784 <__sfp+0xf0>
   206c0:	8100ba17 	ldw	r4,744(r16)
   206c4:	8140b917 	ldw	r5,740(r16)
   206c8:	04c00104 	movi	r19,4
   206cc:	8400b804 	addi	r16,r16,736
   206d0:	297fffc4 	addi	r5,r5,-1
   206d4:	2800050e 	bge	r5,zero,206ec <__sfp+0x58>
   206d8:	00002406 	br	2076c <__sfp+0xd8>
   206dc:	297fffc4 	addi	r5,r5,-1
   206e0:	28bfffd8 	cmpnei	r2,r5,-1
   206e4:	21001a04 	addi	r4,r4,104
   206e8:	10002026 	beq	r2,zero,2076c <__sfp+0xd8>
   206ec:	2080030f 	ldh	r2,12(r4)
   206f0:	103ffa1e 	bne	r2,zero,206dc <__sfp+0x48>
   206f4:	00bffff4 	movhi	r2,65535
   206f8:	10800044 	addi	r2,r2,1
   206fc:	20001915 	stw	zero,100(r4)
   20700:	20000015 	stw	zero,0(r4)
   20704:	20000115 	stw	zero,4(r4)
   20708:	20000215 	stw	zero,8(r4)
   2070c:	20800315 	stw	r2,12(r4)
   20710:	20000415 	stw	zero,16(r4)
   20714:	20000515 	stw	zero,20(r4)
   20718:	20000615 	stw	zero,24(r4)
   2071c:	20001705 	stb	zero,92(r4)
   20720:	20001745 	stb	zero,93(r4)
   20724:	20001785 	stb	zero,94(r4)
   20728:	200017c5 	stb	zero,95(r4)
   2072c:	20001805 	stb	zero,96(r4)
   20730:	20001845 	stb	zero,97(r4)
   20734:	20001885 	stb	zero,98(r4)
   20738:	200018c5 	stb	zero,99(r4)
   2073c:	20000c15 	stw	zero,48(r4)
   20740:	20000d15 	stw	zero,52(r4)
   20744:	20001115 	stw	zero,68(r4)
   20748:	20001215 	stw	zero,72(r4)
   2074c:	2005883a 	mov	r2,r4
   20750:	dfc00417 	ldw	ra,16(sp)
   20754:	dcc00317 	ldw	r19,12(sp)
   20758:	dc800217 	ldw	r18,8(sp)
   2075c:	dc400117 	ldw	r17,4(sp)
   20760:	dc000017 	ldw	r16,0(sp)
   20764:	dec00504 	addi	sp,sp,20
   20768:	f800283a 	ret
   2076c:	80800017 	ldw	r2,0(r16)
   20770:	10000726 	beq	r2,zero,20790 <__sfp+0xfc>
   20774:	11000217 	ldw	r4,8(r2)
   20778:	11400117 	ldw	r5,4(r2)
   2077c:	1021883a 	mov	r16,r2
   20780:	003fd306 	br	206d0 <__sfp+0x3c>
   20784:	8009883a 	mov	r4,r16
   20788:	00204b40 	call	204b4 <__sinit.part.0>
   2078c:	003fcc06 	br	206c0 <__sfp+0x2c>
   20790:	01406b04 	movi	r5,428
   20794:	8809883a 	mov	r4,r17
   20798:	0020e180 	call	20e18 <_malloc_r>
   2079c:	1025883a 	mov	r18,r2
   207a0:	10000c26 	beq	r2,zero,207d4 <__sfp+0x140>
   207a4:	11000304 	addi	r4,r2,12
   207a8:	11000215 	stw	r4,8(r2)
   207ac:	000b883a 	mov	r5,zero
   207b0:	10000015 	stw	zero,0(r2)
   207b4:	14c00115 	stw	r19,4(r2)
   207b8:	01806804 	movi	r6,416
   207bc:	00218f40 	call	218f4 <memset>
   207c0:	1009883a 	mov	r4,r2
   207c4:	84800015 	stw	r18,0(r16)
   207c8:	014000c4 	movi	r5,3
   207cc:	9021883a 	mov	r16,r18
   207d0:	003fc606 	br	206ec <__sfp+0x58>
   207d4:	80000015 	stw	zero,0(r16)
   207d8:	00800304 	movi	r2,12
   207dc:	88800015 	stw	r2,0(r17)
   207e0:	0009883a 	mov	r4,zero
   207e4:	003fd906 	br	2074c <__sfp+0xb8>

000207e8 <_cleanup>:
   207e8:	008000b4 	movhi	r2,2
   207ec:	111e2817 	ldw	r4,30880(r2)
   207f0:	014000b4 	movhi	r5,2
   207f4:	2948e604 	addi	r5,r5,9112
   207f8:	0020d701 	jmpi	20d70 <_fwalk_reent>

000207fc <__sinit>:
   207fc:	20800e17 	ldw	r2,56(r4)
   20800:	10000126 	beq	r2,zero,20808 <__sinit+0xc>
   20804:	f800283a 	ret
   20808:	00204b41 	jmpi	204b4 <__sinit.part.0>

0002080c <__sfp_lock_acquire>:
   2080c:	f800283a 	ret

00020810 <__sfp_lock_release>:
   20810:	f800283a 	ret

00020814 <__sinit_lock_acquire>:
   20814:	f800283a 	ret

00020818 <__sinit_lock_release>:
   20818:	f800283a 	ret

0002081c <__fp_lock_all>:
   2081c:	008000b4 	movhi	r2,2
   20820:	111e2917 	ldw	r4,30884(r2)
   20824:	014000b4 	movhi	r5,2
   20828:	29412604 	addi	r5,r5,1176
   2082c:	0020cd81 	jmpi	20cd8 <_fwalk>

00020830 <__fp_unlock_all>:
   20830:	008000b4 	movhi	r2,2
   20834:	111e2917 	ldw	r4,30884(r2)
   20838:	014000b4 	movhi	r5,2
   2083c:	29412b04 	addi	r5,r5,1196
   20840:	0020cd81 	jmpi	20cd8 <_fwalk>

00020844 <__sfvwrite_r>:
   20844:	30800217 	ldw	r2,8(r6)
   20848:	10009b26 	beq	r2,zero,20ab8 <__sfvwrite_r+0x274>
   2084c:	2a00030b 	ldhu	r8,12(r5)
   20850:	defff404 	addi	sp,sp,-48
   20854:	dd400715 	stw	r21,28(sp)
   20858:	dd000615 	stw	r20,24(sp)
   2085c:	dc000215 	stw	r16,8(sp)
   20860:	dfc00b15 	stw	ra,44(sp)
   20864:	df000a15 	stw	fp,40(sp)
   20868:	ddc00915 	stw	r23,36(sp)
   2086c:	dd800815 	stw	r22,32(sp)
   20870:	dcc00515 	stw	r19,20(sp)
   20874:	dc800415 	stw	r18,16(sp)
   20878:	dc400315 	stw	r17,12(sp)
   2087c:	4080020c 	andi	r2,r8,8
   20880:	3029883a 	mov	r20,r6
   20884:	202b883a 	mov	r21,r4
   20888:	2821883a 	mov	r16,r5
   2088c:	10002626 	beq	r2,zero,20928 <__sfvwrite_r+0xe4>
   20890:	28800417 	ldw	r2,16(r5)
   20894:	10002426 	beq	r2,zero,20928 <__sfvwrite_r+0xe4>
   20898:	4080008c 	andi	r2,r8,2
   2089c:	a4400017 	ldw	r17,0(r20)
   208a0:	10002926 	beq	r2,zero,20948 <__sfvwrite_r+0x104>
   208a4:	05a00034 	movhi	r22,32768
   208a8:	0027883a 	mov	r19,zero
   208ac:	0025883a 	mov	r18,zero
   208b0:	b5bf0004 	addi	r22,r22,-1024
   208b4:	980d883a 	mov	r6,r19
   208b8:	a809883a 	mov	r4,r21
   208bc:	90007126 	beq	r18,zero,20a84 <__sfvwrite_r+0x240>
   208c0:	900f883a 	mov	r7,r18
   208c4:	b480012e 	bgeu	r22,r18,208cc <__sfvwrite_r+0x88>
   208c8:	b00f883a 	mov	r7,r22
   208cc:	80800917 	ldw	r2,36(r16)
   208d0:	81400717 	ldw	r5,28(r16)
   208d4:	103ee83a 	callr	r2
   208d8:	0080720e 	bge	zero,r2,20aa4 <__sfvwrite_r+0x260>
   208dc:	a0c00217 	ldw	r3,8(r20)
   208e0:	98a7883a 	add	r19,r19,r2
   208e4:	90a5c83a 	sub	r18,r18,r2
   208e8:	1885c83a 	sub	r2,r3,r2
   208ec:	a0800215 	stw	r2,8(r20)
   208f0:	103ff01e 	bne	r2,zero,208b4 <__sfvwrite_r+0x70>
   208f4:	0005883a 	mov	r2,zero
   208f8:	dfc00b17 	ldw	ra,44(sp)
   208fc:	df000a17 	ldw	fp,40(sp)
   20900:	ddc00917 	ldw	r23,36(sp)
   20904:	dd800817 	ldw	r22,32(sp)
   20908:	dd400717 	ldw	r21,28(sp)
   2090c:	dd000617 	ldw	r20,24(sp)
   20910:	dcc00517 	ldw	r19,20(sp)
   20914:	dc800417 	ldw	r18,16(sp)
   20918:	dc400317 	ldw	r17,12(sp)
   2091c:	dc000217 	ldw	r16,8(sp)
   20920:	dec00c04 	addi	sp,sp,48
   20924:	f800283a 	ret
   20928:	800b883a 	mov	r5,r16
   2092c:	a809883a 	mov	r4,r21
   20930:	002211c0 	call	2211c <__swsetup_r>
   20934:	1000e61e 	bne	r2,zero,20cd0 <__sfvwrite_r+0x48c>
   20938:	8200030b 	ldhu	r8,12(r16)
   2093c:	a4400017 	ldw	r17,0(r20)
   20940:	4080008c 	andi	r2,r8,2
   20944:	103fd71e 	bne	r2,zero,208a4 <__sfvwrite_r+0x60>
   20948:	4080004c 	andi	r2,r8,1
   2094c:	10005c1e 	bne	r2,zero,20ac0 <__sfvwrite_r+0x27c>
   20950:	00a00034 	movhi	r2,32768
   20954:	10bfff84 	addi	r2,r2,-2
   20958:	00e00034 	movhi	r3,32768
   2095c:	d8800015 	stw	r2,0(sp)
   20960:	18bfffc4 	addi	r2,r3,-1
   20964:	0039883a 	mov	fp,zero
   20968:	0025883a 	mov	r18,zero
   2096c:	d8800115 	stw	r2,4(sp)
   20970:	90004026 	beq	r18,zero,20a74 <__sfvwrite_r+0x230>
   20974:	4080800c 	andi	r2,r8,512
   20978:	81000017 	ldw	r4,0(r16)
   2097c:	85c00217 	ldw	r23,8(r16)
   20980:	10008826 	beq	r2,zero,20ba4 <__sfvwrite_r+0x360>
   20984:	b82d883a 	mov	r22,r23
   20988:	95c0ae36 	bltu	r18,r23,20c44 <__sfvwrite_r+0x400>
   2098c:	4081200c 	andi	r2,r8,1152
   20990:	10002626 	beq	r2,zero,20a2c <__sfvwrite_r+0x1e8>
   20994:	81800517 	ldw	r6,20(r16)
   20998:	81400417 	ldw	r5,16(r16)
   2099c:	3185883a 	add	r2,r6,r6
   209a0:	1185883a 	add	r2,r2,r6
   209a4:	1026d7fa 	srli	r19,r2,31
   209a8:	216dc83a 	sub	r22,r4,r5
   209ac:	b1000044 	addi	r4,r22,1
   209b0:	98a7883a 	add	r19,r19,r2
   209b4:	9827d07a 	srai	r19,r19,1
   209b8:	2485883a 	add	r2,r4,r18
   209bc:	980d883a 	mov	r6,r19
   209c0:	9880022e 	bgeu	r19,r2,209cc <__sfvwrite_r+0x188>
   209c4:	1027883a 	mov	r19,r2
   209c8:	100d883a 	mov	r6,r2
   209cc:	4201000c 	andi	r8,r8,1024
   209d0:	4000af26 	beq	r8,zero,20c90 <__sfvwrite_r+0x44c>
   209d4:	300b883a 	mov	r5,r6
   209d8:	a809883a 	mov	r4,r21
   209dc:	0020e180 	call	20e18 <_malloc_r>
   209e0:	1000b726 	beq	r2,zero,20cc0 <__sfvwrite_r+0x47c>
   209e4:	81400417 	ldw	r5,16(r16)
   209e8:	b00d883a 	mov	r6,r22
   209ec:	1009883a 	mov	r4,r2
   209f0:	00216c80 	call	216c8 <memcpy>
   209f4:	100f883a 	mov	r7,r2
   209f8:	8080030b 	ldhu	r2,12(r16)
   209fc:	00fedfc4 	movi	r3,-1153
   20a00:	10c4703a 	and	r2,r2,r3
   20a04:	10802014 	ori	r2,r2,128
   20a08:	8080030d 	sth	r2,12(r16)
   20a0c:	3d89883a 	add	r4,r7,r22
   20a10:	9d85c83a 	sub	r2,r19,r22
   20a14:	81c00415 	stw	r7,16(r16)
   20a18:	81000015 	stw	r4,0(r16)
   20a1c:	84c00515 	stw	r19,20(r16)
   20a20:	902f883a 	mov	r23,r18
   20a24:	80800215 	stw	r2,8(r16)
   20a28:	902d883a 	mov	r22,r18
   20a2c:	b00d883a 	mov	r6,r22
   20a30:	e00b883a 	mov	r5,fp
   20a34:	00217c80 	call	217c8 <memmove>
   20a38:	81000217 	ldw	r4,8(r16)
   20a3c:	80800017 	ldw	r2,0(r16)
   20a40:	9027883a 	mov	r19,r18
   20a44:	25c9c83a 	sub	r4,r4,r23
   20a48:	1585883a 	add	r2,r2,r22
   20a4c:	81000215 	stw	r4,8(r16)
   20a50:	80800015 	stw	r2,0(r16)
   20a54:	0025883a 	mov	r18,zero
   20a58:	a1800217 	ldw	r6,8(r20)
   20a5c:	e4f9883a 	add	fp,fp,r19
   20a60:	34e7c83a 	sub	r19,r6,r19
   20a64:	a4c00215 	stw	r19,8(r20)
   20a68:	983fa226 	beq	r19,zero,208f4 <__sfvwrite_r+0xb0>
   20a6c:	8200030b 	ldhu	r8,12(r16)
   20a70:	903fc01e 	bne	r18,zero,20974 <__sfvwrite_r+0x130>
   20a74:	8f000017 	ldw	fp,0(r17)
   20a78:	8c800117 	ldw	r18,4(r17)
   20a7c:	8c400204 	addi	r17,r17,8
   20a80:	003fbb06 	br	20970 <__sfvwrite_r+0x12c>
   20a84:	8cc00017 	ldw	r19,0(r17)
   20a88:	8c800117 	ldw	r18,4(r17)
   20a8c:	8c400204 	addi	r17,r17,8
   20a90:	003f8806 	br	208b4 <__sfvwrite_r+0x70>
   20a94:	800b883a 	mov	r5,r16
   20a98:	a809883a 	mov	r4,r21
   20a9c:	00226a00 	call	226a0 <_fflush_r>
   20aa0:	10002226 	beq	r2,zero,20b2c <__sfvwrite_r+0x2e8>
   20aa4:	8080030b 	ldhu	r2,12(r16)
   20aa8:	10801014 	ori	r2,r2,64
   20aac:	8080030d 	sth	r2,12(r16)
   20ab0:	00bfffc4 	movi	r2,-1
   20ab4:	003f9006 	br	208f8 <__sfvwrite_r+0xb4>
   20ab8:	0005883a 	mov	r2,zero
   20abc:	f800283a 	ret
   20ac0:	002d883a 	mov	r22,zero
   20ac4:	0039883a 	mov	fp,zero
   20ac8:	0005883a 	mov	r2,zero
   20acc:	002f883a 	mov	r23,zero
   20ad0:	b0001d26 	beq	r22,zero,20b48 <__sfvwrite_r+0x304>
   20ad4:	10002026 	beq	r2,zero,20b58 <__sfvwrite_r+0x314>
   20ad8:	e027883a 	mov	r19,fp
   20adc:	b4c0012e 	bgeu	r22,r19,20ae4 <__sfvwrite_r+0x2a0>
   20ae0:	b027883a 	mov	r19,r22
   20ae4:	81000017 	ldw	r4,0(r16)
   20ae8:	80800417 	ldw	r2,16(r16)
   20aec:	81c00517 	ldw	r7,20(r16)
   20af0:	1100032e 	bgeu	r2,r4,20b00 <__sfvwrite_r+0x2bc>
   20af4:	84800217 	ldw	r18,8(r16)
   20af8:	3ca5883a 	add	r18,r7,r18
   20afc:	94c01e16 	blt	r18,r19,20b78 <__sfvwrite_r+0x334>
   20b00:	99c05316 	blt	r19,r7,20c50 <__sfvwrite_r+0x40c>
   20b04:	80800917 	ldw	r2,36(r16)
   20b08:	81400717 	ldw	r5,28(r16)
   20b0c:	b80d883a 	mov	r6,r23
   20b10:	a809883a 	mov	r4,r21
   20b14:	103ee83a 	callr	r2
   20b18:	1025883a 	mov	r18,r2
   20b1c:	00bfe10e 	bge	zero,r2,20aa4 <__sfvwrite_r+0x260>
   20b20:	e4b9c83a 	sub	fp,fp,r18
   20b24:	e03fdb26 	beq	fp,zero,20a94 <__sfvwrite_r+0x250>
   20b28:	00800044 	movi	r2,1
   20b2c:	a1800217 	ldw	r6,8(r20)
   20b30:	bcaf883a 	add	r23,r23,r18
   20b34:	b4adc83a 	sub	r22,r22,r18
   20b38:	34a5c83a 	sub	r18,r6,r18
   20b3c:	a4800215 	stw	r18,8(r20)
   20b40:	903f6c26 	beq	r18,zero,208f4 <__sfvwrite_r+0xb0>
   20b44:	b03fe31e 	bne	r22,zero,20ad4 <__sfvwrite_r+0x290>
   20b48:	8d800117 	ldw	r22,4(r17)
   20b4c:	8dc00017 	ldw	r23,0(r17)
   20b50:	8c400204 	addi	r17,r17,8
   20b54:	b03ffc26 	beq	r22,zero,20b48 <__sfvwrite_r+0x304>
   20b58:	b00d883a 	mov	r6,r22
   20b5c:	01400284 	movi	r5,10
   20b60:	b809883a 	mov	r4,r23
   20b64:	00215f80 	call	215f8 <memchr>
   20b68:	10004626 	beq	r2,zero,20c84 <__sfvwrite_r+0x440>
   20b6c:	10800044 	addi	r2,r2,1
   20b70:	15f9c83a 	sub	fp,r2,r23
   20b74:	003fd806 	br	20ad8 <__sfvwrite_r+0x294>
   20b78:	b80b883a 	mov	r5,r23
   20b7c:	900d883a 	mov	r6,r18
   20b80:	00217c80 	call	217c8 <memmove>
   20b84:	80800017 	ldw	r2,0(r16)
   20b88:	800b883a 	mov	r5,r16
   20b8c:	a809883a 	mov	r4,r21
   20b90:	1485883a 	add	r2,r2,r18
   20b94:	80800015 	stw	r2,0(r16)
   20b98:	00226a00 	call	226a0 <_fflush_r>
   20b9c:	103fe026 	beq	r2,zero,20b20 <__sfvwrite_r+0x2dc>
   20ba0:	003fc006 	br	20aa4 <__sfvwrite_r+0x260>
   20ba4:	80800417 	ldw	r2,16(r16)
   20ba8:	11001436 	bltu	r2,r4,20bfc <__sfvwrite_r+0x3b8>
   20bac:	84c00517 	ldw	r19,20(r16)
   20bb0:	94c01236 	bltu	r18,r19,20bfc <__sfvwrite_r+0x3b8>
   20bb4:	d8800017 	ldw	r2,0(sp)
   20bb8:	1480302e 	bgeu	r2,r18,20c7c <__sfvwrite_r+0x438>
   20bbc:	d9000117 	ldw	r4,4(sp)
   20bc0:	980b883a 	mov	r5,r19
   20bc4:	0022f640 	call	22f64 <__divsi3>
   20bc8:	980b883a 	mov	r5,r19
   20bcc:	1009883a 	mov	r4,r2
   20bd0:	00231180 	call	23118 <__mulsi3>
   20bd4:	82000917 	ldw	r8,36(r16)
   20bd8:	81400717 	ldw	r5,28(r16)
   20bdc:	100f883a 	mov	r7,r2
   20be0:	e00d883a 	mov	r6,fp
   20be4:	a809883a 	mov	r4,r21
   20be8:	403ee83a 	callr	r8
   20bec:	1027883a 	mov	r19,r2
   20bf0:	00bfac0e 	bge	zero,r2,20aa4 <__sfvwrite_r+0x260>
   20bf4:	94e5c83a 	sub	r18,r18,r19
   20bf8:	003f9706 	br	20a58 <__sfvwrite_r+0x214>
   20bfc:	b827883a 	mov	r19,r23
   20c00:	95c0012e 	bgeu	r18,r23,20c08 <__sfvwrite_r+0x3c4>
   20c04:	9027883a 	mov	r19,r18
   20c08:	980d883a 	mov	r6,r19
   20c0c:	e00b883a 	mov	r5,fp
   20c10:	00217c80 	call	217c8 <memmove>
   20c14:	80800217 	ldw	r2,8(r16)
   20c18:	81000017 	ldw	r4,0(r16)
   20c1c:	14c5c83a 	sub	r2,r2,r19
   20c20:	24c9883a 	add	r4,r4,r19
   20c24:	80800215 	stw	r2,8(r16)
   20c28:	81000015 	stw	r4,0(r16)
   20c2c:	103ff11e 	bne	r2,zero,20bf4 <__sfvwrite_r+0x3b0>
   20c30:	800b883a 	mov	r5,r16
   20c34:	a809883a 	mov	r4,r21
   20c38:	00226a00 	call	226a0 <_fflush_r>
   20c3c:	103fed26 	beq	r2,zero,20bf4 <__sfvwrite_r+0x3b0>
   20c40:	003f9806 	br	20aa4 <__sfvwrite_r+0x260>
   20c44:	902f883a 	mov	r23,r18
   20c48:	902d883a 	mov	r22,r18
   20c4c:	003f7706 	br	20a2c <__sfvwrite_r+0x1e8>
   20c50:	980d883a 	mov	r6,r19
   20c54:	b80b883a 	mov	r5,r23
   20c58:	00217c80 	call	217c8 <memmove>
   20c5c:	80c00217 	ldw	r3,8(r16)
   20c60:	80800017 	ldw	r2,0(r16)
   20c64:	9825883a 	mov	r18,r19
   20c68:	1cc7c83a 	sub	r3,r3,r19
   20c6c:	14c5883a 	add	r2,r2,r19
   20c70:	80c00215 	stw	r3,8(r16)
   20c74:	80800015 	stw	r2,0(r16)
   20c78:	003fa906 	br	20b20 <__sfvwrite_r+0x2dc>
   20c7c:	9009883a 	mov	r4,r18
   20c80:	003fcf06 	br	20bc0 <__sfvwrite_r+0x37c>
   20c84:	b4c00044 	addi	r19,r22,1
   20c88:	9839883a 	mov	fp,r19
   20c8c:	003f9306 	br	20adc <__sfvwrite_r+0x298>
   20c90:	a809883a 	mov	r4,r21
   20c94:	00219e40 	call	219e4 <_realloc_r>
   20c98:	100f883a 	mov	r7,r2
   20c9c:	103f5b1e 	bne	r2,zero,20a0c <__sfvwrite_r+0x1c8>
   20ca0:	81400417 	ldw	r5,16(r16)
   20ca4:	a809883a 	mov	r4,r21
   20ca8:	00228a00 	call	228a0 <_free_r>
   20cac:	8080030b 	ldhu	r2,12(r16)
   20cb0:	00c00304 	movi	r3,12
   20cb4:	a8c00015 	stw	r3,0(r21)
   20cb8:	10bfdfcc 	andi	r2,r2,65407
   20cbc:	003f7a06 	br	20aa8 <__sfvwrite_r+0x264>
   20cc0:	00c00304 	movi	r3,12
   20cc4:	8080030b 	ldhu	r2,12(r16)
   20cc8:	a8c00015 	stw	r3,0(r21)
   20ccc:	003f7606 	br	20aa8 <__sfvwrite_r+0x264>
   20cd0:	00bfffc4 	movi	r2,-1
   20cd4:	003f0806 	br	208f8 <__sfvwrite_r+0xb4>

00020cd8 <_fwalk>:
   20cd8:	defffa04 	addi	sp,sp,-24
   20cdc:	dd000415 	stw	r20,16(sp)
   20ce0:	dcc00315 	stw	r19,12(sp)
   20ce4:	dc800215 	stw	r18,8(sp)
   20ce8:	dfc00515 	stw	ra,20(sp)
   20cec:	dc400115 	stw	r17,4(sp)
   20cf0:	dc000015 	stw	r16,0(sp)
   20cf4:	2827883a 	mov	r19,r5
   20cf8:	2480b804 	addi	r18,r4,736
   20cfc:	0029883a 	mov	r20,zero
   20d00:	94400117 	ldw	r17,4(r18)
   20d04:	94000217 	ldw	r16,8(r18)
   20d08:	8c7fffc4 	addi	r17,r17,-1
   20d0c:	88000d16 	blt	r17,zero,20d44 <_fwalk+0x6c>
   20d10:	8080030b 	ldhu	r2,12(r16)
   20d14:	8c7fffc4 	addi	r17,r17,-1
   20d18:	108000b0 	cmpltui	r2,r2,2
   20d1c:	1000061e 	bne	r2,zero,20d38 <_fwalk+0x60>
   20d20:	8080038f 	ldh	r2,14(r16)
   20d24:	8009883a 	mov	r4,r16
   20d28:	10bfffe0 	cmpeqi	r2,r2,-1
   20d2c:	1000021e 	bne	r2,zero,20d38 <_fwalk+0x60>
   20d30:	983ee83a 	callr	r19
   20d34:	a0a8b03a 	or	r20,r20,r2
   20d38:	88bfffd8 	cmpnei	r2,r17,-1
   20d3c:	84001a04 	addi	r16,r16,104
   20d40:	103ff31e 	bne	r2,zero,20d10 <_fwalk+0x38>
   20d44:	94800017 	ldw	r18,0(r18)
   20d48:	903fed1e 	bne	r18,zero,20d00 <_fwalk+0x28>
   20d4c:	a005883a 	mov	r2,r20
   20d50:	dfc00517 	ldw	ra,20(sp)
   20d54:	dd000417 	ldw	r20,16(sp)
   20d58:	dcc00317 	ldw	r19,12(sp)
   20d5c:	dc800217 	ldw	r18,8(sp)
   20d60:	dc400117 	ldw	r17,4(sp)
   20d64:	dc000017 	ldw	r16,0(sp)
   20d68:	dec00604 	addi	sp,sp,24
   20d6c:	f800283a 	ret

00020d70 <_fwalk_reent>:
   20d70:	defff904 	addi	sp,sp,-28
   20d74:	dd400515 	stw	r21,20(sp)
   20d78:	dd000415 	stw	r20,16(sp)
   20d7c:	dcc00315 	stw	r19,12(sp)
   20d80:	dc800215 	stw	r18,8(sp)
   20d84:	dfc00615 	stw	ra,24(sp)
   20d88:	dc400115 	stw	r17,4(sp)
   20d8c:	dc000015 	stw	r16,0(sp)
   20d90:	202b883a 	mov	r21,r4
   20d94:	2827883a 	mov	r19,r5
   20d98:	2480b804 	addi	r18,r4,736
   20d9c:	0029883a 	mov	r20,zero
   20da0:	94400117 	ldw	r17,4(r18)
   20da4:	94000217 	ldw	r16,8(r18)
   20da8:	8c7fffc4 	addi	r17,r17,-1
   20dac:	88000e16 	blt	r17,zero,20de8 <_fwalk_reent+0x78>
   20db0:	8080030b 	ldhu	r2,12(r16)
   20db4:	8c7fffc4 	addi	r17,r17,-1
   20db8:	108000b0 	cmpltui	r2,r2,2
   20dbc:	1000071e 	bne	r2,zero,20ddc <_fwalk_reent+0x6c>
   20dc0:	8080038f 	ldh	r2,14(r16)
   20dc4:	800b883a 	mov	r5,r16
   20dc8:	a809883a 	mov	r4,r21
   20dcc:	10bfffe0 	cmpeqi	r2,r2,-1
   20dd0:	1000021e 	bne	r2,zero,20ddc <_fwalk_reent+0x6c>
   20dd4:	983ee83a 	callr	r19
   20dd8:	a0a8b03a 	or	r20,r20,r2
   20ddc:	88bfffd8 	cmpnei	r2,r17,-1
   20de0:	84001a04 	addi	r16,r16,104
   20de4:	103ff21e 	bne	r2,zero,20db0 <_fwalk_reent+0x40>
   20de8:	94800017 	ldw	r18,0(r18)
   20dec:	903fec1e 	bne	r18,zero,20da0 <_fwalk_reent+0x30>
   20df0:	a005883a 	mov	r2,r20
   20df4:	dfc00617 	ldw	ra,24(sp)
   20df8:	dd400517 	ldw	r21,20(sp)
   20dfc:	dd000417 	ldw	r20,16(sp)
   20e00:	dcc00317 	ldw	r19,12(sp)
   20e04:	dc800217 	ldw	r18,8(sp)
   20e08:	dc400117 	ldw	r17,4(sp)
   20e0c:	dc000017 	ldw	r16,0(sp)
   20e10:	dec00704 	addi	sp,sp,28
   20e14:	f800283a 	ret

00020e18 <_malloc_r>:
   20e18:	defff604 	addi	sp,sp,-40
   20e1c:	dc400115 	stw	r17,4(sp)
   20e20:	2c4002c4 	addi	r17,r5,11
   20e24:	dc800215 	stw	r18,8(sp)
   20e28:	dfc00915 	stw	ra,36(sp)
   20e2c:	df000815 	stw	fp,32(sp)
   20e30:	ddc00715 	stw	r23,28(sp)
   20e34:	dd800615 	stw	r22,24(sp)
   20e38:	dd400515 	stw	r21,20(sp)
   20e3c:	dd000415 	stw	r20,16(sp)
   20e40:	dcc00315 	stw	r19,12(sp)
   20e44:	dc000015 	stw	r16,0(sp)
   20e48:	888005e8 	cmpgeui	r2,r17,23
   20e4c:	2025883a 	mov	r18,r4
   20e50:	10001b1e 	bne	r2,zero,20ec0 <_malloc_r+0xa8>
   20e54:	29400468 	cmpgeui	r5,r5,17
   20e58:	2800821e 	bne	r5,zero,21064 <_malloc_r+0x24c>
   20e5c:	00236ec0 	call	236ec <__malloc_lock>
   20e60:	04400404 	movi	r17,16
   20e64:	00800604 	movi	r2,24
   20e68:	01c00084 	movi	r7,2
   20e6c:	04c000b4 	movhi	r19,2
   20e70:	9cd89804 	addi	r19,r19,25184
   20e74:	9885883a 	add	r2,r19,r2
   20e78:	14000117 	ldw	r16,4(r2)
   20e7c:	10fffe04 	addi	r3,r2,-8
   20e80:	80c08b26 	beq	r16,r3,210b0 <_malloc_r+0x298>
   20e84:	80800117 	ldw	r2,4(r16)
   20e88:	81000317 	ldw	r4,12(r16)
   20e8c:	00ffff04 	movi	r3,-4
   20e90:	10c4703a 	and	r2,r2,r3
   20e94:	81400217 	ldw	r5,8(r16)
   20e98:	8085883a 	add	r2,r16,r2
   20e9c:	10c00117 	ldw	r3,4(r2)
   20ea0:	29000315 	stw	r4,12(r5)
   20ea4:	21400215 	stw	r5,8(r4)
   20ea8:	18c00054 	ori	r3,r3,1
   20eac:	10c00115 	stw	r3,4(r2)
   20eb0:	9009883a 	mov	r4,r18
   20eb4:	00237100 	call	23710 <__malloc_unlock>
   20eb8:	80800204 	addi	r2,r16,8
   20ebc:	00006c06 	br	21070 <_malloc_r+0x258>
   20ec0:	00bffe04 	movi	r2,-8
   20ec4:	88a2703a 	and	r17,r17,r2
   20ec8:	88006616 	blt	r17,zero,21064 <_malloc_r+0x24c>
   20ecc:	89406536 	bltu	r17,r5,21064 <_malloc_r+0x24c>
   20ed0:	00236ec0 	call	236ec <__malloc_lock>
   20ed4:	88807e28 	cmpgeui	r2,r17,504
   20ed8:	10012226 	beq	r2,zero,21364 <_malloc_r+0x54c>
   20edc:	8804d27a 	srli	r2,r17,9
   20ee0:	10006f26 	beq	r2,zero,210a0 <_malloc_r+0x288>
   20ee4:	10c00168 	cmpgeui	r3,r2,5
   20ee8:	1800fe1e 	bne	r3,zero,212e4 <_malloc_r+0x4cc>
   20eec:	8804d1ba 	srli	r2,r17,6
   20ef0:	11c00e44 	addi	r7,r2,57
   20ef4:	380890fa 	slli	r4,r7,3
   20ef8:	12000e04 	addi	r8,r2,56
   20efc:	04c000b4 	movhi	r19,2
   20f00:	9cd89804 	addi	r19,r19,25184
   20f04:	9909883a 	add	r4,r19,r4
   20f08:	24000117 	ldw	r16,4(r4)
   20f0c:	213ffe04 	addi	r4,r4,-8
   20f10:	24000b26 	beq	r4,r16,20f40 <_malloc_r+0x128>
   20f14:	01bfff04 	movi	r6,-4
   20f18:	00000306 	br	20f28 <_malloc_r+0x110>
   20f1c:	1800d60e 	bge	r3,zero,21278 <_malloc_r+0x460>
   20f20:	84000317 	ldw	r16,12(r16)
   20f24:	24000626 	beq	r4,r16,20f40 <_malloc_r+0x128>
   20f28:	80800117 	ldw	r2,4(r16)
   20f2c:	1184703a 	and	r2,r2,r6
   20f30:	1447c83a 	sub	r3,r2,r17
   20f34:	19400408 	cmpgei	r5,r3,16
   20f38:	283ff826 	beq	r5,zero,20f1c <_malloc_r+0x104>
   20f3c:	400f883a 	mov	r7,r8
   20f40:	9c000417 	ldw	r16,16(r19)
   20f44:	024000b4 	movhi	r9,2
   20f48:	4a589a04 	addi	r9,r9,25192
   20f4c:	82405f26 	beq	r16,r9,210cc <_malloc_r+0x2b4>
   20f50:	80c00117 	ldw	r3,4(r16)
   20f54:	00bfff04 	movi	r2,-4
   20f58:	1884703a 	and	r2,r3,r2
   20f5c:	1447c83a 	sub	r3,r2,r17
   20f60:	19000410 	cmplti	r4,r3,16
   20f64:	20010a26 	beq	r4,zero,21390 <_malloc_r+0x578>
   20f68:	9a400515 	stw	r9,20(r19)
   20f6c:	9a400415 	stw	r9,16(r19)
   20f70:	1800ff0e 	bge	r3,zero,21370 <_malloc_r+0x558>
   20f74:	10c08028 	cmpgeui	r3,r2,512
   20f78:	1800c11e 	bne	r3,zero,21280 <_malloc_r+0x468>
   20f7c:	1006d0fa 	srli	r3,r2,3
   20f80:	1008d17a 	srli	r4,r2,5
   20f84:	00800044 	movi	r2,1
   20f88:	18c00044 	addi	r3,r3,1
   20f8c:	180690fa 	slli	r3,r3,3
   20f90:	99400117 	ldw	r5,4(r19)
   20f94:	1104983a 	sll	r2,r2,r4
   20f98:	98c7883a 	add	r3,r19,r3
   20f9c:	19000017 	ldw	r4,0(r3)
   20fa0:	1144b03a 	or	r2,r2,r5
   20fa4:	197ffe04 	addi	r5,r3,-8
   20fa8:	81400315 	stw	r5,12(r16)
   20fac:	81000215 	stw	r4,8(r16)
   20fb0:	98800115 	stw	r2,4(r19)
   20fb4:	1c000015 	stw	r16,0(r3)
   20fb8:	24000315 	stw	r16,12(r4)
   20fbc:	3807d0ba 	srai	r3,r7,2
   20fc0:	01000044 	movi	r4,1
   20fc4:	20c8983a 	sll	r4,r4,r3
   20fc8:	11004536 	bltu	r2,r4,210e0 <_malloc_r+0x2c8>
   20fcc:	2086703a 	and	r3,r4,r2
   20fd0:	18000a1e 	bne	r3,zero,20ffc <_malloc_r+0x1e4>
   20fd4:	00ffff04 	movi	r3,-4
   20fd8:	2109883a 	add	r4,r4,r4
   20fdc:	38ce703a 	and	r7,r7,r3
   20fe0:	2086703a 	and	r3,r4,r2
   20fe4:	39c00104 	addi	r7,r7,4
   20fe8:	1800041e 	bne	r3,zero,20ffc <_malloc_r+0x1e4>
   20fec:	2109883a 	add	r4,r4,r4
   20ff0:	2086703a 	and	r3,r4,r2
   20ff4:	39c00104 	addi	r7,r7,4
   20ff8:	183ffc26 	beq	r3,zero,20fec <_malloc_r+0x1d4>
   20ffc:	02bfff04 	movi	r10,-4
   21000:	381690fa 	slli	r11,r7,3
   21004:	3819883a 	mov	r12,r7
   21008:	9ad7883a 	add	r11,r19,r11
   2100c:	5811883a 	mov	r8,r11
   21010:	40800317 	ldw	r2,12(r8)
   21014:	4080bc26 	beq	r8,r2,21308 <_malloc_r+0x4f0>
   21018:	10c00117 	ldw	r3,4(r2)
   2101c:	1021883a 	mov	r16,r2
   21020:	10800317 	ldw	r2,12(r2)
   21024:	1a86703a 	and	r3,r3,r10
   21028:	1c4bc83a 	sub	r5,r3,r17
   2102c:	29800410 	cmplti	r6,r5,16
   21030:	3000ba26 	beq	r6,zero,2131c <_malloc_r+0x504>
   21034:	283ff716 	blt	r5,zero,21014 <_malloc_r+0x1fc>
   21038:	80c7883a 	add	r3,r16,r3
   2103c:	19400117 	ldw	r5,4(r3)
   21040:	81800217 	ldw	r6,8(r16)
   21044:	9009883a 	mov	r4,r18
   21048:	29400054 	ori	r5,r5,1
   2104c:	19400115 	stw	r5,4(r3)
   21050:	30800315 	stw	r2,12(r6)
   21054:	11800215 	stw	r6,8(r2)
   21058:	00237100 	call	23710 <__malloc_unlock>
   2105c:	80800204 	addi	r2,r16,8
   21060:	00000306 	br	21070 <_malloc_r+0x258>
   21064:	00800304 	movi	r2,12
   21068:	90800015 	stw	r2,0(r18)
   2106c:	0005883a 	mov	r2,zero
   21070:	dfc00917 	ldw	ra,36(sp)
   21074:	df000817 	ldw	fp,32(sp)
   21078:	ddc00717 	ldw	r23,28(sp)
   2107c:	dd800617 	ldw	r22,24(sp)
   21080:	dd400517 	ldw	r21,20(sp)
   21084:	dd000417 	ldw	r20,16(sp)
   21088:	dcc00317 	ldw	r19,12(sp)
   2108c:	dc800217 	ldw	r18,8(sp)
   21090:	dc400117 	ldw	r17,4(sp)
   21094:	dc000017 	ldw	r16,0(sp)
   21098:	dec00a04 	addi	sp,sp,40
   2109c:	f800283a 	ret
   210a0:	01008004 	movi	r4,512
   210a4:	01c01004 	movi	r7,64
   210a8:	02000fc4 	movi	r8,63
   210ac:	003f9306 	br	20efc <_malloc_r+0xe4>
   210b0:	14000317 	ldw	r16,12(r2)
   210b4:	39c00084 	addi	r7,r7,2
   210b8:	143f721e 	bne	r2,r16,20e84 <_malloc_r+0x6c>
   210bc:	9c000417 	ldw	r16,16(r19)
   210c0:	024000b4 	movhi	r9,2
   210c4:	4a589a04 	addi	r9,r9,25192
   210c8:	827fa11e 	bne	r16,r9,20f50 <_malloc_r+0x138>
   210cc:	3807d0ba 	srai	r3,r7,2
   210d0:	01000044 	movi	r4,1
   210d4:	98800117 	ldw	r2,4(r19)
   210d8:	20c8983a 	sll	r4,r4,r3
   210dc:	113fbb2e 	bgeu	r2,r4,20fcc <_malloc_r+0x1b4>
   210e0:	9c000217 	ldw	r16,8(r19)
   210e4:	00bfff04 	movi	r2,-4
   210e8:	85400117 	ldw	r21,4(r16)
   210ec:	a8ac703a 	and	r22,r21,r2
   210f0:	b4400336 	bltu	r22,r17,21100 <_malloc_r+0x2e8>
   210f4:	b445c83a 	sub	r2,r22,r17
   210f8:	10c00408 	cmpgei	r3,r2,16
   210fc:	1800541e 	bne	r3,zero,21250 <_malloc_r+0x438>
   21100:	008000b4 	movhi	r2,2
   21104:	109e2a17 	ldw	r2,30888(r2)
   21108:	00c000f4 	movhi	r3,3
   2110c:	1d64df17 	ldw	r21,-27780(r3)
   21110:	10bfffd8 	cmpnei	r2,r2,-1
   21114:	85b9883a 	add	fp,r16,r22
   21118:	8d6b883a 	add	r21,r17,r21
   2111c:	1000d626 	beq	r2,zero,21478 <_malloc_r+0x660>
   21120:	ad4403c4 	addi	r21,r21,4111
   21124:	00bc0004 	movi	r2,-4096
   21128:	a8aa703a 	and	r21,r21,r2
   2112c:	a80b883a 	mov	r5,r21
   21130:	9009883a 	mov	r4,r18
   21134:	0021f200 	call	21f20 <_sbrk_r>
   21138:	102f883a 	mov	r23,r2
   2113c:	10bfffd8 	cmpnei	r2,r2,-1
   21140:	1000a826 	beq	r2,zero,213e4 <_malloc_r+0x5cc>
   21144:	bf00a636 	bltu	r23,fp,213e0 <_malloc_r+0x5c8>
   21148:	008000f4 	movhi	r2,3
   2114c:	1524e917 	ldw	r20,-27740(r2)
   21150:	ad29883a 	add	r20,r21,r20
   21154:	1524e915 	stw	r20,-27740(r2)
   21158:	a007883a 	mov	r3,r20
   2115c:	e5c0ec26 	beq	fp,r23,21510 <_malloc_r+0x6f8>
   21160:	008000b4 	movhi	r2,2
   21164:	109e2a17 	ldw	r2,30888(r2)
   21168:	10bfffd8 	cmpnei	r2,r2,-1
   2116c:	1000ef26 	beq	r2,zero,2152c <_malloc_r+0x714>
   21170:	bf39c83a 	sub	fp,r23,fp
   21174:	e0c7883a 	add	r3,fp,r3
   21178:	008000f4 	movhi	r2,3
   2117c:	10e4e915 	stw	r3,-27740(r2)
   21180:	bf0001cc 	andi	fp,r23,7
   21184:	e000c526 	beq	fp,zero,2149c <_malloc_r+0x684>
   21188:	bf2fc83a 	sub	r23,r23,fp
   2118c:	bdc00204 	addi	r23,r23,8
   21190:	05040204 	movi	r20,4104
   21194:	a729c83a 	sub	r20,r20,fp
   21198:	bd6b883a 	add	r21,r23,r21
   2119c:	a569c83a 	sub	r20,r20,r21
   211a0:	a503ffcc 	andi	r20,r20,4095
   211a4:	a00b883a 	mov	r5,r20
   211a8:	9009883a 	mov	r4,r18
   211ac:	0021f200 	call	21f20 <_sbrk_r>
   211b0:	10ffffe0 	cmpeqi	r3,r2,-1
   211b4:	1800f31e 	bne	r3,zero,21584 <_malloc_r+0x76c>
   211b8:	15c5c83a 	sub	r2,r2,r23
   211bc:	152b883a 	add	r21,r2,r20
   211c0:	008000f4 	movhi	r2,3
   211c4:	1164e917 	ldw	r5,-27740(r2)
   211c8:	9dc00215 	stw	r23,8(r19)
   211cc:	ad400054 	ori	r21,r21,1
   211d0:	a169883a 	add	r20,r20,r5
   211d4:	1524e915 	stw	r20,-27740(r2)
   211d8:	bd400115 	stw	r21,4(r23)
   211dc:	84c0d626 	beq	r16,r19,21538 <_malloc_r+0x720>
   211e0:	b0800428 	cmpgeui	r2,r22,16
   211e4:	1000d626 	beq	r2,zero,21540 <_malloc_r+0x728>
   211e8:	80c00117 	ldw	r3,4(r16)
   211ec:	013ffe04 	movi	r4,-8
   211f0:	b0bffd04 	addi	r2,r22,-12
   211f4:	1104703a 	and	r2,r2,r4
   211f8:	18c0004c 	andi	r3,r3,1
   211fc:	1886b03a 	or	r3,r3,r2
   21200:	80c00115 	stw	r3,4(r16)
   21204:	01000144 	movi	r4,5
   21208:	8087883a 	add	r3,r16,r2
   2120c:	19000115 	stw	r4,4(r3)
   21210:	19000215 	stw	r4,8(r3)
   21214:	10800428 	cmpgeui	r2,r2,16
   21218:	1000df1e 	bne	r2,zero,21598 <_malloc_r+0x780>
   2121c:	bd400117 	ldw	r21,4(r23)
   21220:	b821883a 	mov	r16,r23
   21224:	008000f4 	movhi	r2,3
   21228:	10a4de17 	ldw	r2,-27784(r2)
   2122c:	1500022e 	bgeu	r2,r20,21238 <_malloc_r+0x420>
   21230:	008000f4 	movhi	r2,3
   21234:	1524de15 	stw	r20,-27784(r2)
   21238:	008000f4 	movhi	r2,3
   2123c:	10a4dd17 	ldw	r2,-27788(r2)
   21240:	15006a2e 	bgeu	r2,r20,213ec <_malloc_r+0x5d4>
   21244:	008000f4 	movhi	r2,3
   21248:	1524dd15 	stw	r20,-27788(r2)
   2124c:	00006706 	br	213ec <_malloc_r+0x5d4>
   21250:	88c00054 	ori	r3,r17,1
   21254:	80c00115 	stw	r3,4(r16)
   21258:	8463883a 	add	r17,r16,r17
   2125c:	10800054 	ori	r2,r2,1
   21260:	9c400215 	stw	r17,8(r19)
   21264:	88800115 	stw	r2,4(r17)
   21268:	9009883a 	mov	r4,r18
   2126c:	00237100 	call	23710 <__malloc_unlock>
   21270:	80800204 	addi	r2,r16,8
   21274:	003f7e06 	br	21070 <_malloc_r+0x258>
   21278:	81000317 	ldw	r4,12(r16)
   2127c:	003f0506 	br	20e94 <_malloc_r+0x7c>
   21280:	1006d27a 	srli	r3,r2,9
   21284:	19000168 	cmpgeui	r4,r3,5
   21288:	20005026 	beq	r4,zero,213cc <_malloc_r+0x5b4>
   2128c:	19000568 	cmpgeui	r4,r3,21
   21290:	20008c1e 	bne	r4,zero,214c4 <_malloc_r+0x6ac>
   21294:	19401704 	addi	r5,r3,92
   21298:	280a90fa 	slli	r5,r5,3
   2129c:	190016c4 	addi	r4,r3,91
   212a0:	994b883a 	add	r5,r19,r5
   212a4:	28c00017 	ldw	r3,0(r5)
   212a8:	297ffe04 	addi	r5,r5,-8
   212ac:	28c07426 	beq	r5,r3,21480 <_malloc_r+0x668>
   212b0:	01bfff04 	movi	r6,-4
   212b4:	19000117 	ldw	r4,4(r3)
   212b8:	2188703a 	and	r4,r4,r6
   212bc:	1100022e 	bgeu	r2,r4,212c8 <_malloc_r+0x4b0>
   212c0:	18c00217 	ldw	r3,8(r3)
   212c4:	28fffb1e 	bne	r5,r3,212b4 <_malloc_r+0x49c>
   212c8:	19400317 	ldw	r5,12(r3)
   212cc:	98800117 	ldw	r2,4(r19)
   212d0:	81400315 	stw	r5,12(r16)
   212d4:	80c00215 	stw	r3,8(r16)
   212d8:	2c000215 	stw	r16,8(r5)
   212dc:	1c000315 	stw	r16,12(r3)
   212e0:	003f3606 	br	20fbc <_malloc_r+0x1a4>
   212e4:	10c00568 	cmpgeui	r3,r2,21
   212e8:	18004a26 	beq	r3,zero,21414 <_malloc_r+0x5fc>
   212ec:	10c01568 	cmpgeui	r3,r2,85
   212f0:	18007b1e 	bne	r3,zero,214e0 <_malloc_r+0x6c8>
   212f4:	8804d33a 	srli	r2,r17,12
   212f8:	11c01bc4 	addi	r7,r2,111
   212fc:	380890fa 	slli	r4,r7,3
   21300:	12001b84 	addi	r8,r2,110
   21304:	003efd06 	br	20efc <_malloc_r+0xe4>
   21308:	63000044 	addi	r12,r12,1
   2130c:	608000cc 	andi	r2,r12,3
   21310:	42000204 	addi	r8,r8,8
   21314:	103f3e1e 	bne	r2,zero,21010 <_malloc_r+0x1f8>
   21318:	00004506 	br	21430 <_malloc_r+0x618>
   2131c:	81000217 	ldw	r4,8(r16)
   21320:	89800054 	ori	r6,r17,1
   21324:	81800115 	stw	r6,4(r16)
   21328:	20800315 	stw	r2,12(r4)
   2132c:	11000215 	stw	r4,8(r2)
   21330:	8463883a 	add	r17,r16,r17
   21334:	9c400515 	stw	r17,20(r19)
   21338:	9c400415 	stw	r17,16(r19)
   2133c:	28800054 	ori	r2,r5,1
   21340:	88800115 	stw	r2,4(r17)
   21344:	8a400315 	stw	r9,12(r17)
   21348:	8a400215 	stw	r9,8(r17)
   2134c:	80c7883a 	add	r3,r16,r3
   21350:	19400015 	stw	r5,0(r3)
   21354:	9009883a 	mov	r4,r18
   21358:	00237100 	call	23710 <__malloc_unlock>
   2135c:	80800204 	addi	r2,r16,8
   21360:	003f4306 	br	21070 <_malloc_r+0x258>
   21364:	880ed0fa 	srli	r7,r17,3
   21368:	88800204 	addi	r2,r17,8
   2136c:	003ebf06 	br	20e6c <_malloc_r+0x54>
   21370:	8085883a 	add	r2,r16,r2
   21374:	10c00117 	ldw	r3,4(r2)
   21378:	9009883a 	mov	r4,r18
   2137c:	18c00054 	ori	r3,r3,1
   21380:	10c00115 	stw	r3,4(r2)
   21384:	00237100 	call	23710 <__malloc_unlock>
   21388:	80800204 	addi	r2,r16,8
   2138c:	003f3806 	br	21070 <_malloc_r+0x258>
   21390:	89000054 	ori	r4,r17,1
   21394:	81000115 	stw	r4,4(r16)
   21398:	8463883a 	add	r17,r16,r17
   2139c:	9c400515 	stw	r17,20(r19)
   213a0:	9c400415 	stw	r17,16(r19)
   213a4:	19000054 	ori	r4,r3,1
   213a8:	89000115 	stw	r4,4(r17)
   213ac:	8085883a 	add	r2,r16,r2
   213b0:	8a400315 	stw	r9,12(r17)
   213b4:	8a400215 	stw	r9,8(r17)
   213b8:	10c00015 	stw	r3,0(r2)
   213bc:	9009883a 	mov	r4,r18
   213c0:	00237100 	call	23710 <__malloc_unlock>
   213c4:	80800204 	addi	r2,r16,8
   213c8:	003f2906 	br	21070 <_malloc_r+0x258>
   213cc:	1006d1ba 	srli	r3,r2,6
   213d0:	19400e44 	addi	r5,r3,57
   213d4:	280a90fa 	slli	r5,r5,3
   213d8:	19000e04 	addi	r4,r3,56
   213dc:	003fb006 	br	212a0 <_malloc_r+0x488>
   213e0:	84c04626 	beq	r16,r19,214fc <_malloc_r+0x6e4>
   213e4:	9c000217 	ldw	r16,8(r19)
   213e8:	85400117 	ldw	r21,4(r16)
   213ec:	00bfff04 	movi	r2,-4
   213f0:	a8aa703a 	and	r21,r21,r2
   213f4:	ac45c83a 	sub	r2,r21,r17
   213f8:	ac400236 	bltu	r21,r17,21404 <_malloc_r+0x5ec>
   213fc:	10c00408 	cmpgei	r3,r2,16
   21400:	183f931e 	bne	r3,zero,21250 <_malloc_r+0x438>
   21404:	9009883a 	mov	r4,r18
   21408:	00237100 	call	23710 <__malloc_unlock>
   2140c:	0005883a 	mov	r2,zero
   21410:	003f1706 	br	21070 <_malloc_r+0x258>
   21414:	11c01704 	addi	r7,r2,92
   21418:	380890fa 	slli	r4,r7,3
   2141c:	120016c4 	addi	r8,r2,91
   21420:	003eb606 	br	20efc <_malloc_r+0xe4>
   21424:	58800217 	ldw	r2,8(r11)
   21428:	39ffffc4 	addi	r7,r7,-1
   2142c:	12c0701e 	bne	r2,r11,215f0 <_malloc_r+0x7d8>
   21430:	388000cc 	andi	r2,r7,3
   21434:	5afffe04 	addi	r11,r11,-8
   21438:	103ffa1e 	bne	r2,zero,21424 <_malloc_r+0x60c>
   2143c:	98c00117 	ldw	r3,4(r19)
   21440:	0104303a 	nor	r2,zero,r4
   21444:	10c4703a 	and	r2,r2,r3
   21448:	98800115 	stw	r2,4(r19)
   2144c:	2109883a 	add	r4,r4,r4
   21450:	113f2336 	bltu	r2,r4,210e0 <_malloc_r+0x2c8>
   21454:	203f2226 	beq	r4,zero,210e0 <_malloc_r+0x2c8>
   21458:	2086703a 	and	r3,r4,r2
   2145c:	1800041e 	bne	r3,zero,21470 <_malloc_r+0x658>
   21460:	2109883a 	add	r4,r4,r4
   21464:	2086703a 	and	r3,r4,r2
   21468:	63000104 	addi	r12,r12,4
   2146c:	183ffc26 	beq	r3,zero,21460 <_malloc_r+0x648>
   21470:	600f883a 	mov	r7,r12
   21474:	003ee206 	br	21000 <_malloc_r+0x1e8>
   21478:	ad400404 	addi	r21,r21,16
   2147c:	003f2b06 	br	2112c <_malloc_r+0x314>
   21480:	2009d0ba 	srai	r4,r4,2
   21484:	00800044 	movi	r2,1
   21488:	99800117 	ldw	r6,4(r19)
   2148c:	1104983a 	sll	r2,r2,r4
   21490:	1184b03a 	or	r2,r2,r6
   21494:	98800115 	stw	r2,4(r19)
   21498:	003f8d06 	br	212d0 <_malloc_r+0x4b8>
   2149c:	bd69883a 	add	r20,r23,r21
   214a0:	0529c83a 	sub	r20,zero,r20
   214a4:	a503ffcc 	andi	r20,r20,4095
   214a8:	a00b883a 	mov	r5,r20
   214ac:	9009883a 	mov	r4,r18
   214b0:	0021f200 	call	21f20 <_sbrk_r>
   214b4:	10ffffe0 	cmpeqi	r3,r2,-1
   214b8:	183f3f26 	beq	r3,zero,211b8 <_malloc_r+0x3a0>
   214bc:	0029883a 	mov	r20,zero
   214c0:	003f3f06 	br	211c0 <_malloc_r+0x3a8>
   214c4:	19001568 	cmpgeui	r4,r3,85
   214c8:	2000201e 	bne	r4,zero,2154c <_malloc_r+0x734>
   214cc:	1006d33a 	srli	r3,r2,12
   214d0:	19401bc4 	addi	r5,r3,111
   214d4:	280a90fa 	slli	r5,r5,3
   214d8:	19001b84 	addi	r4,r3,110
   214dc:	003f7006 	br	212a0 <_malloc_r+0x488>
   214e0:	10c05568 	cmpgeui	r3,r2,341
   214e4:	1800201e 	bne	r3,zero,21568 <_malloc_r+0x750>
   214e8:	8804d3fa 	srli	r2,r17,15
   214ec:	11c01e04 	addi	r7,r2,120
   214f0:	380890fa 	slli	r4,r7,3
   214f4:	12001dc4 	addi	r8,r2,119
   214f8:	003e8006 	br	20efc <_malloc_r+0xe4>
   214fc:	008000f4 	movhi	r2,3
   21500:	10e4e917 	ldw	r3,-27740(r2)
   21504:	a8c7883a 	add	r3,r21,r3
   21508:	10e4e915 	stw	r3,-27740(r2)
   2150c:	003f1406 	br	21160 <_malloc_r+0x348>
   21510:	e083ffcc 	andi	r2,fp,4095
   21514:	103f121e 	bne	r2,zero,21160 <_malloc_r+0x348>
   21518:	9c000217 	ldw	r16,8(r19)
   2151c:	b56b883a 	add	r21,r22,r21
   21520:	ad400054 	ori	r21,r21,1
   21524:	85400115 	stw	r21,4(r16)
   21528:	003f3e06 	br	21224 <_malloc_r+0x40c>
   2152c:	008000b4 	movhi	r2,2
   21530:	15de2a15 	stw	r23,30888(r2)
   21534:	003f1206 	br	21180 <_malloc_r+0x368>
   21538:	b821883a 	mov	r16,r23
   2153c:	003f3906 	br	21224 <_malloc_r+0x40c>
   21540:	00800044 	movi	r2,1
   21544:	b8800115 	stw	r2,4(r23)
   21548:	003fae06 	br	21404 <_malloc_r+0x5ec>
   2154c:	19005568 	cmpgeui	r4,r3,341
   21550:	2000191e 	bne	r4,zero,215b8 <_malloc_r+0x7a0>
   21554:	1006d3fa 	srli	r3,r2,15
   21558:	19401e04 	addi	r5,r3,120
   2155c:	280a90fa 	slli	r5,r5,3
   21560:	19001dc4 	addi	r4,r3,119
   21564:	003f4e06 	br	212a0 <_malloc_r+0x488>
   21568:	10815568 	cmpgeui	r2,r2,1365
   2156c:	1000191e 	bne	r2,zero,215d4 <_malloc_r+0x7bc>
   21570:	8804d4ba 	srli	r2,r17,18
   21574:	11c01f44 	addi	r7,r2,125
   21578:	380890fa 	slli	r4,r7,3
   2157c:	12001f04 	addi	r8,r2,124
   21580:	003e5e06 	br	20efc <_malloc_r+0xe4>
   21584:	e73ffe04 	addi	fp,fp,-8
   21588:	af2b883a 	add	r21,r21,fp
   2158c:	adebc83a 	sub	r21,r21,r23
   21590:	0029883a 	mov	r20,zero
   21594:	003f0a06 	br	211c0 <_malloc_r+0x3a8>
   21598:	81400204 	addi	r5,r16,8
   2159c:	9009883a 	mov	r4,r18
   215a0:	00228a00 	call	228a0 <_free_r>
   215a4:	9c000217 	ldw	r16,8(r19)
   215a8:	008000f4 	movhi	r2,3
   215ac:	1524e917 	ldw	r20,-27740(r2)
   215b0:	85400117 	ldw	r21,4(r16)
   215b4:	003f1b06 	br	21224 <_malloc_r+0x40c>
   215b8:	18c15568 	cmpgeui	r3,r3,1365
   215bc:	1800091e 	bne	r3,zero,215e4 <_malloc_r+0x7cc>
   215c0:	1006d4ba 	srli	r3,r2,18
   215c4:	19401f44 	addi	r5,r3,125
   215c8:	280a90fa 	slli	r5,r5,3
   215cc:	19001f04 	addi	r4,r3,124
   215d0:	003f3306 	br	212a0 <_malloc_r+0x488>
   215d4:	0100fe04 	movi	r4,1016
   215d8:	01c01fc4 	movi	r7,127
   215dc:	02001f84 	movi	r8,126
   215e0:	003e4606 	br	20efc <_malloc_r+0xe4>
   215e4:	0140fe04 	movi	r5,1016
   215e8:	01001f84 	movi	r4,126
   215ec:	003f2c06 	br	212a0 <_malloc_r+0x488>
   215f0:	98800117 	ldw	r2,4(r19)
   215f4:	003f9506 	br	2144c <_malloc_r+0x634>

000215f8 <memchr>:
   215f8:	208000cc 	andi	r2,r4,3
   215fc:	280f883a 	mov	r7,r5
   21600:	10000e26 	beq	r2,zero,2163c <memchr+0x44>
   21604:	30bfffc4 	addi	r2,r6,-1
   21608:	30001726 	beq	r6,zero,21668 <memchr+0x70>
   2160c:	29803fcc 	andi	r6,r5,255
   21610:	00000606 	br	2162c <memchr+0x34>
   21614:	21000044 	addi	r4,r4,1
   21618:	20c000cc 	andi	r3,r4,3
   2161c:	18000826 	beq	r3,zero,21640 <memchr+0x48>
   21620:	10bfffc4 	addi	r2,r2,-1
   21624:	10ffffe0 	cmpeqi	r3,r2,-1
   21628:	18000f1e 	bne	r3,zero,21668 <memchr+0x70>
   2162c:	20c00003 	ldbu	r3,0(r4)
   21630:	19bff81e 	bne	r3,r6,21614 <memchr+0x1c>
   21634:	2005883a 	mov	r2,r4
   21638:	f800283a 	ret
   2163c:	3005883a 	mov	r2,r6
   21640:	10c00128 	cmpgeui	r3,r2,4
   21644:	18000a1e 	bne	r3,zero,21670 <memchr+0x78>
   21648:	10001e26 	beq	r2,zero,216c4 <memchr+0xcc>
   2164c:	2087883a 	add	r3,r4,r2
   21650:	39803fcc 	andi	r6,r7,255
   21654:	2005883a 	mov	r2,r4
   21658:	11000003 	ldbu	r4,0(r2)
   2165c:	21bff626 	beq	r4,r6,21638 <memchr+0x40>
   21660:	10800044 	addi	r2,r2,1
   21664:	18bffc1e 	bne	r3,r2,21658 <memchr+0x60>
   21668:	0005883a 	mov	r2,zero
   2166c:	f800283a 	ret
   21670:	29403fcc 	andi	r5,r5,255
   21674:	280c923a 	slli	r6,r5,8
   21678:	027fbff4 	movhi	r9,65279
   2167c:	02202074 	movhi	r8,32897
   21680:	314ab03a 	or	r5,r6,r5
   21684:	280c943a 	slli	r6,r5,16
   21688:	4a7fbfc4 	addi	r9,r9,-257
   2168c:	42202004 	addi	r8,r8,-32640
   21690:	314cb03a 	or	r6,r6,r5
   21694:	20c00017 	ldw	r3,0(r4)
   21698:	30c6f03a 	xor	r3,r6,r3
   2169c:	1a4b883a 	add	r5,r3,r9
   216a0:	00c6303a 	nor	r3,zero,r3
   216a4:	28c6703a 	and	r3,r5,r3
   216a8:	1a06703a 	and	r3,r3,r8
   216ac:	183fe71e 	bne	r3,zero,2164c <memchr+0x54>
   216b0:	10bfff04 	addi	r2,r2,-4
   216b4:	10c00128 	cmpgeui	r3,r2,4
   216b8:	21000104 	addi	r4,r4,4
   216bc:	183ff51e 	bne	r3,zero,21694 <memchr+0x9c>
   216c0:	003fe106 	br	21648 <memchr+0x50>
   216c4:	f800283a 	ret

000216c8 <memcpy>:
   216c8:	30c00430 	cmpltui	r3,r6,16
   216cc:	2005883a 	mov	r2,r4
   216d0:	18002d1e 	bne	r3,zero,21788 <memcpy+0xc0>
   216d4:	2906b03a 	or	r3,r5,r4
   216d8:	18c000cc 	andi	r3,r3,3
   216dc:	1800351e 	bne	r3,zero,217b4 <memcpy+0xec>
   216e0:	32fffc04 	addi	r11,r6,-16
   216e4:	5816d13a 	srli	r11,r11,4
   216e8:	280f883a 	mov	r7,r5
   216ec:	2007883a 	mov	r3,r4
   216f0:	5ac00044 	addi	r11,r11,1
   216f4:	5816913a 	slli	r11,r11,4
   216f8:	22d5883a 	add	r10,r4,r11
   216fc:	39000117 	ldw	r4,4(r7)
   21700:	3a400017 	ldw	r9,0(r7)
   21704:	3a000217 	ldw	r8,8(r7)
   21708:	19000115 	stw	r4,4(r3)
   2170c:	39000317 	ldw	r4,12(r7)
   21710:	1a400015 	stw	r9,0(r3)
   21714:	1a000215 	stw	r8,8(r3)
   21718:	19000315 	stw	r4,12(r3)
   2171c:	18c00404 	addi	r3,r3,16
   21720:	39c00404 	addi	r7,r7,16
   21724:	50fff51e 	bne	r10,r3,216fc <memcpy+0x34>
   21728:	3100030c 	andi	r4,r6,12
   2172c:	2acb883a 	add	r5,r5,r11
   21730:	320003cc 	andi	r8,r6,15
   21734:	20002226 	beq	r4,zero,217c0 <memcpy+0xf8>
   21738:	280f883a 	mov	r7,r5
   2173c:	1813883a 	mov	r9,r3
   21740:	39c00104 	addi	r7,r7,4
   21744:	3abfff17 	ldw	r10,-4(r7)
   21748:	41c9c83a 	sub	r4,r8,r7
   2174c:	2909883a 	add	r4,r5,r4
   21750:	4a800015 	stw	r10,0(r9)
   21754:	21000128 	cmpgeui	r4,r4,4
   21758:	4a400104 	addi	r9,r9,4
   2175c:	203ff81e 	bne	r4,zero,21740 <memcpy+0x78>
   21760:	413fff04 	addi	r4,r8,-4
   21764:	2008d0ba 	srli	r4,r4,2
   21768:	318000cc 	andi	r6,r6,3
   2176c:	31ffffc4 	addi	r7,r6,-1
   21770:	21000044 	addi	r4,r4,1
   21774:	200890ba 	slli	r4,r4,2
   21778:	1907883a 	add	r3,r3,r4
   2177c:	290b883a 	add	r5,r5,r4
   21780:	3000041e 	bne	r6,zero,21794 <memcpy+0xcc>
   21784:	f800283a 	ret
   21788:	2007883a 	mov	r3,r4
   2178c:	31ffffc4 	addi	r7,r6,-1
   21790:	303ffc26 	beq	r6,zero,21784 <memcpy+0xbc>
   21794:	39c00044 	addi	r7,r7,1
   21798:	19cf883a 	add	r7,r3,r7
   2179c:	29800003 	ldbu	r6,0(r5)
   217a0:	18c00044 	addi	r3,r3,1
   217a4:	29400044 	addi	r5,r5,1
   217a8:	19bfffc5 	stb	r6,-1(r3)
   217ac:	38fffb1e 	bne	r7,r3,2179c <memcpy+0xd4>
   217b0:	f800283a 	ret
   217b4:	31ffffc4 	addi	r7,r6,-1
   217b8:	2007883a 	mov	r3,r4
   217bc:	003ff506 	br	21794 <memcpy+0xcc>
   217c0:	400d883a 	mov	r6,r8
   217c4:	003ff106 	br	2178c <memcpy+0xc4>

000217c8 <memmove>:
   217c8:	2005883a 	mov	r2,r4
   217cc:	29000a2e 	bgeu	r5,r4,217f8 <memmove+0x30>
   217d0:	2989883a 	add	r4,r5,r6
   217d4:	1100082e 	bgeu	r2,r4,217f8 <memmove+0x30>
   217d8:	1187883a 	add	r3,r2,r6
   217dc:	30003e26 	beq	r6,zero,218d8 <memmove+0x110>
   217e0:	217fffc3 	ldbu	r5,-1(r4)
   217e4:	18ffffc4 	addi	r3,r3,-1
   217e8:	213fffc4 	addi	r4,r4,-1
   217ec:	19400005 	stb	r5,0(r3)
   217f0:	10fffb1e 	bne	r2,r3,217e0 <memmove+0x18>
   217f4:	f800283a 	ret
   217f8:	30c00430 	cmpltui	r3,r6,16
   217fc:	18000b26 	beq	r3,zero,2182c <memmove+0x64>
   21800:	1007883a 	mov	r3,r2
   21804:	31ffffc4 	addi	r7,r6,-1
   21808:	30003726 	beq	r6,zero,218e8 <memmove+0x120>
   2180c:	39c00044 	addi	r7,r7,1
   21810:	29cf883a 	add	r7,r5,r7
   21814:	29800003 	ldbu	r6,0(r5)
   21818:	29400044 	addi	r5,r5,1
   2181c:	18c00044 	addi	r3,r3,1
   21820:	19bfffc5 	stb	r6,-1(r3)
   21824:	29fffb1e 	bne	r5,r7,21814 <memmove+0x4c>
   21828:	f800283a 	ret
   2182c:	2886b03a 	or	r3,r5,r2
   21830:	18c000cc 	andi	r3,r3,3
   21834:	1800291e 	bne	r3,zero,218dc <memmove+0x114>
   21838:	327ffc04 	addi	r9,r6,-16
   2183c:	4812d13a 	srli	r9,r9,4
   21840:	280f883a 	mov	r7,r5
   21844:	1007883a 	mov	r3,r2
   21848:	4a400044 	addi	r9,r9,1
   2184c:	4812913a 	slli	r9,r9,4
   21850:	1251883a 	add	r8,r2,r9
   21854:	39000017 	ldw	r4,0(r7)
   21858:	39c00404 	addi	r7,r7,16
   2185c:	18c00404 	addi	r3,r3,16
   21860:	193ffc15 	stw	r4,-16(r3)
   21864:	393ffd17 	ldw	r4,-12(r7)
   21868:	193ffd15 	stw	r4,-12(r3)
   2186c:	393ffe17 	ldw	r4,-8(r7)
   21870:	193ffe15 	stw	r4,-8(r3)
   21874:	393fff17 	ldw	r4,-4(r7)
   21878:	193fff15 	stw	r4,-4(r3)
   2187c:	40fff51e 	bne	r8,r3,21854 <memmove+0x8c>
   21880:	3100030c 	andi	r4,r6,12
   21884:	2a4b883a 	add	r5,r5,r9
   21888:	320003cc 	andi	r8,r6,15
   2188c:	20001726 	beq	r4,zero,218ec <memmove+0x124>
   21890:	2813883a 	mov	r9,r5
   21894:	180f883a 	mov	r7,r3
   21898:	4a800017 	ldw	r10,0(r9)
   2189c:	39c00104 	addi	r7,r7,4
   218a0:	41c9c83a 	sub	r4,r8,r7
   218a4:	1909883a 	add	r4,r3,r4
   218a8:	21000128 	cmpgeui	r4,r4,4
   218ac:	3abfff15 	stw	r10,-4(r7)
   218b0:	4a400104 	addi	r9,r9,4
   218b4:	203ff81e 	bne	r4,zero,21898 <memmove+0xd0>
   218b8:	413fff04 	addi	r4,r8,-4
   218bc:	2008d0ba 	srli	r4,r4,2
   218c0:	318000cc 	andi	r6,r6,3
   218c4:	21000044 	addi	r4,r4,1
   218c8:	200890ba 	slli	r4,r4,2
   218cc:	1907883a 	add	r3,r3,r4
   218d0:	290b883a 	add	r5,r5,r4
   218d4:	003fcb06 	br	21804 <memmove+0x3c>
   218d8:	f800283a 	ret
   218dc:	31ffffc4 	addi	r7,r6,-1
   218e0:	1007883a 	mov	r3,r2
   218e4:	003fc906 	br	2180c <memmove+0x44>
   218e8:	f800283a 	ret
   218ec:	400d883a 	mov	r6,r8
   218f0:	003fc406 	br	21804 <memmove+0x3c>

000218f4 <memset>:
   218f4:	20c000cc 	andi	r3,r4,3
   218f8:	2005883a 	mov	r2,r4
   218fc:	18003626 	beq	r3,zero,219d8 <memset+0xe4>
   21900:	31ffffc4 	addi	r7,r6,-1
   21904:	30003326 	beq	r6,zero,219d4 <memset+0xe0>
   21908:	2811883a 	mov	r8,r5
   2190c:	2007883a 	mov	r3,r4
   21910:	00000306 	br	21920 <memset+0x2c>
   21914:	39ffffc4 	addi	r7,r7,-1
   21918:	39bfffe0 	cmpeqi	r6,r7,-1
   2191c:	30002d1e 	bne	r6,zero,219d4 <memset+0xe0>
   21920:	18c00044 	addi	r3,r3,1
   21924:	198000cc 	andi	r6,r3,3
   21928:	1a3fffc5 	stb	r8,-1(r3)
   2192c:	303ff91e 	bne	r6,zero,21914 <memset+0x20>
   21930:	39000130 	cmpltui	r4,r7,4
   21934:	2000221e 	bne	r4,zero,219c0 <memset+0xcc>
   21938:	29003fcc 	andi	r4,r5,255
   2193c:	200c923a 	slli	r6,r4,8
   21940:	3a000430 	cmpltui	r8,r7,16
   21944:	3108b03a 	or	r4,r6,r4
   21948:	200c943a 	slli	r6,r4,16
   2194c:	310cb03a 	or	r6,r6,r4
   21950:	40000e1e 	bne	r8,zero,2198c <memset+0x98>
   21954:	393ffc04 	addi	r4,r7,-16
   21958:	2008d13a 	srli	r4,r4,4
   2195c:	21000044 	addi	r4,r4,1
   21960:	2008913a 	slli	r4,r4,4
   21964:	1909883a 	add	r4,r3,r4
   21968:	19800015 	stw	r6,0(r3)
   2196c:	19800115 	stw	r6,4(r3)
   21970:	19800215 	stw	r6,8(r3)
   21974:	19800315 	stw	r6,12(r3)
   21978:	18c00404 	addi	r3,r3,16
   2197c:	20fffa1e 	bne	r4,r3,21968 <memset+0x74>
   21980:	3900030c 	andi	r4,r7,12
   21984:	39c003cc 	andi	r7,r7,15
   21988:	20000d26 	beq	r4,zero,219c0 <memset+0xcc>
   2198c:	1811883a 	mov	r8,r3
   21990:	42000104 	addi	r8,r8,4
   21994:	3a09c83a 	sub	r4,r7,r8
   21998:	1909883a 	add	r4,r3,r4
   2199c:	21000128 	cmpgeui	r4,r4,4
   219a0:	41bfff15 	stw	r6,-4(r8)
   219a4:	203ffa1e 	bne	r4,zero,21990 <memset+0x9c>
   219a8:	393fff04 	addi	r4,r7,-4
   219ac:	2008d0ba 	srli	r4,r4,2
   219b0:	39c000cc 	andi	r7,r7,3
   219b4:	21000044 	addi	r4,r4,1
   219b8:	200890ba 	slli	r4,r4,2
   219bc:	1907883a 	add	r3,r3,r4
   219c0:	38000426 	beq	r7,zero,219d4 <memset+0xe0>
   219c4:	19cf883a 	add	r7,r3,r7
   219c8:	18c00044 	addi	r3,r3,1
   219cc:	197fffc5 	stb	r5,-1(r3)
   219d0:	38fffd1e 	bne	r7,r3,219c8 <memset+0xd4>
   219d4:	f800283a 	ret
   219d8:	2007883a 	mov	r3,r4
   219dc:	300f883a 	mov	r7,r6
   219e0:	003fd306 	br	21930 <memset+0x3c>

000219e4 <_realloc_r>:
   219e4:	defff604 	addi	sp,sp,-40
   219e8:	dc800215 	stw	r18,8(sp)
   219ec:	dfc00915 	stw	ra,36(sp)
   219f0:	df000815 	stw	fp,32(sp)
   219f4:	ddc00715 	stw	r23,28(sp)
   219f8:	dd800615 	stw	r22,24(sp)
   219fc:	dd400515 	stw	r21,20(sp)
   21a00:	dd000415 	stw	r20,16(sp)
   21a04:	dcc00315 	stw	r19,12(sp)
   21a08:	dc400115 	stw	r17,4(sp)
   21a0c:	dc000015 	stw	r16,0(sp)
   21a10:	3025883a 	mov	r18,r6
   21a14:	28008b26 	beq	r5,zero,21c44 <_realloc_r+0x260>
   21a18:	2821883a 	mov	r16,r5
   21a1c:	2027883a 	mov	r19,r4
   21a20:	944002c4 	addi	r17,r18,11
   21a24:	00236ec0 	call	236ec <__malloc_lock>
   21a28:	888005f0 	cmpltui	r2,r17,23
   21a2c:	1000521e 	bne	r2,zero,21b78 <_realloc_r+0x194>
   21a30:	017ffe04 	movi	r5,-8
   21a34:	8962703a 	and	r17,r17,r5
   21a38:	8807883a 	mov	r3,r17
   21a3c:	88005116 	blt	r17,zero,21b84 <_realloc_r+0x1a0>
   21a40:	8c805036 	bltu	r17,r18,21b84 <_realloc_r+0x1a0>
   21a44:	80bfff17 	ldw	r2,-4(r16)
   21a48:	017fff04 	movi	r5,-4
   21a4c:	857ffe04 	addi	r21,r16,-8
   21a50:	1168703a 	and	r20,r2,r5
   21a54:	a0c0390e 	bge	r20,r3,21b3c <_realloc_r+0x158>
   21a58:	05c000b4 	movhi	r23,2
   21a5c:	bdd89804 	addi	r23,r23,25184
   21a60:	ba000217 	ldw	r8,8(r23)
   21a64:	ad0f883a 	add	r7,r21,r20
   21a68:	39000117 	ldw	r4,4(r7)
   21a6c:	41c08e26 	beq	r8,r7,21ca8 <_realloc_r+0x2c4>
   21a70:	01bfff84 	movi	r6,-2
   21a74:	218c703a 	and	r6,r4,r6
   21a78:	398d883a 	add	r6,r7,r6
   21a7c:	31800117 	ldw	r6,4(r6)
   21a80:	3180004c 	andi	r6,r6,1
   21a84:	30004f1e 	bne	r6,zero,21bc4 <_realloc_r+0x1e0>
   21a88:	2148703a 	and	r4,r4,r5
   21a8c:	a10b883a 	add	r5,r20,r4
   21a90:	28c0bb0e 	bge	r5,r3,21d80 <_realloc_r+0x39c>
   21a94:	1080004c 	andi	r2,r2,1
   21a98:	10004c1e 	bne	r2,zero,21bcc <_realloc_r+0x1e8>
   21a9c:	873ffe17 	ldw	fp,-8(r16)
   21aa0:	00bfff04 	movi	r2,-4
   21aa4:	af39c83a 	sub	fp,r21,fp
   21aa8:	e1400117 	ldw	r5,4(fp)
   21aac:	288a703a 	and	r5,r5,r2
   21ab0:	38000426 	beq	r7,zero,21ac4 <_realloc_r+0xe0>
   21ab4:	a16d883a 	add	r22,r20,r5
   21ab8:	b12d883a 	add	r22,r22,r4
   21abc:	41c0ba26 	beq	r8,r7,21da8 <_realloc_r+0x3c4>
   21ac0:	b0c0930e 	bge	r22,r3,21d10 <_realloc_r+0x32c>
   21ac4:	e0004126 	beq	fp,zero,21bcc <_realloc_r+0x1e8>
   21ac8:	a16d883a 	add	r22,r20,r5
   21acc:	b0c03f16 	blt	r22,r3,21bcc <_realloc_r+0x1e8>
   21ad0:	e0800317 	ldw	r2,12(fp)
   21ad4:	e0c00217 	ldw	r3,8(fp)
   21ad8:	a1bfff04 	addi	r6,r20,-4
   21adc:	31400968 	cmpgeui	r5,r6,37
   21ae0:	18800315 	stw	r2,12(r3)
   21ae4:	10c00215 	stw	r3,8(r2)
   21ae8:	e1000204 	addi	r4,fp,8
   21aec:	2800941e 	bne	r5,zero,21d40 <_realloc_r+0x35c>
   21af0:	30800530 	cmpltui	r2,r6,20
   21af4:	1000db1e 	bne	r2,zero,21e64 <_realloc_r+0x480>
   21af8:	80c00017 	ldw	r3,0(r16)
   21afc:	30800728 	cmpgeui	r2,r6,28
   21b00:	e0c00215 	stw	r3,8(fp)
   21b04:	80c00117 	ldw	r3,4(r16)
   21b08:	e0c00315 	stw	r3,12(fp)
   21b0c:	1000d71e 	bne	r2,zero,21e6c <_realloc_r+0x488>
   21b10:	84000204 	addi	r16,r16,8
   21b14:	e0800404 	addi	r2,fp,16
   21b18:	80c00017 	ldw	r3,0(r16)
   21b1c:	b029883a 	mov	r20,r22
   21b20:	e02b883a 	mov	r21,fp
   21b24:	10c00015 	stw	r3,0(r2)
   21b28:	80c00117 	ldw	r3,4(r16)
   21b2c:	10c00115 	stw	r3,4(r2)
   21b30:	80c00217 	ldw	r3,8(r16)
   21b34:	2021883a 	mov	r16,r4
   21b38:	10c00215 	stw	r3,8(r2)
   21b3c:	a9800117 	ldw	r6,4(r21)
   21b40:	a447c83a 	sub	r3,r20,r17
   21b44:	19000430 	cmpltui	r4,r3,16
   21b48:	3180004c 	andi	r6,r6,1
   21b4c:	ad05883a 	add	r2,r21,r20
   21b50:	20004926 	beq	r4,zero,21c78 <_realloc_r+0x294>
   21b54:	a18cb03a 	or	r6,r20,r6
   21b58:	a9800115 	stw	r6,4(r21)
   21b5c:	10c00117 	ldw	r3,4(r2)
   21b60:	18c00054 	ori	r3,r3,1
   21b64:	10c00115 	stw	r3,4(r2)
   21b68:	9809883a 	mov	r4,r19
   21b6c:	00237100 	call	23710 <__malloc_unlock>
   21b70:	8025883a 	mov	r18,r16
   21b74:	00000606 	br	21b90 <_realloc_r+0x1ac>
   21b78:	04400404 	movi	r17,16
   21b7c:	00c00404 	movi	r3,16
   21b80:	8cbfb02e 	bgeu	r17,r18,21a44 <_realloc_r+0x60>
   21b84:	00800304 	movi	r2,12
   21b88:	98800015 	stw	r2,0(r19)
   21b8c:	0025883a 	mov	r18,zero
   21b90:	9005883a 	mov	r2,r18
   21b94:	dfc00917 	ldw	ra,36(sp)
   21b98:	df000817 	ldw	fp,32(sp)
   21b9c:	ddc00717 	ldw	r23,28(sp)
   21ba0:	dd800617 	ldw	r22,24(sp)
   21ba4:	dd400517 	ldw	r21,20(sp)
   21ba8:	dd000417 	ldw	r20,16(sp)
   21bac:	dcc00317 	ldw	r19,12(sp)
   21bb0:	dc800217 	ldw	r18,8(sp)
   21bb4:	dc400117 	ldw	r17,4(sp)
   21bb8:	dc000017 	ldw	r16,0(sp)
   21bbc:	dec00a04 	addi	sp,sp,40
   21bc0:	f800283a 	ret
   21bc4:	1080004c 	andi	r2,r2,1
   21bc8:	10006826 	beq	r2,zero,21d6c <_realloc_r+0x388>
   21bcc:	900b883a 	mov	r5,r18
   21bd0:	9809883a 	mov	r4,r19
   21bd4:	0020e180 	call	20e18 <_malloc_r>
   21bd8:	1025883a 	mov	r18,r2
   21bdc:	10001626 	beq	r2,zero,21c38 <_realloc_r+0x254>
   21be0:	80bfff17 	ldw	r2,-4(r16)
   21be4:	013fff84 	movi	r4,-2
   21be8:	90fffe04 	addi	r3,r18,-8
   21bec:	1104703a 	and	r2,r2,r4
   21bf0:	a885883a 	add	r2,r21,r2
   21bf4:	10c05826 	beq	r2,r3,21d58 <_realloc_r+0x374>
   21bf8:	a1bfff04 	addi	r6,r20,-4
   21bfc:	30800968 	cmpgeui	r2,r6,37
   21c00:	1000651e 	bne	r2,zero,21d98 <_realloc_r+0x3b4>
   21c04:	30800530 	cmpltui	r2,r6,20
   21c08:	10003826 	beq	r2,zero,21cec <_realloc_r+0x308>
   21c0c:	9005883a 	mov	r2,r18
   21c10:	8007883a 	mov	r3,r16
   21c14:	19000017 	ldw	r4,0(r3)
   21c18:	11000015 	stw	r4,0(r2)
   21c1c:	19000117 	ldw	r4,4(r3)
   21c20:	11000115 	stw	r4,4(r2)
   21c24:	18c00217 	ldw	r3,8(r3)
   21c28:	10c00215 	stw	r3,8(r2)
   21c2c:	800b883a 	mov	r5,r16
   21c30:	9809883a 	mov	r4,r19
   21c34:	00228a00 	call	228a0 <_free_r>
   21c38:	9809883a 	mov	r4,r19
   21c3c:	00237100 	call	23710 <__malloc_unlock>
   21c40:	003fd306 	br	21b90 <_realloc_r+0x1ac>
   21c44:	300b883a 	mov	r5,r6
   21c48:	dfc00917 	ldw	ra,36(sp)
   21c4c:	df000817 	ldw	fp,32(sp)
   21c50:	ddc00717 	ldw	r23,28(sp)
   21c54:	dd800617 	ldw	r22,24(sp)
   21c58:	dd400517 	ldw	r21,20(sp)
   21c5c:	dd000417 	ldw	r20,16(sp)
   21c60:	dcc00317 	ldw	r19,12(sp)
   21c64:	dc800217 	ldw	r18,8(sp)
   21c68:	dc400117 	ldw	r17,4(sp)
   21c6c:	dc000017 	ldw	r16,0(sp)
   21c70:	dec00a04 	addi	sp,sp,40
   21c74:	0020e181 	jmpi	20e18 <_malloc_r>
   21c78:	344cb03a 	or	r6,r6,r17
   21c7c:	a9800115 	stw	r6,4(r21)
   21c80:	ac4b883a 	add	r5,r21,r17
   21c84:	18c00054 	ori	r3,r3,1
   21c88:	28c00115 	stw	r3,4(r5)
   21c8c:	10c00117 	ldw	r3,4(r2)
   21c90:	29400204 	addi	r5,r5,8
   21c94:	9809883a 	mov	r4,r19
   21c98:	18c00054 	ori	r3,r3,1
   21c9c:	10c00115 	stw	r3,4(r2)
   21ca0:	00228a00 	call	228a0 <_free_r>
   21ca4:	003fb006 	br	21b68 <_realloc_r+0x184>
   21ca8:	2148703a 	and	r4,r4,r5
   21cac:	a10b883a 	add	r5,r20,r4
   21cb0:	89800404 	addi	r6,r17,16
   21cb4:	29bf7716 	blt	r5,r6,21a94 <_realloc_r+0xb0>
   21cb8:	ac6b883a 	add	r21,r21,r17
   21cbc:	2c45c83a 	sub	r2,r5,r17
   21cc0:	bd400215 	stw	r21,8(r23)
   21cc4:	10800054 	ori	r2,r2,1
   21cc8:	a8800115 	stw	r2,4(r21)
   21ccc:	80bfff17 	ldw	r2,-4(r16)
   21cd0:	9809883a 	mov	r4,r19
   21cd4:	8025883a 	mov	r18,r16
   21cd8:	1080004c 	andi	r2,r2,1
   21cdc:	1462b03a 	or	r17,r2,r17
   21ce0:	847fff15 	stw	r17,-4(r16)
   21ce4:	00237100 	call	23710 <__malloc_unlock>
   21ce8:	003fa906 	br	21b90 <_realloc_r+0x1ac>
   21cec:	80c00017 	ldw	r3,0(r16)
   21cf0:	30800728 	cmpgeui	r2,r6,28
   21cf4:	90c00015 	stw	r3,0(r18)
   21cf8:	80c00117 	ldw	r3,4(r16)
   21cfc:	90c00115 	stw	r3,4(r18)
   21d00:	10004f1e 	bne	r2,zero,21e40 <_realloc_r+0x45c>
   21d04:	80c00204 	addi	r3,r16,8
   21d08:	90800204 	addi	r2,r18,8
   21d0c:	003fc106 	br	21c14 <_realloc_r+0x230>
   21d10:	38800317 	ldw	r2,12(r7)
   21d14:	38c00217 	ldw	r3,8(r7)
   21d18:	a1bfff04 	addi	r6,r20,-4
   21d1c:	31400968 	cmpgeui	r5,r6,37
   21d20:	18800315 	stw	r2,12(r3)
   21d24:	10c00215 	stw	r3,8(r2)
   21d28:	e0c00217 	ldw	r3,8(fp)
   21d2c:	e0800317 	ldw	r2,12(fp)
   21d30:	e1000204 	addi	r4,fp,8
   21d34:	18800315 	stw	r2,12(r3)
   21d38:	10c00215 	stw	r3,8(r2)
   21d3c:	283f6c26 	beq	r5,zero,21af0 <_realloc_r+0x10c>
   21d40:	800b883a 	mov	r5,r16
   21d44:	00217c80 	call	217c8 <memmove>
   21d48:	1021883a 	mov	r16,r2
   21d4c:	b029883a 	mov	r20,r22
   21d50:	e02b883a 	mov	r21,fp
   21d54:	003f7906 	br	21b3c <_realloc_r+0x158>
   21d58:	90bfff17 	ldw	r2,-4(r18)
   21d5c:	00ffff04 	movi	r3,-4
   21d60:	10c4703a 	and	r2,r2,r3
   21d64:	a0a9883a 	add	r20,r20,r2
   21d68:	003f7406 	br	21b3c <_realloc_r+0x158>
   21d6c:	873ffe17 	ldw	fp,-8(r16)
   21d70:	af39c83a 	sub	fp,r21,fp
   21d74:	e0800117 	ldw	r2,4(fp)
   21d78:	114a703a 	and	r5,r2,r5
   21d7c:	003f5106 	br	21ac4 <_realloc_r+0xe0>
   21d80:	38800317 	ldw	r2,12(r7)
   21d84:	38c00217 	ldw	r3,8(r7)
   21d88:	2829883a 	mov	r20,r5
   21d8c:	18800315 	stw	r2,12(r3)
   21d90:	10c00215 	stw	r3,8(r2)
   21d94:	003f6906 	br	21b3c <_realloc_r+0x158>
   21d98:	800b883a 	mov	r5,r16
   21d9c:	9009883a 	mov	r4,r18
   21da0:	00217c80 	call	217c8 <memmove>
   21da4:	003fa106 	br	21c2c <_realloc_r+0x248>
   21da8:	88800404 	addi	r2,r17,16
   21dac:	b0bf4516 	blt	r22,r2,21ac4 <_realloc_r+0xe0>
   21db0:	e0800317 	ldw	r2,12(fp)
   21db4:	e0c00217 	ldw	r3,8(fp)
   21db8:	a1bfff04 	addi	r6,r20,-4
   21dbc:	31000968 	cmpgeui	r4,r6,37
   21dc0:	18800315 	stw	r2,12(r3)
   21dc4:	10c00215 	stw	r3,8(r2)
   21dc8:	e4800204 	addi	r18,fp,8
   21dcc:	2000391e 	bne	r4,zero,21eb4 <_realloc_r+0x4d0>
   21dd0:	30800530 	cmpltui	r2,r6,20
   21dd4:	1000351e 	bne	r2,zero,21eac <_realloc_r+0x4c8>
   21dd8:	80c00017 	ldw	r3,0(r16)
   21ddc:	30800728 	cmpgeui	r2,r6,28
   21de0:	e0c00215 	stw	r3,8(fp)
   21de4:	80c00117 	ldw	r3,4(r16)
   21de8:	e0c00315 	stw	r3,12(fp)
   21dec:	10003c1e 	bne	r2,zero,21ee0 <_realloc_r+0x4fc>
   21df0:	84000204 	addi	r16,r16,8
   21df4:	e0800404 	addi	r2,fp,16
   21df8:	80c00017 	ldw	r3,0(r16)
   21dfc:	10c00015 	stw	r3,0(r2)
   21e00:	80c00117 	ldw	r3,4(r16)
   21e04:	10c00115 	stw	r3,4(r2)
   21e08:	80c00217 	ldw	r3,8(r16)
   21e0c:	10c00215 	stw	r3,8(r2)
   21e10:	e447883a 	add	r3,fp,r17
   21e14:	b445c83a 	sub	r2,r22,r17
   21e18:	b8c00215 	stw	r3,8(r23)
   21e1c:	10800054 	ori	r2,r2,1
   21e20:	18800115 	stw	r2,4(r3)
   21e24:	e0800117 	ldw	r2,4(fp)
   21e28:	9809883a 	mov	r4,r19
   21e2c:	1080004c 	andi	r2,r2,1
   21e30:	1462b03a 	or	r17,r2,r17
   21e34:	e4400115 	stw	r17,4(fp)
   21e38:	00237100 	call	23710 <__malloc_unlock>
   21e3c:	003f5406 	br	21b90 <_realloc_r+0x1ac>
   21e40:	80800217 	ldw	r2,8(r16)
   21e44:	31800920 	cmpeqi	r6,r6,36
   21e48:	90800215 	stw	r2,8(r18)
   21e4c:	80800317 	ldw	r2,12(r16)
   21e50:	90800315 	stw	r2,12(r18)
   21e54:	30000e1e 	bne	r6,zero,21e90 <_realloc_r+0x4ac>
   21e58:	80c00404 	addi	r3,r16,16
   21e5c:	90800404 	addi	r2,r18,16
   21e60:	003f6c06 	br	21c14 <_realloc_r+0x230>
   21e64:	2005883a 	mov	r2,r4
   21e68:	003f2b06 	br	21b18 <_realloc_r+0x134>
   21e6c:	80800217 	ldw	r2,8(r16)
   21e70:	31800920 	cmpeqi	r6,r6,36
   21e74:	e0800415 	stw	r2,16(fp)
   21e78:	80800317 	ldw	r2,12(r16)
   21e7c:	e0800515 	stw	r2,20(fp)
   21e80:	3000101e 	bne	r6,zero,21ec4 <_realloc_r+0x4e0>
   21e84:	84000404 	addi	r16,r16,16
   21e88:	e0800604 	addi	r2,fp,24
   21e8c:	003f2206 	br	21b18 <_realloc_r+0x134>
   21e90:	81000417 	ldw	r4,16(r16)
   21e94:	80c00604 	addi	r3,r16,24
   21e98:	90800604 	addi	r2,r18,24
   21e9c:	91000415 	stw	r4,16(r18)
   21ea0:	81000517 	ldw	r4,20(r16)
   21ea4:	91000515 	stw	r4,20(r18)
   21ea8:	003f5a06 	br	21c14 <_realloc_r+0x230>
   21eac:	9005883a 	mov	r2,r18
   21eb0:	003fd106 	br	21df8 <_realloc_r+0x414>
   21eb4:	800b883a 	mov	r5,r16
   21eb8:	9009883a 	mov	r4,r18
   21ebc:	00217c80 	call	217c8 <memmove>
   21ec0:	003fd306 	br	21e10 <_realloc_r+0x42c>
   21ec4:	80c00417 	ldw	r3,16(r16)
   21ec8:	84000604 	addi	r16,r16,24
   21ecc:	e0800804 	addi	r2,fp,32
   21ed0:	e0c00615 	stw	r3,24(fp)
   21ed4:	80ffff17 	ldw	r3,-4(r16)
   21ed8:	e0c00715 	stw	r3,28(fp)
   21edc:	003f0e06 	br	21b18 <_realloc_r+0x134>
   21ee0:	80800217 	ldw	r2,8(r16)
   21ee4:	31800920 	cmpeqi	r6,r6,36
   21ee8:	e0800415 	stw	r2,16(fp)
   21eec:	80800317 	ldw	r2,12(r16)
   21ef0:	e0800515 	stw	r2,20(fp)
   21ef4:	3000031e 	bne	r6,zero,21f04 <_realloc_r+0x520>
   21ef8:	84000404 	addi	r16,r16,16
   21efc:	e0800604 	addi	r2,fp,24
   21f00:	003fbd06 	br	21df8 <_realloc_r+0x414>
   21f04:	80c00417 	ldw	r3,16(r16)
   21f08:	84000604 	addi	r16,r16,24
   21f0c:	e0800804 	addi	r2,fp,32
   21f10:	e0c00615 	stw	r3,24(fp)
   21f14:	80ffff17 	ldw	r3,-4(r16)
   21f18:	e0c00715 	stw	r3,28(fp)
   21f1c:	003fb606 	br	21df8 <_realloc_r+0x414>

00021f20 <_sbrk_r>:
   21f20:	defffe04 	addi	sp,sp,-8
   21f24:	dc000015 	stw	r16,0(sp)
   21f28:	008000f4 	movhi	r2,3
   21f2c:	2021883a 	mov	r16,r4
   21f30:	2809883a 	mov	r4,r5
   21f34:	dfc00115 	stw	ra,4(sp)
   21f38:	1024e015 	stw	zero,-27776(r2)
   21f3c:	00238e80 	call	238e8 <sbrk>
   21f40:	10ffffd8 	cmpnei	r3,r2,-1
   21f44:	18000426 	beq	r3,zero,21f58 <_sbrk_r+0x38>
   21f48:	dfc00117 	ldw	ra,4(sp)
   21f4c:	dc000017 	ldw	r16,0(sp)
   21f50:	dec00204 	addi	sp,sp,8
   21f54:	f800283a 	ret
   21f58:	00c000f4 	movhi	r3,3
   21f5c:	18e4e017 	ldw	r3,-27776(r3)
   21f60:	183ff926 	beq	r3,zero,21f48 <_sbrk_r+0x28>
   21f64:	80c00015 	stw	r3,0(r16)
   21f68:	dfc00117 	ldw	ra,4(sp)
   21f6c:	dc000017 	ldw	r16,0(sp)
   21f70:	dec00204 	addi	sp,sp,8
   21f74:	f800283a 	ret

00021f78 <__sread>:
   21f78:	defffe04 	addi	sp,sp,-8
   21f7c:	dc000015 	stw	r16,0(sp)
   21f80:	2821883a 	mov	r16,r5
   21f84:	2940038f 	ldh	r5,14(r5)
   21f88:	dfc00115 	stw	ra,4(sp)
   21f8c:	0022e480 	call	22e48 <_read_r>
   21f90:	10000716 	blt	r2,zero,21fb0 <__sread+0x38>
   21f94:	80c01417 	ldw	r3,80(r16)
   21f98:	1887883a 	add	r3,r3,r2
   21f9c:	80c01415 	stw	r3,80(r16)
   21fa0:	dfc00117 	ldw	ra,4(sp)
   21fa4:	dc000017 	ldw	r16,0(sp)
   21fa8:	dec00204 	addi	sp,sp,8
   21fac:	f800283a 	ret
   21fb0:	80c0030b 	ldhu	r3,12(r16)
   21fb4:	18fbffcc 	andi	r3,r3,61439
   21fb8:	80c0030d 	sth	r3,12(r16)
   21fbc:	dfc00117 	ldw	ra,4(sp)
   21fc0:	dc000017 	ldw	r16,0(sp)
   21fc4:	dec00204 	addi	sp,sp,8
   21fc8:	f800283a 	ret

00021fcc <__seofread>:
   21fcc:	0005883a 	mov	r2,zero
   21fd0:	f800283a 	ret

00021fd4 <__swrite>:
   21fd4:	2880030b 	ldhu	r2,12(r5)
   21fd8:	defffb04 	addi	sp,sp,-20
   21fdc:	dcc00315 	stw	r19,12(sp)
   21fe0:	dc800215 	stw	r18,8(sp)
   21fe4:	dc400115 	stw	r17,4(sp)
   21fe8:	dc000015 	stw	r16,0(sp)
   21fec:	dfc00415 	stw	ra,16(sp)
   21ff0:	10c0400c 	andi	r3,r2,256
   21ff4:	2821883a 	mov	r16,r5
   21ff8:	2023883a 	mov	r17,r4
   21ffc:	3025883a 	mov	r18,r6
   22000:	3827883a 	mov	r19,r7
   22004:	18000d1e 	bne	r3,zero,2203c <__swrite+0x68>
   22008:	8140038f 	ldh	r5,14(r16)
   2200c:	10bbffcc 	andi	r2,r2,61439
   22010:	980f883a 	mov	r7,r19
   22014:	900d883a 	mov	r6,r18
   22018:	8809883a 	mov	r4,r17
   2201c:	8080030d 	sth	r2,12(r16)
   22020:	dfc00417 	ldw	ra,16(sp)
   22024:	dcc00317 	ldw	r19,12(sp)
   22028:	dc800217 	ldw	r18,8(sp)
   2202c:	dc400117 	ldw	r17,4(sp)
   22030:	dc000017 	ldw	r16,0(sp)
   22034:	dec00504 	addi	sp,sp,20
   22038:	00220b81 	jmpi	220b8 <_write_r>
   2203c:	2940038f 	ldh	r5,14(r5)
   22040:	01c00084 	movi	r7,2
   22044:	000d883a 	mov	r6,zero
   22048:	0022b9c0 	call	22b9c <_lseek_r>
   2204c:	8080030b 	ldhu	r2,12(r16)
   22050:	003fed06 	br	22008 <__swrite+0x34>

00022054 <__sseek>:
   22054:	defffe04 	addi	sp,sp,-8
   22058:	dc000015 	stw	r16,0(sp)
   2205c:	2821883a 	mov	r16,r5
   22060:	2940038f 	ldh	r5,14(r5)
   22064:	dfc00115 	stw	ra,4(sp)
   22068:	0022b9c0 	call	22b9c <_lseek_r>
   2206c:	10ffffd8 	cmpnei	r3,r2,-1
   22070:	18000826 	beq	r3,zero,22094 <__sseek+0x40>
   22074:	80c0030b 	ldhu	r3,12(r16)
   22078:	80801415 	stw	r2,80(r16)
   2207c:	18c40014 	ori	r3,r3,4096
   22080:	80c0030d 	sth	r3,12(r16)
   22084:	dfc00117 	ldw	ra,4(sp)
   22088:	dc000017 	ldw	r16,0(sp)
   2208c:	dec00204 	addi	sp,sp,8
   22090:	f800283a 	ret
   22094:	80c0030b 	ldhu	r3,12(r16)
   22098:	18fbffcc 	andi	r3,r3,61439
   2209c:	80c0030d 	sth	r3,12(r16)
   220a0:	dfc00117 	ldw	ra,4(sp)
   220a4:	dc000017 	ldw	r16,0(sp)
   220a8:	dec00204 	addi	sp,sp,8
   220ac:	f800283a 	ret

000220b0 <__sclose>:
   220b0:	2940038f 	ldh	r5,14(r5)
   220b4:	00222801 	jmpi	22280 <_close_r>

000220b8 <_write_r>:
   220b8:	2807883a 	mov	r3,r5
   220bc:	defffe04 	addi	sp,sp,-8
   220c0:	dc000015 	stw	r16,0(sp)
   220c4:	300b883a 	mov	r5,r6
   220c8:	008000f4 	movhi	r2,3
   220cc:	380d883a 	mov	r6,r7
   220d0:	2021883a 	mov	r16,r4
   220d4:	1809883a 	mov	r4,r3
   220d8:	dfc00115 	stw	ra,4(sp)
   220dc:	1024e015 	stw	zero,-27776(r2)
   220e0:	00239dc0 	call	239dc <write>
   220e4:	10ffffd8 	cmpnei	r3,r2,-1
   220e8:	18000426 	beq	r3,zero,220fc <_write_r+0x44>
   220ec:	dfc00117 	ldw	ra,4(sp)
   220f0:	dc000017 	ldw	r16,0(sp)
   220f4:	dec00204 	addi	sp,sp,8
   220f8:	f800283a 	ret
   220fc:	00c000f4 	movhi	r3,3
   22100:	18e4e017 	ldw	r3,-27776(r3)
   22104:	183ff926 	beq	r3,zero,220ec <_write_r+0x34>
   22108:	80c00015 	stw	r3,0(r16)
   2210c:	dfc00117 	ldw	ra,4(sp)
   22110:	dc000017 	ldw	r16,0(sp)
   22114:	dec00204 	addi	sp,sp,8
   22118:	f800283a 	ret

0002211c <__swsetup_r>:
   2211c:	008000b4 	movhi	r2,2
   22120:	109e2917 	ldw	r2,30884(r2)
   22124:	defffd04 	addi	sp,sp,-12
   22128:	dc400115 	stw	r17,4(sp)
   2212c:	dc000015 	stw	r16,0(sp)
   22130:	dfc00215 	stw	ra,8(sp)
   22134:	2023883a 	mov	r17,r4
   22138:	2821883a 	mov	r16,r5
   2213c:	10000226 	beq	r2,zero,22148 <__swsetup_r+0x2c>
   22140:	10c00e17 	ldw	r3,56(r2)
   22144:	18001f26 	beq	r3,zero,221c4 <__swsetup_r+0xa8>
   22148:	8180030b 	ldhu	r6,12(r16)
   2214c:	30c0020c 	andi	r3,r6,8
   22150:	3005883a 	mov	r2,r6
   22154:	18002126 	beq	r3,zero,221dc <__swsetup_r+0xc0>
   22158:	80c00417 	ldw	r3,16(r16)
   2215c:	18002826 	beq	r3,zero,22200 <__swsetup_r+0xe4>
   22160:	1100004c 	andi	r4,r2,1
   22164:	20000b1e 	bne	r4,zero,22194 <__swsetup_r+0x78>
   22168:	1100008c 	andi	r4,r2,2
   2216c:	20002e1e 	bne	r4,zero,22228 <__swsetup_r+0x10c>
   22170:	81000517 	ldw	r4,20(r16)
   22174:	81000215 	stw	r4,8(r16)
   22178:	18000b26 	beq	r3,zero,221a8 <__swsetup_r+0x8c>
   2217c:	0005883a 	mov	r2,zero
   22180:	dfc00217 	ldw	ra,8(sp)
   22184:	dc400117 	ldw	r17,4(sp)
   22188:	dc000017 	ldw	r16,0(sp)
   2218c:	dec00304 	addi	sp,sp,12
   22190:	f800283a 	ret
   22194:	81000517 	ldw	r4,20(r16)
   22198:	80000215 	stw	zero,8(r16)
   2219c:	0109c83a 	sub	r4,zero,r4
   221a0:	81000615 	stw	r4,24(r16)
   221a4:	183ff51e 	bne	r3,zero,2217c <__swsetup_r+0x60>
   221a8:	10c0200c 	andi	r3,r2,128
   221ac:	0005883a 	mov	r2,zero
   221b0:	183ff326 	beq	r3,zero,22180 <__swsetup_r+0x64>
   221b4:	31801014 	ori	r6,r6,64
   221b8:	8180030d 	sth	r6,12(r16)
   221bc:	00bfffc4 	movi	r2,-1
   221c0:	003fef06 	br	22180 <__swsetup_r+0x64>
   221c4:	1009883a 	mov	r4,r2
   221c8:	00207fc0 	call	207fc <__sinit>
   221cc:	8180030b 	ldhu	r6,12(r16)
   221d0:	30c0020c 	andi	r3,r6,8
   221d4:	3005883a 	mov	r2,r6
   221d8:	183fdf1e 	bne	r3,zero,22158 <__swsetup_r+0x3c>
   221dc:	3080040c 	andi	r2,r6,16
   221e0:	10002126 	beq	r2,zero,22268 <__swsetup_r+0x14c>
   221e4:	3080010c 	andi	r2,r6,4
   221e8:	1000111e 	bne	r2,zero,22230 <__swsetup_r+0x114>
   221ec:	80c00417 	ldw	r3,16(r16)
   221f0:	30800214 	ori	r2,r6,8
   221f4:	8080030d 	sth	r2,12(r16)
   221f8:	100d883a 	mov	r6,r2
   221fc:	183fd81e 	bne	r3,zero,22160 <__swsetup_r+0x44>
   22200:	1100a00c 	andi	r4,r2,640
   22204:	21008020 	cmpeqi	r4,r4,512
   22208:	203fd51e 	bne	r4,zero,22160 <__swsetup_r+0x44>
   2220c:	800b883a 	mov	r5,r16
   22210:	8809883a 	mov	r4,r17
   22214:	0022c000 	call	22c00 <__smakebuf_r>
   22218:	8180030b 	ldhu	r6,12(r16)
   2221c:	80c00417 	ldw	r3,16(r16)
   22220:	3005883a 	mov	r2,r6
   22224:	003fce06 	br	22160 <__swsetup_r+0x44>
   22228:	0009883a 	mov	r4,zero
   2222c:	003fd106 	br	22174 <__swsetup_r+0x58>
   22230:	81400c17 	ldw	r5,48(r16)
   22234:	28000626 	beq	r5,zero,22250 <__swsetup_r+0x134>
   22238:	80801004 	addi	r2,r16,64
   2223c:	28800326 	beq	r5,r2,2224c <__swsetup_r+0x130>
   22240:	8809883a 	mov	r4,r17
   22244:	00228a00 	call	228a0 <_free_r>
   22248:	8180030b 	ldhu	r6,12(r16)
   2224c:	80000c15 	stw	zero,48(r16)
   22250:	80c00417 	ldw	r3,16(r16)
   22254:	00bff6c4 	movi	r2,-37
   22258:	118c703a 	and	r6,r2,r6
   2225c:	80000115 	stw	zero,4(r16)
   22260:	80c00015 	stw	r3,0(r16)
   22264:	003fe206 	br	221f0 <__swsetup_r+0xd4>
   22268:	00800244 	movi	r2,9
   2226c:	88800015 	stw	r2,0(r17)
   22270:	31801014 	ori	r6,r6,64
   22274:	8180030d 	sth	r6,12(r16)
   22278:	00bfffc4 	movi	r2,-1
   2227c:	003fc006 	br	22180 <__swsetup_r+0x64>

00022280 <_close_r>:
   22280:	defffe04 	addi	sp,sp,-8
   22284:	dc000015 	stw	r16,0(sp)
   22288:	008000f4 	movhi	r2,3
   2228c:	2021883a 	mov	r16,r4
   22290:	2809883a 	mov	r4,r5
   22294:	dfc00115 	stw	ra,4(sp)
   22298:	1024e015 	stw	zero,-27776(r2)
   2229c:	002317c0 	call	2317c <close>
   222a0:	10ffffd8 	cmpnei	r3,r2,-1
   222a4:	18000426 	beq	r3,zero,222b8 <_close_r+0x38>
   222a8:	dfc00117 	ldw	ra,4(sp)
   222ac:	dc000017 	ldw	r16,0(sp)
   222b0:	dec00204 	addi	sp,sp,8
   222b4:	f800283a 	ret
   222b8:	00c000f4 	movhi	r3,3
   222bc:	18e4e017 	ldw	r3,-27776(r3)
   222c0:	183ff926 	beq	r3,zero,222a8 <_close_r+0x28>
   222c4:	80c00015 	stw	r3,0(r16)
   222c8:	dfc00117 	ldw	ra,4(sp)
   222cc:	dc000017 	ldw	r16,0(sp)
   222d0:	dec00204 	addi	sp,sp,8
   222d4:	f800283a 	ret

000222d8 <_fclose_r.part.0>:
   222d8:	defffc04 	addi	sp,sp,-16
   222dc:	dc800215 	stw	r18,8(sp)
   222e0:	dc400115 	stw	r17,4(sp)
   222e4:	dc000015 	stw	r16,0(sp)
   222e8:	dfc00315 	stw	ra,12(sp)
   222ec:	2821883a 	mov	r16,r5
   222f0:	2023883a 	mov	r17,r4
   222f4:	00224780 	call	22478 <__sflush_r>
   222f8:	80c00b17 	ldw	r3,44(r16)
   222fc:	1025883a 	mov	r18,r2
   22300:	18000426 	beq	r3,zero,22314 <_fclose_r.part.0+0x3c>
   22304:	81400717 	ldw	r5,28(r16)
   22308:	8809883a 	mov	r4,r17
   2230c:	183ee83a 	callr	r3
   22310:	10001916 	blt	r2,zero,22378 <_fclose_r.part.0+0xa0>
   22314:	8080030b 	ldhu	r2,12(r16)
   22318:	1080200c 	andi	r2,r2,128
   2231c:	10001a1e 	bne	r2,zero,22388 <_fclose_r.part.0+0xb0>
   22320:	81400c17 	ldw	r5,48(r16)
   22324:	28000526 	beq	r5,zero,2233c <_fclose_r.part.0+0x64>
   22328:	80801004 	addi	r2,r16,64
   2232c:	28800226 	beq	r5,r2,22338 <_fclose_r.part.0+0x60>
   22330:	8809883a 	mov	r4,r17
   22334:	00228a00 	call	228a0 <_free_r>
   22338:	80000c15 	stw	zero,48(r16)
   2233c:	81401117 	ldw	r5,68(r16)
   22340:	28000326 	beq	r5,zero,22350 <_fclose_r.part.0+0x78>
   22344:	8809883a 	mov	r4,r17
   22348:	00228a00 	call	228a0 <_free_r>
   2234c:	80001115 	stw	zero,68(r16)
   22350:	002080c0 	call	2080c <__sfp_lock_acquire>
   22354:	8000030d 	sth	zero,12(r16)
   22358:	00208100 	call	20810 <__sfp_lock_release>
   2235c:	9005883a 	mov	r2,r18
   22360:	dfc00317 	ldw	ra,12(sp)
   22364:	dc800217 	ldw	r18,8(sp)
   22368:	dc400117 	ldw	r17,4(sp)
   2236c:	dc000017 	ldw	r16,0(sp)
   22370:	dec00404 	addi	sp,sp,16
   22374:	f800283a 	ret
   22378:	8080030b 	ldhu	r2,12(r16)
   2237c:	04bfffc4 	movi	r18,-1
   22380:	1080200c 	andi	r2,r2,128
   22384:	103fe626 	beq	r2,zero,22320 <_fclose_r.part.0+0x48>
   22388:	81400417 	ldw	r5,16(r16)
   2238c:	8809883a 	mov	r4,r17
   22390:	00228a00 	call	228a0 <_free_r>
   22394:	003fe206 	br	22320 <_fclose_r.part.0+0x48>

00022398 <_fclose_r>:
   22398:	28001926 	beq	r5,zero,22400 <_fclose_r+0x68>
   2239c:	defffd04 	addi	sp,sp,-12
   223a0:	dc000115 	stw	r16,4(sp)
   223a4:	dfc00215 	stw	ra,8(sp)
   223a8:	2021883a 	mov	r16,r4
   223ac:	20000226 	beq	r4,zero,223b8 <_fclose_r+0x20>
   223b0:	20800e17 	ldw	r2,56(r4)
   223b4:	10000c26 	beq	r2,zero,223e8 <_fclose_r+0x50>
   223b8:	2880030f 	ldh	r2,12(r5)
   223bc:	1000051e 	bne	r2,zero,223d4 <_fclose_r+0x3c>
   223c0:	0005883a 	mov	r2,zero
   223c4:	dfc00217 	ldw	ra,8(sp)
   223c8:	dc000117 	ldw	r16,4(sp)
   223cc:	dec00304 	addi	sp,sp,12
   223d0:	f800283a 	ret
   223d4:	8009883a 	mov	r4,r16
   223d8:	dfc00217 	ldw	ra,8(sp)
   223dc:	dc000117 	ldw	r16,4(sp)
   223e0:	dec00304 	addi	sp,sp,12
   223e4:	00222d81 	jmpi	222d8 <_fclose_r.part.0>
   223e8:	d9400015 	stw	r5,0(sp)
   223ec:	00207fc0 	call	207fc <__sinit>
   223f0:	d9400017 	ldw	r5,0(sp)
   223f4:	2880030f 	ldh	r2,12(r5)
   223f8:	103ff126 	beq	r2,zero,223c0 <_fclose_r+0x28>
   223fc:	003ff506 	br	223d4 <_fclose_r+0x3c>
   22400:	0005883a 	mov	r2,zero
   22404:	f800283a 	ret

00022408 <fclose>:
   22408:	20000826 	beq	r4,zero,2242c <fclose+0x24>
   2240c:	008000b4 	movhi	r2,2
   22410:	200b883a 	mov	r5,r4
   22414:	111e2917 	ldw	r4,30884(r2)
   22418:	20000226 	beq	r4,zero,22424 <fclose+0x1c>
   2241c:	20800e17 	ldw	r2,56(r4)
   22420:	10000526 	beq	r2,zero,22438 <fclose+0x30>
   22424:	2880030f 	ldh	r2,12(r5)
   22428:	1000021e 	bne	r2,zero,22434 <fclose+0x2c>
   2242c:	0005883a 	mov	r2,zero
   22430:	f800283a 	ret
   22434:	00222d81 	jmpi	222d8 <_fclose_r.part.0>
   22438:	defffd04 	addi	sp,sp,-12
   2243c:	d9400115 	stw	r5,4(sp)
   22440:	d9000015 	stw	r4,0(sp)
   22444:	dfc00215 	stw	ra,8(sp)
   22448:	00207fc0 	call	207fc <__sinit>
   2244c:	d9400117 	ldw	r5,4(sp)
   22450:	d9000017 	ldw	r4,0(sp)
   22454:	2880030f 	ldh	r2,12(r5)
   22458:	10000326 	beq	r2,zero,22468 <fclose+0x60>
   2245c:	dfc00217 	ldw	ra,8(sp)
   22460:	dec00304 	addi	sp,sp,12
   22464:	00222d81 	jmpi	222d8 <_fclose_r.part.0>
   22468:	0005883a 	mov	r2,zero
   2246c:	dfc00217 	ldw	ra,8(sp)
   22470:	dec00304 	addi	sp,sp,12
   22474:	f800283a 	ret

00022478 <__sflush_r>:
   22478:	2880030b 	ldhu	r2,12(r5)
   2247c:	defffb04 	addi	sp,sp,-20
   22480:	dcc00315 	stw	r19,12(sp)
   22484:	dc000015 	stw	r16,0(sp)
   22488:	dfc00415 	stw	ra,16(sp)
   2248c:	dc800215 	stw	r18,8(sp)
   22490:	dc400115 	stw	r17,4(sp)
   22494:	10c0020c 	andi	r3,r2,8
   22498:	2821883a 	mov	r16,r5
   2249c:	2027883a 	mov	r19,r4
   224a0:	18003f1e 	bne	r3,zero,225a0 <__sflush_r+0x128>
   224a4:	28c00117 	ldw	r3,4(r5)
   224a8:	10820014 	ori	r2,r2,2048
   224ac:	2880030d 	sth	r2,12(r5)
   224b0:	00c0550e 	bge	zero,r3,22608 <__sflush_r+0x190>
   224b4:	82000a17 	ldw	r8,40(r16)
   224b8:	40003126 	beq	r8,zero,22580 <__sflush_r+0x108>
   224bc:	9c400017 	ldw	r17,0(r19)
   224c0:	1104000c 	andi	r4,r2,4096
   224c4:	98000015 	stw	zero,0(r19)
   224c8:	1007883a 	mov	r3,r2
   224cc:	2000531e 	bne	r4,zero,2261c <__sflush_r+0x1a4>
   224d0:	81400717 	ldw	r5,28(r16)
   224d4:	01c00044 	movi	r7,1
   224d8:	000d883a 	mov	r6,zero
   224dc:	9809883a 	mov	r4,r19
   224e0:	403ee83a 	callr	r8
   224e4:	10ffffd8 	cmpnei	r3,r2,-1
   224e8:	18005826 	beq	r3,zero,2264c <__sflush_r+0x1d4>
   224ec:	80c0030b 	ldhu	r3,12(r16)
   224f0:	82000a17 	ldw	r8,40(r16)
   224f4:	18c0010c 	andi	r3,r3,4
   224f8:	18000626 	beq	r3,zero,22514 <__sflush_r+0x9c>
   224fc:	81000117 	ldw	r4,4(r16)
   22500:	80c00c17 	ldw	r3,48(r16)
   22504:	1105c83a 	sub	r2,r2,r4
   22508:	18000226 	beq	r3,zero,22514 <__sflush_r+0x9c>
   2250c:	80c00f17 	ldw	r3,60(r16)
   22510:	10c5c83a 	sub	r2,r2,r3
   22514:	81400717 	ldw	r5,28(r16)
   22518:	100d883a 	mov	r6,r2
   2251c:	000f883a 	mov	r7,zero
   22520:	9809883a 	mov	r4,r19
   22524:	403ee83a 	callr	r8
   22528:	10ffffd8 	cmpnei	r3,r2,-1
   2252c:	18003d1e 	bne	r3,zero,22624 <__sflush_r+0x1ac>
   22530:	99000017 	ldw	r4,0(r19)
   22534:	80c0030b 	ldhu	r3,12(r16)
   22538:	20004e26 	beq	r4,zero,22674 <__sflush_r+0x1fc>
   2253c:	21400760 	cmpeqi	r5,r4,29
   22540:	2800021e 	bne	r5,zero,2254c <__sflush_r+0xd4>
   22544:	210005a0 	cmpeqi	r4,r4,22
   22548:	20002c26 	beq	r4,zero,225fc <__sflush_r+0x184>
   2254c:	80800417 	ldw	r2,16(r16)
   22550:	18fdffcc 	andi	r3,r3,63487
   22554:	80c0030d 	sth	r3,12(r16)
   22558:	80000115 	stw	zero,4(r16)
   2255c:	80800015 	stw	r2,0(r16)
   22560:	81400c17 	ldw	r5,48(r16)
   22564:	9c400015 	stw	r17,0(r19)
   22568:	28000526 	beq	r5,zero,22580 <__sflush_r+0x108>
   2256c:	80801004 	addi	r2,r16,64
   22570:	28800226 	beq	r5,r2,2257c <__sflush_r+0x104>
   22574:	9809883a 	mov	r4,r19
   22578:	00228a00 	call	228a0 <_free_r>
   2257c:	80000c15 	stw	zero,48(r16)
   22580:	0005883a 	mov	r2,zero
   22584:	dfc00417 	ldw	ra,16(sp)
   22588:	dcc00317 	ldw	r19,12(sp)
   2258c:	dc800217 	ldw	r18,8(sp)
   22590:	dc400117 	ldw	r17,4(sp)
   22594:	dc000017 	ldw	r16,0(sp)
   22598:	dec00504 	addi	sp,sp,20
   2259c:	f800283a 	ret
   225a0:	2c800417 	ldw	r18,16(r5)
   225a4:	903ff626 	beq	r18,zero,22580 <__sflush_r+0x108>
   225a8:	2c400017 	ldw	r17,0(r5)
   225ac:	108000cc 	andi	r2,r2,3
   225b0:	2c800015 	stw	r18,0(r5)
   225b4:	8ca3c83a 	sub	r17,r17,r18
   225b8:	1000161e 	bne	r2,zero,22614 <__sflush_r+0x19c>
   225bc:	28800517 	ldw	r2,20(r5)
   225c0:	80800215 	stw	r2,8(r16)
   225c4:	04400316 	blt	zero,r17,225d4 <__sflush_r+0x15c>
   225c8:	003fed06 	br	22580 <__sflush_r+0x108>
   225cc:	90a5883a 	add	r18,r18,r2
   225d0:	047feb0e 	bge	zero,r17,22580 <__sflush_r+0x108>
   225d4:	80800917 	ldw	r2,36(r16)
   225d8:	81400717 	ldw	r5,28(r16)
   225dc:	880f883a 	mov	r7,r17
   225e0:	900d883a 	mov	r6,r18
   225e4:	9809883a 	mov	r4,r19
   225e8:	103ee83a 	callr	r2
   225ec:	88a3c83a 	sub	r17,r17,r2
   225f0:	00bff616 	blt	zero,r2,225cc <__sflush_r+0x154>
   225f4:	80c0030b 	ldhu	r3,12(r16)
   225f8:	00bfffc4 	movi	r2,-1
   225fc:	18c01014 	ori	r3,r3,64
   22600:	80c0030d 	sth	r3,12(r16)
   22604:	003fdf06 	br	22584 <__sflush_r+0x10c>
   22608:	28c00f17 	ldw	r3,60(r5)
   2260c:	00ffa916 	blt	zero,r3,224b4 <__sflush_r+0x3c>
   22610:	003fdb06 	br	22580 <__sflush_r+0x108>
   22614:	0005883a 	mov	r2,zero
   22618:	003fe906 	br	225c0 <__sflush_r+0x148>
   2261c:	80801417 	ldw	r2,80(r16)
   22620:	003fb406 	br	224f4 <__sflush_r+0x7c>
   22624:	80c0030b 	ldhu	r3,12(r16)
   22628:	81000417 	ldw	r4,16(r16)
   2262c:	80000115 	stw	zero,4(r16)
   22630:	197dffcc 	andi	r5,r3,63487
   22634:	8140030d 	sth	r5,12(r16)
   22638:	81000015 	stw	r4,0(r16)
   2263c:	18c4000c 	andi	r3,r3,4096
   22640:	183fc726 	beq	r3,zero,22560 <__sflush_r+0xe8>
   22644:	80801415 	stw	r2,80(r16)
   22648:	003fc506 	br	22560 <__sflush_r+0xe8>
   2264c:	98c00017 	ldw	r3,0(r19)
   22650:	183fa626 	beq	r3,zero,224ec <__sflush_r+0x74>
   22654:	19000760 	cmpeqi	r4,r3,29
   22658:	20000e1e 	bne	r4,zero,22694 <__sflush_r+0x21c>
   2265c:	18c00598 	cmpnei	r3,r3,22
   22660:	18000c26 	beq	r3,zero,22694 <__sflush_r+0x21c>
   22664:	80c0030b 	ldhu	r3,12(r16)
   22668:	18c01014 	ori	r3,r3,64
   2266c:	80c0030d 	sth	r3,12(r16)
   22670:	003fc406 	br	22584 <__sflush_r+0x10c>
   22674:	81000417 	ldw	r4,16(r16)
   22678:	197dffcc 	andi	r5,r3,63487
   2267c:	8140030d 	sth	r5,12(r16)
   22680:	80000115 	stw	zero,4(r16)
   22684:	81000015 	stw	r4,0(r16)
   22688:	18c4000c 	andi	r3,r3,4096
   2268c:	183fb426 	beq	r3,zero,22560 <__sflush_r+0xe8>
   22690:	003fec06 	br	22644 <__sflush_r+0x1cc>
   22694:	9c400015 	stw	r17,0(r19)
   22698:	0005883a 	mov	r2,zero
   2269c:	003fb906 	br	22584 <__sflush_r+0x10c>

000226a0 <_fflush_r>:
   226a0:	defffd04 	addi	sp,sp,-12
   226a4:	dc000115 	stw	r16,4(sp)
   226a8:	dfc00215 	stw	ra,8(sp)
   226ac:	2021883a 	mov	r16,r4
   226b0:	20000226 	beq	r4,zero,226bc <_fflush_r+0x1c>
   226b4:	20800e17 	ldw	r2,56(r4)
   226b8:	10000726 	beq	r2,zero,226d8 <_fflush_r+0x38>
   226bc:	2880030f 	ldh	r2,12(r5)
   226c0:	10000a1e 	bne	r2,zero,226ec <_fflush_r+0x4c>
   226c4:	0005883a 	mov	r2,zero
   226c8:	dfc00217 	ldw	ra,8(sp)
   226cc:	dc000117 	ldw	r16,4(sp)
   226d0:	dec00304 	addi	sp,sp,12
   226d4:	f800283a 	ret
   226d8:	d9400015 	stw	r5,0(sp)
   226dc:	00207fc0 	call	207fc <__sinit>
   226e0:	d9400017 	ldw	r5,0(sp)
   226e4:	2880030f 	ldh	r2,12(r5)
   226e8:	103ff626 	beq	r2,zero,226c4 <_fflush_r+0x24>
   226ec:	8009883a 	mov	r4,r16
   226f0:	dfc00217 	ldw	ra,8(sp)
   226f4:	dc000117 	ldw	r16,4(sp)
   226f8:	dec00304 	addi	sp,sp,12
   226fc:	00224781 	jmpi	22478 <__sflush_r>

00022700 <fflush>:
   22700:	20001726 	beq	r4,zero,22760 <fflush+0x60>
   22704:	008000b4 	movhi	r2,2
   22708:	200b883a 	mov	r5,r4
   2270c:	111e2917 	ldw	r4,30884(r2)
   22710:	20000226 	beq	r4,zero,2271c <fflush+0x1c>
   22714:	20800e17 	ldw	r2,56(r4)
   22718:	10000526 	beq	r2,zero,22730 <fflush+0x30>
   2271c:	2880030f 	ldh	r2,12(r5)
   22720:	1000021e 	bne	r2,zero,2272c <fflush+0x2c>
   22724:	0005883a 	mov	r2,zero
   22728:	f800283a 	ret
   2272c:	00224781 	jmpi	22478 <__sflush_r>
   22730:	defffd04 	addi	sp,sp,-12
   22734:	d9400115 	stw	r5,4(sp)
   22738:	d9000015 	stw	r4,0(sp)
   2273c:	dfc00215 	stw	ra,8(sp)
   22740:	00207fc0 	call	207fc <__sinit>
   22744:	d9400117 	ldw	r5,4(sp)
   22748:	d9000017 	ldw	r4,0(sp)
   2274c:	2880030f 	ldh	r2,12(r5)
   22750:	10000826 	beq	r2,zero,22774 <fflush+0x74>
   22754:	dfc00217 	ldw	ra,8(sp)
   22758:	dec00304 	addi	sp,sp,12
   2275c:	00224781 	jmpi	22478 <__sflush_r>
   22760:	008000b4 	movhi	r2,2
   22764:	111e2817 	ldw	r4,30880(r2)
   22768:	014000b4 	movhi	r5,2
   2276c:	2949a804 	addi	r5,r5,9888
   22770:	0020d701 	jmpi	20d70 <_fwalk_reent>
   22774:	0005883a 	mov	r2,zero
   22778:	dfc00217 	ldw	ra,8(sp)
   2277c:	dec00304 	addi	sp,sp,12
   22780:	f800283a 	ret

00022784 <_malloc_trim_r>:
   22784:	defffb04 	addi	sp,sp,-20
   22788:	dcc00315 	stw	r19,12(sp)
   2278c:	04c000b4 	movhi	r19,2
   22790:	dc800215 	stw	r18,8(sp)
   22794:	dc400115 	stw	r17,4(sp)
   22798:	dc000015 	stw	r16,0(sp)
   2279c:	dfc00415 	stw	ra,16(sp)
   227a0:	2821883a 	mov	r16,r5
   227a4:	9cd89804 	addi	r19,r19,25184
   227a8:	2025883a 	mov	r18,r4
   227ac:	00236ec0 	call	236ec <__malloc_lock>
   227b0:	98800217 	ldw	r2,8(r19)
   227b4:	14400117 	ldw	r17,4(r2)
   227b8:	00bfff04 	movi	r2,-4
   227bc:	88a2703a 	and	r17,r17,r2
   227c0:	8c21c83a 	sub	r16,r17,r16
   227c4:	8403fbc4 	addi	r16,r16,4079
   227c8:	8020d33a 	srli	r16,r16,12
   227cc:	843fffc4 	addi	r16,r16,-1
   227d0:	8020933a 	slli	r16,r16,12
   227d4:	80840008 	cmpgei	r2,r16,4096
   227d8:	10000626 	beq	r2,zero,227f4 <_malloc_trim_r+0x70>
   227dc:	000b883a 	mov	r5,zero
   227e0:	9009883a 	mov	r4,r18
   227e4:	0021f200 	call	21f20 <_sbrk_r>
   227e8:	98c00217 	ldw	r3,8(r19)
   227ec:	1c47883a 	add	r3,r3,r17
   227f0:	10c00a26 	beq	r2,r3,2281c <_malloc_trim_r+0x98>
   227f4:	9009883a 	mov	r4,r18
   227f8:	00237100 	call	23710 <__malloc_unlock>
   227fc:	0005883a 	mov	r2,zero
   22800:	dfc00417 	ldw	ra,16(sp)
   22804:	dcc00317 	ldw	r19,12(sp)
   22808:	dc800217 	ldw	r18,8(sp)
   2280c:	dc400117 	ldw	r17,4(sp)
   22810:	dc000017 	ldw	r16,0(sp)
   22814:	dec00504 	addi	sp,sp,20
   22818:	f800283a 	ret
   2281c:	040bc83a 	sub	r5,zero,r16
   22820:	9009883a 	mov	r4,r18
   22824:	0021f200 	call	21f20 <_sbrk_r>
   22828:	10bfffd8 	cmpnei	r2,r2,-1
   2282c:	10000d26 	beq	r2,zero,22864 <_malloc_trim_r+0xe0>
   22830:	008000f4 	movhi	r2,3
   22834:	10a4e917 	ldw	r2,-27740(r2)
   22838:	98c00217 	ldw	r3,8(r19)
   2283c:	8c23c83a 	sub	r17,r17,r16
   22840:	8c400054 	ori	r17,r17,1
   22844:	1421c83a 	sub	r16,r2,r16
   22848:	1c400115 	stw	r17,4(r3)
   2284c:	008000f4 	movhi	r2,3
   22850:	9009883a 	mov	r4,r18
   22854:	1424e915 	stw	r16,-27740(r2)
   22858:	00237100 	call	23710 <__malloc_unlock>
   2285c:	00800044 	movi	r2,1
   22860:	003fe706 	br	22800 <_malloc_trim_r+0x7c>
   22864:	000b883a 	mov	r5,zero
   22868:	9009883a 	mov	r4,r18
   2286c:	0021f200 	call	21f20 <_sbrk_r>
   22870:	99000217 	ldw	r4,8(r19)
   22874:	1107c83a 	sub	r3,r2,r4
   22878:	19400410 	cmplti	r5,r3,16
   2287c:	283fdd1e 	bne	r5,zero,227f4 <_malloc_trim_r+0x70>
   22880:	014000b4 	movhi	r5,2
   22884:	295e2a17 	ldw	r5,30888(r5)
   22888:	18c00054 	ori	r3,r3,1
   2288c:	20c00115 	stw	r3,4(r4)
   22890:	1145c83a 	sub	r2,r2,r5
   22894:	014000f4 	movhi	r5,3
   22898:	28a4e915 	stw	r2,-27740(r5)
   2289c:	003fd506 	br	227f4 <_malloc_trim_r+0x70>

000228a0 <_free_r>:
   228a0:	28004f26 	beq	r5,zero,229e0 <_free_r+0x140>
   228a4:	defffd04 	addi	sp,sp,-12
   228a8:	dc400115 	stw	r17,4(sp)
   228ac:	dc000015 	stw	r16,0(sp)
   228b0:	2023883a 	mov	r17,r4
   228b4:	2821883a 	mov	r16,r5
   228b8:	dfc00215 	stw	ra,8(sp)
   228bc:	00236ec0 	call	236ec <__malloc_lock>
   228c0:	81ffff17 	ldw	r7,-4(r16)
   228c4:	00bfff84 	movi	r2,-2
   228c8:	80fffe04 	addi	r3,r16,-8
   228cc:	3884703a 	and	r2,r7,r2
   228d0:	010000b4 	movhi	r4,2
   228d4:	188d883a 	add	r6,r3,r2
   228d8:	21189804 	addi	r4,r4,25184
   228dc:	31400117 	ldw	r5,4(r6)
   228e0:	22000217 	ldw	r8,8(r4)
   228e4:	027fff04 	movi	r9,-4
   228e8:	2a4a703a 	and	r5,r5,r9
   228ec:	41806426 	beq	r8,r6,22a80 <_free_r+0x1e0>
   228f0:	31400115 	stw	r5,4(r6)
   228f4:	39c0004c 	andi	r7,r7,1
   228f8:	3151883a 	add	r8,r6,r5
   228fc:	3800281e 	bne	r7,zero,229a0 <_free_r+0x100>
   22900:	82bffe17 	ldw	r10,-8(r16)
   22904:	42000117 	ldw	r8,4(r8)
   22908:	01c000b4 	movhi	r7,2
   2290c:	1a87c83a 	sub	r3,r3,r10
   22910:	1a400217 	ldw	r9,8(r3)
   22914:	39d89a04 	addi	r7,r7,25192
   22918:	1285883a 	add	r2,r2,r10
   2291c:	4200004c 	andi	r8,r8,1
   22920:	49c04c26 	beq	r9,r7,22a54 <_free_r+0x1b4>
   22924:	1a800317 	ldw	r10,12(r3)
   22928:	4a800315 	stw	r10,12(r9)
   2292c:	52400215 	stw	r9,8(r10)
   22930:	40007126 	beq	r8,zero,22af8 <_free_r+0x258>
   22934:	11400054 	ori	r5,r2,1
   22938:	19400115 	stw	r5,4(r3)
   2293c:	30800015 	stw	r2,0(r6)
   22940:	11408028 	cmpgeui	r5,r2,512
   22944:	28002c1e 	bne	r5,zero,229f8 <_free_r+0x158>
   22948:	100ad0fa 	srli	r5,r2,3
   2294c:	100cd17a 	srli	r6,r2,5
   22950:	00800044 	movi	r2,1
   22954:	29400044 	addi	r5,r5,1
   22958:	280a90fa 	slli	r5,r5,3
   2295c:	21c00117 	ldw	r7,4(r4)
   22960:	1184983a 	sll	r2,r2,r6
   22964:	214b883a 	add	r5,r4,r5
   22968:	29800017 	ldw	r6,0(r5)
   2296c:	11c4b03a 	or	r2,r2,r7
   22970:	29fffe04 	addi	r7,r5,-8
   22974:	19c00315 	stw	r7,12(r3)
   22978:	19800215 	stw	r6,8(r3)
   2297c:	20800115 	stw	r2,4(r4)
   22980:	28c00015 	stw	r3,0(r5)
   22984:	30c00315 	stw	r3,12(r6)
   22988:	8809883a 	mov	r4,r17
   2298c:	dfc00217 	ldw	ra,8(sp)
   22990:	dc400117 	ldw	r17,4(sp)
   22994:	dc000017 	ldw	r16,0(sp)
   22998:	dec00304 	addi	sp,sp,12
   2299c:	00237101 	jmpi	23710 <__malloc_unlock>
   229a0:	41c00117 	ldw	r7,4(r8)
   229a4:	39c0004c 	andi	r7,r7,1
   229a8:	38000e1e 	bne	r7,zero,229e4 <_free_r+0x144>
   229ac:	01c000b4 	movhi	r7,2
   229b0:	1145883a 	add	r2,r2,r5
   229b4:	39d89a04 	addi	r7,r7,25192
   229b8:	31400217 	ldw	r5,8(r6)
   229bc:	12400054 	ori	r9,r2,1
   229c0:	1891883a 	add	r8,r3,r2
   229c4:	29c05226 	beq	r5,r7,22b10 <_free_r+0x270>
   229c8:	31800317 	ldw	r6,12(r6)
   229cc:	29800315 	stw	r6,12(r5)
   229d0:	31400215 	stw	r5,8(r6)
   229d4:	1a400115 	stw	r9,4(r3)
   229d8:	40800015 	stw	r2,0(r8)
   229dc:	003fd806 	br	22940 <_free_r+0xa0>
   229e0:	f800283a 	ret
   229e4:	11400054 	ori	r5,r2,1
   229e8:	817fff15 	stw	r5,-4(r16)
   229ec:	30800015 	stw	r2,0(r6)
   229f0:	11408028 	cmpgeui	r5,r2,512
   229f4:	283fd426 	beq	r5,zero,22948 <_free_r+0xa8>
   229f8:	100ad27a 	srli	r5,r2,9
   229fc:	29800168 	cmpgeui	r6,r5,5
   22a00:	3000341e 	bne	r6,zero,22ad4 <_free_r+0x234>
   22a04:	100ad1ba 	srli	r5,r2,6
   22a08:	29800e44 	addi	r6,r5,57
   22a0c:	300c90fa 	slli	r6,r6,3
   22a10:	29c00e04 	addi	r7,r5,56
   22a14:	218d883a 	add	r6,r4,r6
   22a18:	31400017 	ldw	r5,0(r6)
   22a1c:	31bffe04 	addi	r6,r6,-8
   22a20:	31404226 	beq	r6,r5,22b2c <_free_r+0x28c>
   22a24:	01ffff04 	movi	r7,-4
   22a28:	29000117 	ldw	r4,4(r5)
   22a2c:	21c8703a 	and	r4,r4,r7
   22a30:	1100022e 	bgeu	r2,r4,22a3c <_free_r+0x19c>
   22a34:	29400217 	ldw	r5,8(r5)
   22a38:	317ffb1e 	bne	r6,r5,22a28 <_free_r+0x188>
   22a3c:	29800317 	ldw	r6,12(r5)
   22a40:	19800315 	stw	r6,12(r3)
   22a44:	19400215 	stw	r5,8(r3)
   22a48:	30c00215 	stw	r3,8(r6)
   22a4c:	28c00315 	stw	r3,12(r5)
   22a50:	003fcd06 	br	22988 <_free_r+0xe8>
   22a54:	40004d1e 	bne	r8,zero,22b8c <_free_r+0x2ec>
   22a58:	31000317 	ldw	r4,12(r6)
   22a5c:	31800217 	ldw	r6,8(r6)
   22a60:	2885883a 	add	r2,r5,r2
   22a64:	11400054 	ori	r5,r2,1
   22a68:	31000315 	stw	r4,12(r6)
   22a6c:	21800215 	stw	r6,8(r4)
   22a70:	19400115 	stw	r5,4(r3)
   22a74:	1887883a 	add	r3,r3,r2
   22a78:	18800015 	stw	r2,0(r3)
   22a7c:	003fc206 	br	22988 <_free_r+0xe8>
   22a80:	39c0004c 	andi	r7,r7,1
   22a84:	1145883a 	add	r2,r2,r5
   22a88:	3800071e 	bne	r7,zero,22aa8 <_free_r+0x208>
   22a8c:	81fffe17 	ldw	r7,-8(r16)
   22a90:	19c7c83a 	sub	r3,r3,r7
   22a94:	19400317 	ldw	r5,12(r3)
   22a98:	19800217 	ldw	r6,8(r3)
   22a9c:	11c5883a 	add	r2,r2,r7
   22aa0:	31400315 	stw	r5,12(r6)
   22aa4:	29800215 	stw	r6,8(r5)
   22aa8:	014000b4 	movhi	r5,2
   22aac:	11800054 	ori	r6,r2,1
   22ab0:	295e2b17 	ldw	r5,30892(r5)
   22ab4:	19800115 	stw	r6,4(r3)
   22ab8:	20c00215 	stw	r3,8(r4)
   22abc:	117fb236 	bltu	r2,r5,22988 <_free_r+0xe8>
   22ac0:	008000f4 	movhi	r2,3
   22ac4:	1164df17 	ldw	r5,-27780(r2)
   22ac8:	8809883a 	mov	r4,r17
   22acc:	00227840 	call	22784 <_malloc_trim_r>
   22ad0:	003fad06 	br	22988 <_free_r+0xe8>
   22ad4:	29800568 	cmpgeui	r6,r5,21
   22ad8:	30000926 	beq	r6,zero,22b00 <_free_r+0x260>
   22adc:	29801568 	cmpgeui	r6,r5,85
   22ae0:	3000191e 	bne	r6,zero,22b48 <_free_r+0x2a8>
   22ae4:	100ad33a 	srli	r5,r2,12
   22ae8:	29801bc4 	addi	r6,r5,111
   22aec:	300c90fa 	slli	r6,r6,3
   22af0:	29c01b84 	addi	r7,r5,110
   22af4:	003fc706 	br	22a14 <_free_r+0x174>
   22af8:	1145883a 	add	r2,r2,r5
   22afc:	003fae06 	br	229b8 <_free_r+0x118>
   22b00:	29801704 	addi	r6,r5,92
   22b04:	300c90fa 	slli	r6,r6,3
   22b08:	29c016c4 	addi	r7,r5,91
   22b0c:	003fc106 	br	22a14 <_free_r+0x174>
   22b10:	20c00515 	stw	r3,20(r4)
   22b14:	20c00415 	stw	r3,16(r4)
   22b18:	19c00315 	stw	r7,12(r3)
   22b1c:	19c00215 	stw	r7,8(r3)
   22b20:	1a400115 	stw	r9,4(r3)
   22b24:	40800015 	stw	r2,0(r8)
   22b28:	003f9706 	br	22988 <_free_r+0xe8>
   22b2c:	380fd0ba 	srai	r7,r7,2
   22b30:	00800044 	movi	r2,1
   22b34:	22000117 	ldw	r8,4(r4)
   22b38:	11ce983a 	sll	r7,r2,r7
   22b3c:	3a0eb03a 	or	r7,r7,r8
   22b40:	21c00115 	stw	r7,4(r4)
   22b44:	003fbe06 	br	22a40 <_free_r+0x1a0>
   22b48:	29805568 	cmpgeui	r6,r5,341
   22b4c:	3000051e 	bne	r6,zero,22b64 <_free_r+0x2c4>
   22b50:	100ad3fa 	srli	r5,r2,15
   22b54:	29801e04 	addi	r6,r5,120
   22b58:	300c90fa 	slli	r6,r6,3
   22b5c:	29c01dc4 	addi	r7,r5,119
   22b60:	003fac06 	br	22a14 <_free_r+0x174>
   22b64:	29415568 	cmpgeui	r5,r5,1365
   22b68:	2800051e 	bne	r5,zero,22b80 <_free_r+0x2e0>
   22b6c:	100ad4ba 	srli	r5,r2,18
   22b70:	29801f44 	addi	r6,r5,125
   22b74:	300c90fa 	slli	r6,r6,3
   22b78:	29c01f04 	addi	r7,r5,124
   22b7c:	003fa506 	br	22a14 <_free_r+0x174>
   22b80:	0180fe04 	movi	r6,1016
   22b84:	01c01f84 	movi	r7,126
   22b88:	003fa206 	br	22a14 <_free_r+0x174>
   22b8c:	11000054 	ori	r4,r2,1
   22b90:	19000115 	stw	r4,4(r3)
   22b94:	30800015 	stw	r2,0(r6)
   22b98:	003f7b06 	br	22988 <_free_r+0xe8>

00022b9c <_lseek_r>:
   22b9c:	2807883a 	mov	r3,r5
   22ba0:	defffe04 	addi	sp,sp,-8
   22ba4:	dc000015 	stw	r16,0(sp)
   22ba8:	300b883a 	mov	r5,r6
   22bac:	008000f4 	movhi	r2,3
   22bb0:	380d883a 	mov	r6,r7
   22bb4:	2021883a 	mov	r16,r4
   22bb8:	1809883a 	mov	r4,r3
   22bbc:	dfc00115 	stw	ra,4(sp)
   22bc0:	1024e015 	stw	zero,-27776(r2)
   22bc4:	00235900 	call	23590 <lseek>
   22bc8:	10ffffd8 	cmpnei	r3,r2,-1
   22bcc:	18000426 	beq	r3,zero,22be0 <_lseek_r+0x44>
   22bd0:	dfc00117 	ldw	ra,4(sp)
   22bd4:	dc000017 	ldw	r16,0(sp)
   22bd8:	dec00204 	addi	sp,sp,8
   22bdc:	f800283a 	ret
   22be0:	00c000f4 	movhi	r3,3
   22be4:	18e4e017 	ldw	r3,-27776(r3)
   22be8:	183ff926 	beq	r3,zero,22bd0 <_lseek_r+0x34>
   22bec:	80c00015 	stw	r3,0(r16)
   22bf0:	dfc00117 	ldw	ra,4(sp)
   22bf4:	dc000017 	ldw	r16,0(sp)
   22bf8:	dec00204 	addi	sp,sp,8
   22bfc:	f800283a 	ret

00022c00 <__smakebuf_r>:
   22c00:	2880030b 	ldhu	r2,12(r5)
   22c04:	deffe804 	addi	sp,sp,-96
   22c08:	dc001215 	stw	r16,72(sp)
   22c0c:	dfc01715 	stw	ra,92(sp)
   22c10:	dd001615 	stw	r20,88(sp)
   22c14:	dcc01515 	stw	r19,84(sp)
   22c18:	dc801415 	stw	r18,80(sp)
   22c1c:	dc401315 	stw	r17,76(sp)
   22c20:	10c0008c 	andi	r3,r2,2
   22c24:	2821883a 	mov	r16,r5
   22c28:	18000d26 	beq	r3,zero,22c60 <__smakebuf_r+0x60>
   22c2c:	288010c4 	addi	r2,r5,67
   22c30:	28800015 	stw	r2,0(r5)
   22c34:	28800415 	stw	r2,16(r5)
   22c38:	00800044 	movi	r2,1
   22c3c:	28800515 	stw	r2,20(r5)
   22c40:	dfc01717 	ldw	ra,92(sp)
   22c44:	dd001617 	ldw	r20,88(sp)
   22c48:	dcc01517 	ldw	r19,84(sp)
   22c4c:	dc801417 	ldw	r18,80(sp)
   22c50:	dc401317 	ldw	r17,76(sp)
   22c54:	dc001217 	ldw	r16,72(sp)
   22c58:	dec01804 	addi	sp,sp,96
   22c5c:	f800283a 	ret
   22c60:	2940038f 	ldh	r5,14(r5)
   22c64:	2023883a 	mov	r17,r4
   22c68:	28002816 	blt	r5,zero,22d0c <__smakebuf_r+0x10c>
   22c6c:	d80d883a 	mov	r6,sp
   22c70:	0022eac0 	call	22eac <_fstat_r>
   22c74:	10002416 	blt	r2,zero,22d08 <__smakebuf_r+0x108>
   22c78:	d8800117 	ldw	r2,4(sp)
   22c7c:	10bc000c 	andi	r2,r2,61440
   22c80:	10880018 	cmpnei	r2,r2,8192
   22c84:	1000461e 	bne	r2,zero,22da0 <__smakebuf_r+0x1a0>
   22c88:	8140038f 	ldh	r5,14(r16)
   22c8c:	8809883a 	mov	r4,r17
   22c90:	0022f0c0 	call	22f0c <_isatty_r>
   22c94:	10003e26 	beq	r2,zero,22d90 <__smakebuf_r+0x190>
   22c98:	8080030b 	ldhu	r2,12(r16)
   22c9c:	80c010c4 	addi	r3,r16,67
   22ca0:	80c00015 	stw	r3,0(r16)
   22ca4:	10800054 	ori	r2,r2,1
   22ca8:	8080030d 	sth	r2,12(r16)
   22cac:	00800044 	movi	r2,1
   22cb0:	80c00415 	stw	r3,16(r16)
   22cb4:	80800515 	stw	r2,20(r16)
   22cb8:	04c00044 	movi	r19,1
   22cbc:	05010004 	movi	r20,1024
   22cc0:	04820004 	movi	r18,2048
   22cc4:	a00b883a 	mov	r5,r20
   22cc8:	8809883a 	mov	r4,r17
   22ccc:	0020e180 	call	20e18 <_malloc_r>
   22cd0:	10001726 	beq	r2,zero,22d30 <__smakebuf_r+0x130>
   22cd4:	80c0030b 	ldhu	r3,12(r16)
   22cd8:	010000b4 	movhi	r4,2
   22cdc:	21012804 	addi	r4,r4,1184
   22ce0:	89000f15 	stw	r4,60(r17)
   22ce4:	18c02014 	ori	r3,r3,128
   22ce8:	80c0030d 	sth	r3,12(r16)
   22cec:	80800015 	stw	r2,0(r16)
   22cf0:	80800415 	stw	r2,16(r16)
   22cf4:	85000515 	stw	r20,20(r16)
   22cf8:	98001d1e 	bne	r19,zero,22d70 <__smakebuf_r+0x170>
   22cfc:	90c6b03a 	or	r3,r18,r3
   22d00:	80c0030d 	sth	r3,12(r16)
   22d04:	003fce06 	br	22c40 <__smakebuf_r+0x40>
   22d08:	8080030b 	ldhu	r2,12(r16)
   22d0c:	1080200c 	andi	r2,r2,128
   22d10:	0027883a 	mov	r19,zero
   22d14:	10001326 	beq	r2,zero,22d64 <__smakebuf_r+0x164>
   22d18:	05001004 	movi	r20,64
   22d1c:	a00b883a 	mov	r5,r20
   22d20:	8809883a 	mov	r4,r17
   22d24:	0025883a 	mov	r18,zero
   22d28:	0020e180 	call	20e18 <_malloc_r>
   22d2c:	103fe91e 	bne	r2,zero,22cd4 <__smakebuf_r+0xd4>
   22d30:	8080030b 	ldhu	r2,12(r16)
   22d34:	10c0800c 	andi	r3,r2,512
   22d38:	183fc11e 	bne	r3,zero,22c40 <__smakebuf_r+0x40>
   22d3c:	00ffff04 	movi	r3,-4
   22d40:	10c4703a 	and	r2,r2,r3
   22d44:	10800094 	ori	r2,r2,2
   22d48:	80c010c4 	addi	r3,r16,67
   22d4c:	8080030d 	sth	r2,12(r16)
   22d50:	00800044 	movi	r2,1
   22d54:	80c00015 	stw	r3,0(r16)
   22d58:	80c00415 	stw	r3,16(r16)
   22d5c:	80800515 	stw	r2,20(r16)
   22d60:	003fb706 	br	22c40 <__smakebuf_r+0x40>
   22d64:	05010004 	movi	r20,1024
   22d68:	0025883a 	mov	r18,zero
   22d6c:	003fd506 	br	22cc4 <__smakebuf_r+0xc4>
   22d70:	8140038f 	ldh	r5,14(r16)
   22d74:	8809883a 	mov	r4,r17
   22d78:	0022f0c0 	call	22f0c <_isatty_r>
   22d7c:	80c0030b 	ldhu	r3,12(r16)
   22d80:	103fde26 	beq	r2,zero,22cfc <__smakebuf_r+0xfc>
   22d84:	18ffff0c 	andi	r3,r3,65532
   22d88:	18c00054 	ori	r3,r3,1
   22d8c:	003fdb06 	br	22cfc <__smakebuf_r+0xfc>
   22d90:	04c00044 	movi	r19,1
   22d94:	05010004 	movi	r20,1024
   22d98:	04820004 	movi	r18,2048
   22d9c:	003fc906 	br	22cc4 <__smakebuf_r+0xc4>
   22da0:	0027883a 	mov	r19,zero
   22da4:	05010004 	movi	r20,1024
   22da8:	04820004 	movi	r18,2048
   22dac:	003fc506 	br	22cc4 <__smakebuf_r+0xc4>

00022db0 <__swhatbuf_r>:
   22db0:	deffea04 	addi	sp,sp,-88
   22db4:	dc001215 	stw	r16,72(sp)
   22db8:	2821883a 	mov	r16,r5
   22dbc:	2940038f 	ldh	r5,14(r5)
   22dc0:	dc801415 	stw	r18,80(sp)
   22dc4:	dc401315 	stw	r17,76(sp)
   22dc8:	dfc01515 	stw	ra,84(sp)
   22dcc:	3023883a 	mov	r17,r6
   22dd0:	3825883a 	mov	r18,r7
   22dd4:	28001016 	blt	r5,zero,22e18 <__swhatbuf_r+0x68>
   22dd8:	d80d883a 	mov	r6,sp
   22ddc:	0022eac0 	call	22eac <_fstat_r>
   22de0:	10000d16 	blt	r2,zero,22e18 <__swhatbuf_r+0x68>
   22de4:	d8c00117 	ldw	r3,4(sp)
   22de8:	00820004 	movi	r2,2048
   22dec:	18fc000c 	andi	r3,r3,61440
   22df0:	18c80020 	cmpeqi	r3,r3,8192
   22df4:	90c00015 	stw	r3,0(r18)
   22df8:	00c10004 	movi	r3,1024
   22dfc:	88c00015 	stw	r3,0(r17)
   22e00:	dfc01517 	ldw	ra,84(sp)
   22e04:	dc801417 	ldw	r18,80(sp)
   22e08:	dc401317 	ldw	r17,76(sp)
   22e0c:	dc001217 	ldw	r16,72(sp)
   22e10:	dec01604 	addi	sp,sp,88
   22e14:	f800283a 	ret
   22e18:	8080030b 	ldhu	r2,12(r16)
   22e1c:	90000015 	stw	zero,0(r18)
   22e20:	1080200c 	andi	r2,r2,128
   22e24:	10000426 	beq	r2,zero,22e38 <__swhatbuf_r+0x88>
   22e28:	00801004 	movi	r2,64
   22e2c:	88800015 	stw	r2,0(r17)
   22e30:	0005883a 	mov	r2,zero
   22e34:	003ff206 	br	22e00 <__swhatbuf_r+0x50>
   22e38:	00810004 	movi	r2,1024
   22e3c:	88800015 	stw	r2,0(r17)
   22e40:	0005883a 	mov	r2,zero
   22e44:	003fee06 	br	22e00 <__swhatbuf_r+0x50>

00022e48 <_read_r>:
   22e48:	2807883a 	mov	r3,r5
   22e4c:	defffe04 	addi	sp,sp,-8
   22e50:	dc000015 	stw	r16,0(sp)
   22e54:	300b883a 	mov	r5,r6
   22e58:	008000f4 	movhi	r2,3
   22e5c:	380d883a 	mov	r6,r7
   22e60:	2021883a 	mov	r16,r4
   22e64:	1809883a 	mov	r4,r3
   22e68:	dfc00115 	stw	ra,4(sp)
   22e6c:	1024e015 	stw	zero,-27776(r2)
   22e70:	00237700 	call	23770 <read>
   22e74:	10ffffd8 	cmpnei	r3,r2,-1
   22e78:	18000426 	beq	r3,zero,22e8c <_read_r+0x44>
   22e7c:	dfc00117 	ldw	ra,4(sp)
   22e80:	dc000017 	ldw	r16,0(sp)
   22e84:	dec00204 	addi	sp,sp,8
   22e88:	f800283a 	ret
   22e8c:	00c000f4 	movhi	r3,3
   22e90:	18e4e017 	ldw	r3,-27776(r3)
   22e94:	183ff926 	beq	r3,zero,22e7c <_read_r+0x34>
   22e98:	80c00015 	stw	r3,0(r16)
   22e9c:	dfc00117 	ldw	ra,4(sp)
   22ea0:	dc000017 	ldw	r16,0(sp)
   22ea4:	dec00204 	addi	sp,sp,8
   22ea8:	f800283a 	ret

00022eac <_fstat_r>:
   22eac:	2807883a 	mov	r3,r5
   22eb0:	defffe04 	addi	sp,sp,-8
   22eb4:	dc000015 	stw	r16,0(sp)
   22eb8:	008000f4 	movhi	r2,3
   22ebc:	300b883a 	mov	r5,r6
   22ec0:	2021883a 	mov	r16,r4
   22ec4:	1809883a 	mov	r4,r3
   22ec8:	dfc00115 	stw	ra,4(sp)
   22ecc:	1024e015 	stw	zero,-27776(r2)
   22ed0:	00232c00 	call	232c0 <fstat>
   22ed4:	10ffffd8 	cmpnei	r3,r2,-1
   22ed8:	18000426 	beq	r3,zero,22eec <_fstat_r+0x40>
   22edc:	dfc00117 	ldw	ra,4(sp)
   22ee0:	dc000017 	ldw	r16,0(sp)
   22ee4:	dec00204 	addi	sp,sp,8
   22ee8:	f800283a 	ret
   22eec:	00c000f4 	movhi	r3,3
   22ef0:	18e4e017 	ldw	r3,-27776(r3)
   22ef4:	183ff926 	beq	r3,zero,22edc <_fstat_r+0x30>
   22ef8:	80c00015 	stw	r3,0(r16)
   22efc:	dfc00117 	ldw	ra,4(sp)
   22f00:	dc000017 	ldw	r16,0(sp)
   22f04:	dec00204 	addi	sp,sp,8
   22f08:	f800283a 	ret

00022f0c <_isatty_r>:
   22f0c:	defffe04 	addi	sp,sp,-8
   22f10:	dc000015 	stw	r16,0(sp)
   22f14:	008000f4 	movhi	r2,3
   22f18:	2021883a 	mov	r16,r4
   22f1c:	2809883a 	mov	r4,r5
   22f20:	dfc00115 	stw	ra,4(sp)
   22f24:	1024e015 	stw	zero,-27776(r2)
   22f28:	00233b80 	call	233b8 <isatty>
   22f2c:	10ffffd8 	cmpnei	r3,r2,-1
   22f30:	18000426 	beq	r3,zero,22f44 <_isatty_r+0x38>
   22f34:	dfc00117 	ldw	ra,4(sp)
   22f38:	dc000017 	ldw	r16,0(sp)
   22f3c:	dec00204 	addi	sp,sp,8
   22f40:	f800283a 	ret
   22f44:	00c000f4 	movhi	r3,3
   22f48:	18e4e017 	ldw	r3,-27776(r3)
   22f4c:	183ff926 	beq	r3,zero,22f34 <_isatty_r+0x28>
   22f50:	80c00015 	stw	r3,0(r16)
   22f54:	dfc00117 	ldw	ra,4(sp)
   22f58:	dc000017 	ldw	r16,0(sp)
   22f5c:	dec00204 	addi	sp,sp,8
   22f60:	f800283a 	ret

00022f64 <__divsi3>:
   22f64:	20001a16 	blt	r4,zero,22fd0 <__divsi3+0x6c>
   22f68:	000f883a 	mov	r7,zero
   22f6c:	2800020e 	bge	r5,zero,22f78 <__divsi3+0x14>
   22f70:	014bc83a 	sub	r5,zero,r5
   22f74:	39c0005c 	xori	r7,r7,1
   22f78:	200d883a 	mov	r6,r4
   22f7c:	00c00044 	movi	r3,1
   22f80:	2900092e 	bgeu	r5,r4,22fa8 <__divsi3+0x44>
   22f84:	00800804 	movi	r2,32
   22f88:	00c00044 	movi	r3,1
   22f8c:	00000106 	br	22f94 <__divsi3+0x30>
   22f90:	10001226 	beq	r2,zero,22fdc <__divsi3+0x78>
   22f94:	294b883a 	add	r5,r5,r5
   22f98:	10bfffc4 	addi	r2,r2,-1
   22f9c:	18c7883a 	add	r3,r3,r3
   22fa0:	293ffb36 	bltu	r5,r4,22f90 <__divsi3+0x2c>
   22fa4:	18000d26 	beq	r3,zero,22fdc <__divsi3+0x78>
   22fa8:	0005883a 	mov	r2,zero
   22fac:	31400236 	bltu	r6,r5,22fb8 <__divsi3+0x54>
   22fb0:	314dc83a 	sub	r6,r6,r5
   22fb4:	10c4b03a 	or	r2,r2,r3
   22fb8:	1806d07a 	srli	r3,r3,1
   22fbc:	280ad07a 	srli	r5,r5,1
   22fc0:	183ffa1e 	bne	r3,zero,22fac <__divsi3+0x48>
   22fc4:	38000126 	beq	r7,zero,22fcc <__divsi3+0x68>
   22fc8:	0085c83a 	sub	r2,zero,r2
   22fcc:	f800283a 	ret
   22fd0:	0109c83a 	sub	r4,zero,r4
   22fd4:	01c00044 	movi	r7,1
   22fd8:	003fe406 	br	22f6c <__divsi3+0x8>
   22fdc:	0005883a 	mov	r2,zero
   22fe0:	003ff806 	br	22fc4 <__divsi3+0x60>

00022fe4 <__modsi3>:
   22fe4:	20001916 	blt	r4,zero,2304c <__modsi3+0x68>
   22fe8:	000f883a 	mov	r7,zero
   22fec:	2005883a 	mov	r2,r4
   22ff0:	2800010e 	bge	r5,zero,22ff8 <__modsi3+0x14>
   22ff4:	014bc83a 	sub	r5,zero,r5
   22ff8:	00c00044 	movi	r3,1
   22ffc:	2900092e 	bgeu	r5,r4,23024 <__modsi3+0x40>
   23000:	01800804 	movi	r6,32
   23004:	00c00044 	movi	r3,1
   23008:	00000106 	br	23010 <__modsi3+0x2c>
   2300c:	30000d26 	beq	r6,zero,23044 <__modsi3+0x60>
   23010:	294b883a 	add	r5,r5,r5
   23014:	31bfffc4 	addi	r6,r6,-1
   23018:	18c7883a 	add	r3,r3,r3
   2301c:	293ffb36 	bltu	r5,r4,2300c <__modsi3+0x28>
   23020:	18000826 	beq	r3,zero,23044 <__modsi3+0x60>
   23024:	1806d07a 	srli	r3,r3,1
   23028:	11400136 	bltu	r2,r5,23030 <__modsi3+0x4c>
   2302c:	1145c83a 	sub	r2,r2,r5
   23030:	280ad07a 	srli	r5,r5,1
   23034:	183ffb1e 	bne	r3,zero,23024 <__modsi3+0x40>
   23038:	38000126 	beq	r7,zero,23040 <__modsi3+0x5c>
   2303c:	0085c83a 	sub	r2,zero,r2
   23040:	f800283a 	ret
   23044:	2005883a 	mov	r2,r4
   23048:	003ffb06 	br	23038 <__modsi3+0x54>
   2304c:	0109c83a 	sub	r4,zero,r4
   23050:	01c00044 	movi	r7,1
   23054:	003fe506 	br	22fec <__modsi3+0x8>

00023058 <__udivsi3>:
   23058:	200d883a 	mov	r6,r4
   2305c:	2900152e 	bgeu	r5,r4,230b4 <__udivsi3+0x5c>
   23060:	28001416 	blt	r5,zero,230b4 <__udivsi3+0x5c>
   23064:	00800804 	movi	r2,32
   23068:	00c00044 	movi	r3,1
   2306c:	00000206 	br	23078 <__udivsi3+0x20>
   23070:	10000e26 	beq	r2,zero,230ac <__udivsi3+0x54>
   23074:	28000516 	blt	r5,zero,2308c <__udivsi3+0x34>
   23078:	294b883a 	add	r5,r5,r5
   2307c:	10bfffc4 	addi	r2,r2,-1
   23080:	18c7883a 	add	r3,r3,r3
   23084:	293ffa36 	bltu	r5,r4,23070 <__udivsi3+0x18>
   23088:	18000826 	beq	r3,zero,230ac <__udivsi3+0x54>
   2308c:	0005883a 	mov	r2,zero
   23090:	31400236 	bltu	r6,r5,2309c <__udivsi3+0x44>
   23094:	314dc83a 	sub	r6,r6,r5
   23098:	10c4b03a 	or	r2,r2,r3
   2309c:	1806d07a 	srli	r3,r3,1
   230a0:	280ad07a 	srli	r5,r5,1
   230a4:	183ffa1e 	bne	r3,zero,23090 <__udivsi3+0x38>
   230a8:	f800283a 	ret
   230ac:	0005883a 	mov	r2,zero
   230b0:	f800283a 	ret
   230b4:	00c00044 	movi	r3,1
   230b8:	003ff406 	br	2308c <__udivsi3+0x34>

000230bc <__umodsi3>:
   230bc:	2005883a 	mov	r2,r4
   230c0:	2900132e 	bgeu	r5,r4,23110 <__umodsi3+0x54>
   230c4:	28001216 	blt	r5,zero,23110 <__umodsi3+0x54>
   230c8:	01800804 	movi	r6,32
   230cc:	00c00044 	movi	r3,1
   230d0:	00000206 	br	230dc <__umodsi3+0x20>
   230d4:	30000c26 	beq	r6,zero,23108 <__umodsi3+0x4c>
   230d8:	28000516 	blt	r5,zero,230f0 <__umodsi3+0x34>
   230dc:	294b883a 	add	r5,r5,r5
   230e0:	31bfffc4 	addi	r6,r6,-1
   230e4:	18c7883a 	add	r3,r3,r3
   230e8:	293ffa36 	bltu	r5,r4,230d4 <__umodsi3+0x18>
   230ec:	18000626 	beq	r3,zero,23108 <__umodsi3+0x4c>
   230f0:	1806d07a 	srli	r3,r3,1
   230f4:	11400136 	bltu	r2,r5,230fc <__umodsi3+0x40>
   230f8:	1145c83a 	sub	r2,r2,r5
   230fc:	280ad07a 	srli	r5,r5,1
   23100:	183ffb1e 	bne	r3,zero,230f0 <__umodsi3+0x34>
   23104:	f800283a 	ret
   23108:	2005883a 	mov	r2,r4
   2310c:	f800283a 	ret
   23110:	00c00044 	movi	r3,1
   23114:	003ff606 	br	230f0 <__umodsi3+0x34>

00023118 <__mulsi3>:
   23118:	0005883a 	mov	r2,zero
   2311c:	20000726 	beq	r4,zero,2313c <__mulsi3+0x24>
   23120:	20c0004c 	andi	r3,r4,1
   23124:	2008d07a 	srli	r4,r4,1
   23128:	18000126 	beq	r3,zero,23130 <__mulsi3+0x18>
   2312c:	1145883a 	add	r2,r2,r5
   23130:	294b883a 	add	r5,r5,r5
   23134:	203ffa1e 	bne	r4,zero,23120 <__mulsi3+0x8>
   23138:	f800283a 	ret
   2313c:	f800283a 	ret

00023140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23140:	defffe04 	addi	sp,sp,-8
   23144:	dfc00115 	stw	ra,4(sp)
   23148:	df000015 	stw	fp,0(sp)
   2314c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23150:	d0a00917 	ldw	r2,-32732(gp)
   23154:	10000326 	beq	r2,zero,23164 <alt_get_errno+0x24>
   23158:	d0a00917 	ldw	r2,-32732(gp)
   2315c:	103ee83a 	callr	r2
   23160:	00000106 	br	23168 <alt_get_errno+0x28>
   23164:	d0a6b804 	addi	r2,gp,-25888
}
   23168:	e037883a 	mov	sp,fp
   2316c:	dfc00117 	ldw	ra,4(sp)
   23170:	df000017 	ldw	fp,0(sp)
   23174:	dec00204 	addi	sp,sp,8
   23178:	f800283a 	ret

0002317c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2317c:	defffb04 	addi	sp,sp,-20
   23180:	dfc00415 	stw	ra,16(sp)
   23184:	df000315 	stw	fp,12(sp)
   23188:	df000304 	addi	fp,sp,12
   2318c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23190:	e0bffd17 	ldw	r2,-12(fp)
   23194:	10000916 	blt	r2,zero,231bc <close+0x40>
   23198:	e0fffd17 	ldw	r3,-12(fp)
   2319c:	1805883a 	mov	r2,r3
   231a0:	1085883a 	add	r2,r2,r2
   231a4:	10c5883a 	add	r2,r2,r3
   231a8:	100490ba 	slli	r2,r2,2
   231ac:	00c000b4 	movhi	r3,2
   231b0:	18d9a404 	addi	r3,r3,26256
   231b4:	10c5883a 	add	r2,r2,r3
   231b8:	00000106 	br	231c0 <close+0x44>
   231bc:	0005883a 	mov	r2,zero
   231c0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   231c4:	e0bfff17 	ldw	r2,-4(fp)
   231c8:	10001926 	beq	r2,zero,23230 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   231cc:	e0bfff17 	ldw	r2,-4(fp)
   231d0:	10800017 	ldw	r2,0(r2)
   231d4:	10800417 	ldw	r2,16(r2)
   231d8:	10000626 	beq	r2,zero,231f4 <close+0x78>
   231dc:	e0bfff17 	ldw	r2,-4(fp)
   231e0:	10800017 	ldw	r2,0(r2)
   231e4:	10800417 	ldw	r2,16(r2)
   231e8:	e13fff17 	ldw	r4,-4(fp)
   231ec:	103ee83a 	callr	r2
   231f0:	00000106 	br	231f8 <close+0x7c>
   231f4:	0005883a 	mov	r2,zero
   231f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   231fc:	e13ffd17 	ldw	r4,-12(fp)
   23200:	00238780 	call	23878 <alt_release_fd>
    if (rval < 0)
   23204:	e0bffe17 	ldw	r2,-8(fp)
   23208:	1000070e 	bge	r2,zero,23228 <close+0xac>
    {
      ALT_ERRNO = -rval;
   2320c:	00231400 	call	23140 <alt_get_errno>
   23210:	1007883a 	mov	r3,r2
   23214:	e0bffe17 	ldw	r2,-8(fp)
   23218:	0085c83a 	sub	r2,zero,r2
   2321c:	18800015 	stw	r2,0(r3)
      return -1;
   23220:	00bfffc4 	movi	r2,-1
   23224:	00000706 	br	23244 <close+0xc8>
    }
    return 0;
   23228:	0005883a 	mov	r2,zero
   2322c:	00000506 	br	23244 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23230:	00231400 	call	23140 <alt_get_errno>
   23234:	1007883a 	mov	r3,r2
   23238:	00801444 	movi	r2,81
   2323c:	18800015 	stw	r2,0(r3)
    return -1;
   23240:	00bfffc4 	movi	r2,-1
  }
}
   23244:	e037883a 	mov	sp,fp
   23248:	dfc00117 	ldw	ra,4(sp)
   2324c:	df000017 	ldw	fp,0(sp)
   23250:	dec00204 	addi	sp,sp,8
   23254:	f800283a 	ret

00023258 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23258:	defffc04 	addi	sp,sp,-16
   2325c:	df000315 	stw	fp,12(sp)
   23260:	df000304 	addi	fp,sp,12
   23264:	e13fff15 	stw	r4,-4(fp)
   23268:	e17ffe15 	stw	r5,-8(fp)
   2326c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   23270:	e0bffd17 	ldw	r2,-12(fp)
}
   23274:	e037883a 	mov	sp,fp
   23278:	df000017 	ldw	fp,0(sp)
   2327c:	dec00104 	addi	sp,sp,4
   23280:	f800283a 	ret

00023284 <alt_get_errno>:
{
   23284:	defffe04 	addi	sp,sp,-8
   23288:	dfc00115 	stw	ra,4(sp)
   2328c:	df000015 	stw	fp,0(sp)
   23290:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23294:	d0a00917 	ldw	r2,-32732(gp)
   23298:	10000326 	beq	r2,zero,232a8 <alt_get_errno+0x24>
   2329c:	d0a00917 	ldw	r2,-32732(gp)
   232a0:	103ee83a 	callr	r2
   232a4:	00000106 	br	232ac <alt_get_errno+0x28>
   232a8:	d0a6b804 	addi	r2,gp,-25888
}
   232ac:	e037883a 	mov	sp,fp
   232b0:	dfc00117 	ldw	ra,4(sp)
   232b4:	df000017 	ldw	fp,0(sp)
   232b8:	dec00204 	addi	sp,sp,8
   232bc:	f800283a 	ret

000232c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   232c0:	defffb04 	addi	sp,sp,-20
   232c4:	dfc00415 	stw	ra,16(sp)
   232c8:	df000315 	stw	fp,12(sp)
   232cc:	df000304 	addi	fp,sp,12
   232d0:	e13ffe15 	stw	r4,-8(fp)
   232d4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   232d8:	e0bffe17 	ldw	r2,-8(fp)
   232dc:	10000916 	blt	r2,zero,23304 <fstat+0x44>
   232e0:	e0fffe17 	ldw	r3,-8(fp)
   232e4:	1805883a 	mov	r2,r3
   232e8:	1085883a 	add	r2,r2,r2
   232ec:	10c5883a 	add	r2,r2,r3
   232f0:	100490ba 	slli	r2,r2,2
   232f4:	00c000b4 	movhi	r3,2
   232f8:	18d9a404 	addi	r3,r3,26256
   232fc:	10c5883a 	add	r2,r2,r3
   23300:	00000106 	br	23308 <fstat+0x48>
   23304:	0005883a 	mov	r2,zero
   23308:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2330c:	e0bfff17 	ldw	r2,-4(fp)
   23310:	10001026 	beq	r2,zero,23354 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23314:	e0bfff17 	ldw	r2,-4(fp)
   23318:	10800017 	ldw	r2,0(r2)
   2331c:	10800817 	ldw	r2,32(r2)
   23320:	10000726 	beq	r2,zero,23340 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   23324:	e0bfff17 	ldw	r2,-4(fp)
   23328:	10800017 	ldw	r2,0(r2)
   2332c:	10800817 	ldw	r2,32(r2)
   23330:	e17ffd17 	ldw	r5,-12(fp)
   23334:	e13fff17 	ldw	r4,-4(fp)
   23338:	103ee83a 	callr	r2
   2333c:	00000a06 	br	23368 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23340:	e0bffd17 	ldw	r2,-12(fp)
   23344:	00c80004 	movi	r3,8192
   23348:	10c00115 	stw	r3,4(r2)
      return 0;
   2334c:	0005883a 	mov	r2,zero
   23350:	00000506 	br	23368 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23354:	00232840 	call	23284 <alt_get_errno>
   23358:	1007883a 	mov	r3,r2
   2335c:	00801444 	movi	r2,81
   23360:	18800015 	stw	r2,0(r3)
    return -1;
   23364:	00bfffc4 	movi	r2,-1
  }
}
   23368:	e037883a 	mov	sp,fp
   2336c:	dfc00117 	ldw	ra,4(sp)
   23370:	df000017 	ldw	fp,0(sp)
   23374:	dec00204 	addi	sp,sp,8
   23378:	f800283a 	ret

0002337c <alt_get_errno>:
{
   2337c:	defffe04 	addi	sp,sp,-8
   23380:	dfc00115 	stw	ra,4(sp)
   23384:	df000015 	stw	fp,0(sp)
   23388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2338c:	d0a00917 	ldw	r2,-32732(gp)
   23390:	10000326 	beq	r2,zero,233a0 <alt_get_errno+0x24>
   23394:	d0a00917 	ldw	r2,-32732(gp)
   23398:	103ee83a 	callr	r2
   2339c:	00000106 	br	233a4 <alt_get_errno+0x28>
   233a0:	d0a6b804 	addi	r2,gp,-25888
}
   233a4:	e037883a 	mov	sp,fp
   233a8:	dfc00117 	ldw	ra,4(sp)
   233ac:	df000017 	ldw	fp,0(sp)
   233b0:	dec00204 	addi	sp,sp,8
   233b4:	f800283a 	ret

000233b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   233b8:	deffea04 	addi	sp,sp,-88
   233bc:	dfc01515 	stw	ra,84(sp)
   233c0:	df001415 	stw	fp,80(sp)
   233c4:	df001404 	addi	fp,sp,80
   233c8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   233cc:	e0bfec17 	ldw	r2,-80(fp)
   233d0:	10000916 	blt	r2,zero,233f8 <isatty+0x40>
   233d4:	e0ffec17 	ldw	r3,-80(fp)
   233d8:	1805883a 	mov	r2,r3
   233dc:	1085883a 	add	r2,r2,r2
   233e0:	10c5883a 	add	r2,r2,r3
   233e4:	100490ba 	slli	r2,r2,2
   233e8:	00c000b4 	movhi	r3,2
   233ec:	18d9a404 	addi	r3,r3,26256
   233f0:	10c5883a 	add	r2,r2,r3
   233f4:	00000106 	br	233fc <isatty+0x44>
   233f8:	0005883a 	mov	r2,zero
   233fc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23400:	e0bfff17 	ldw	r2,-4(fp)
   23404:	10000e26 	beq	r2,zero,23440 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23408:	e0bfff17 	ldw	r2,-4(fp)
   2340c:	10800017 	ldw	r2,0(r2)
   23410:	10800817 	ldw	r2,32(r2)
   23414:	1000021e 	bne	r2,zero,23420 <isatty+0x68>
    {
      return 1;
   23418:	00800044 	movi	r2,1
   2341c:	00000d06 	br	23454 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23420:	e0bfed04 	addi	r2,fp,-76
   23424:	100b883a 	mov	r5,r2
   23428:	e13fec17 	ldw	r4,-80(fp)
   2342c:	00232c00 	call	232c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23430:	e0bfee17 	ldw	r2,-72(fp)
   23434:	10880020 	cmpeqi	r2,r2,8192
   23438:	10803fcc 	andi	r2,r2,255
   2343c:	00000506 	br	23454 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23440:	002337c0 	call	2337c <alt_get_errno>
   23444:	1007883a 	mov	r3,r2
   23448:	00801444 	movi	r2,81
   2344c:	18800015 	stw	r2,0(r3)
    return 0;
   23450:	0005883a 	mov	r2,zero
  }
}
   23454:	e037883a 	mov	sp,fp
   23458:	dfc00117 	ldw	ra,4(sp)
   2345c:	df000017 	ldw	fp,0(sp)
   23460:	dec00204 	addi	sp,sp,8
   23464:	f800283a 	ret

00023468 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23468:	defffc04 	addi	sp,sp,-16
   2346c:	df000315 	stw	fp,12(sp)
   23470:	df000304 	addi	fp,sp,12
   23474:	e13fff15 	stw	r4,-4(fp)
   23478:	e17ffe15 	stw	r5,-8(fp)
   2347c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   23480:	e0fffe17 	ldw	r3,-8(fp)
   23484:	e0bfff17 	ldw	r2,-4(fp)
   23488:	18800c26 	beq	r3,r2,234bc <alt_load_section+0x54>
  {
    while( to != end )
   2348c:	00000806 	br	234b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23490:	e0ffff17 	ldw	r3,-4(fp)
   23494:	18800104 	addi	r2,r3,4
   23498:	e0bfff15 	stw	r2,-4(fp)
   2349c:	e0bffe17 	ldw	r2,-8(fp)
   234a0:	11000104 	addi	r4,r2,4
   234a4:	e13ffe15 	stw	r4,-8(fp)
   234a8:	18c00017 	ldw	r3,0(r3)
   234ac:	10c00015 	stw	r3,0(r2)
    while( to != end )
   234b0:	e0fffe17 	ldw	r3,-8(fp)
   234b4:	e0bffd17 	ldw	r2,-12(fp)
   234b8:	18bff51e 	bne	r3,r2,23490 <alt_load_section+0x28>
    }
  }
}
   234bc:	0001883a 	nop
   234c0:	e037883a 	mov	sp,fp
   234c4:	df000017 	ldw	fp,0(sp)
   234c8:	dec00104 	addi	sp,sp,4
   234cc:	f800283a 	ret

000234d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   234d0:	defffe04 	addi	sp,sp,-8
   234d4:	dfc00115 	stw	ra,4(sp)
   234d8:	df000015 	stw	fp,0(sp)
   234dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   234e0:	018000b4 	movhi	r6,2
   234e4:	319e3604 	addi	r6,r6,30936
   234e8:	014000b4 	movhi	r5,2
   234ec:	29578f04 	addi	r5,r5,24124
   234f0:	010000b4 	movhi	r4,2
   234f4:	211e3604 	addi	r4,r4,30936
   234f8:	00234680 	call	23468 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   234fc:	018000b4 	movhi	r6,2
   23500:	31808a04 	addi	r6,r6,552
   23504:	014000b4 	movhi	r5,2
   23508:	29400804 	addi	r5,r5,32
   2350c:	010000b4 	movhi	r4,2
   23510:	21000804 	addi	r4,r4,32
   23514:	00234680 	call	23468 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23518:	018000b4 	movhi	r6,2
   2351c:	31978f04 	addi	r6,r6,24124
   23520:	014000b4 	movhi	r5,2
   23524:	29576e04 	addi	r5,r5,23992
   23528:	010000b4 	movhi	r4,2
   2352c:	21176e04 	addi	r4,r4,23992
   23530:	00234680 	call	23468 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23534:	0024f000 	call	24f00 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23538:	002515c0 	call	2515c <alt_icache_flush_all>
}
   2353c:	0001883a 	nop
   23540:	e037883a 	mov	sp,fp
   23544:	dfc00117 	ldw	ra,4(sp)
   23548:	df000017 	ldw	fp,0(sp)
   2354c:	dec00204 	addi	sp,sp,8
   23550:	f800283a 	ret

00023554 <alt_get_errno>:
{
   23554:	defffe04 	addi	sp,sp,-8
   23558:	dfc00115 	stw	ra,4(sp)
   2355c:	df000015 	stw	fp,0(sp)
   23560:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23564:	d0a00917 	ldw	r2,-32732(gp)
   23568:	10000326 	beq	r2,zero,23578 <alt_get_errno+0x24>
   2356c:	d0a00917 	ldw	r2,-32732(gp)
   23570:	103ee83a 	callr	r2
   23574:	00000106 	br	2357c <alt_get_errno+0x28>
   23578:	d0a6b804 	addi	r2,gp,-25888
}
   2357c:	e037883a 	mov	sp,fp
   23580:	dfc00117 	ldw	ra,4(sp)
   23584:	df000017 	ldw	fp,0(sp)
   23588:	dec00204 	addi	sp,sp,8
   2358c:	f800283a 	ret

00023590 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23590:	defff904 	addi	sp,sp,-28
   23594:	dfc00615 	stw	ra,24(sp)
   23598:	df000515 	stw	fp,20(sp)
   2359c:	df000504 	addi	fp,sp,20
   235a0:	e13ffd15 	stw	r4,-12(fp)
   235a4:	e17ffc15 	stw	r5,-16(fp)
   235a8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   235ac:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   235b0:	e0bffd17 	ldw	r2,-12(fp)
   235b4:	10000916 	blt	r2,zero,235dc <lseek+0x4c>
   235b8:	e0fffd17 	ldw	r3,-12(fp)
   235bc:	1805883a 	mov	r2,r3
   235c0:	1085883a 	add	r2,r2,r2
   235c4:	10c5883a 	add	r2,r2,r3
   235c8:	100490ba 	slli	r2,r2,2
   235cc:	00c000b4 	movhi	r3,2
   235d0:	18d9a404 	addi	r3,r3,26256
   235d4:	10c5883a 	add	r2,r2,r3
   235d8:	00000106 	br	235e0 <lseek+0x50>
   235dc:	0005883a 	mov	r2,zero
   235e0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   235e4:	e0bffe17 	ldw	r2,-8(fp)
   235e8:	10001026 	beq	r2,zero,2362c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   235ec:	e0bffe17 	ldw	r2,-8(fp)
   235f0:	10800017 	ldw	r2,0(r2)
   235f4:	10800717 	ldw	r2,28(r2)
   235f8:	10000926 	beq	r2,zero,23620 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   235fc:	e0bffe17 	ldw	r2,-8(fp)
   23600:	10800017 	ldw	r2,0(r2)
   23604:	10800717 	ldw	r2,28(r2)
   23608:	e1bffb17 	ldw	r6,-20(fp)
   2360c:	e17ffc17 	ldw	r5,-16(fp)
   23610:	e13ffe17 	ldw	r4,-8(fp)
   23614:	103ee83a 	callr	r2
   23618:	e0bfff15 	stw	r2,-4(fp)
   2361c:	00000506 	br	23634 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23620:	00bfde84 	movi	r2,-134
   23624:	e0bfff15 	stw	r2,-4(fp)
   23628:	00000206 	br	23634 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   2362c:	00bfebc4 	movi	r2,-81
   23630:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   23634:	e0bfff17 	ldw	r2,-4(fp)
   23638:	1000070e 	bge	r2,zero,23658 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   2363c:	00235540 	call	23554 <alt_get_errno>
   23640:	1007883a 	mov	r3,r2
   23644:	e0bfff17 	ldw	r2,-4(fp)
   23648:	0085c83a 	sub	r2,zero,r2
   2364c:	18800015 	stw	r2,0(r3)
    rc = -1;
   23650:	00bfffc4 	movi	r2,-1
   23654:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   23658:	e0bfff17 	ldw	r2,-4(fp)
}
   2365c:	e037883a 	mov	sp,fp
   23660:	dfc00117 	ldw	ra,4(sp)
   23664:	df000017 	ldw	fp,0(sp)
   23668:	dec00204 	addi	sp,sp,8
   2366c:	f800283a 	ret

00023670 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23670:	defffd04 	addi	sp,sp,-12
   23674:	dfc00215 	stw	ra,8(sp)
   23678:	df000115 	stw	fp,4(sp)
   2367c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23680:	0009883a 	mov	r4,zero
   23684:	0023b140 	call	23b14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23688:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2368c:	0023b500 	call	23b50 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23690:	018000b4 	movhi	r6,2
   23694:	31978404 	addi	r6,r6,24080
   23698:	014000b4 	movhi	r5,2
   2369c:	29578404 	addi	r5,r5,24080
   236a0:	010000b4 	movhi	r4,2
   236a4:	21178404 	addi	r4,r4,24080
   236a8:	00252500 	call	25250 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   236ac:	00250040 	call	25004 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   236b0:	010000b4 	movhi	r4,2
   236b4:	21141a04 	addi	r4,r4,20584
   236b8:	0025b100 	call	25b10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   236bc:	d0a6b917 	ldw	r2,-25884(gp)
   236c0:	d0e6ba17 	ldw	r3,-25880(gp)
   236c4:	d126bb17 	ldw	r4,-25876(gp)
   236c8:	200d883a 	mov	r6,r4
   236cc:	180b883a 	mov	r5,r3
   236d0:	1009883a 	mov	r4,r2
   236d4:	00202640 	call	20264 <main>
   236d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   236dc:	01000044 	movi	r4,1
   236e0:	002317c0 	call	2317c <close>
  exit (result);
   236e4:	e13fff17 	ldw	r4,-4(fp)
   236e8:	0025b240 	call	25b24 <exit>

000236ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   236ec:	defffe04 	addi	sp,sp,-8
   236f0:	df000115 	stw	fp,4(sp)
   236f4:	df000104 	addi	fp,sp,4
   236f8:	e13fff15 	stw	r4,-4(fp)
}
   236fc:	0001883a 	nop
   23700:	e037883a 	mov	sp,fp
   23704:	df000017 	ldw	fp,0(sp)
   23708:	dec00104 	addi	sp,sp,4
   2370c:	f800283a 	ret

00023710 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23710:	defffe04 	addi	sp,sp,-8
   23714:	df000115 	stw	fp,4(sp)
   23718:	df000104 	addi	fp,sp,4
   2371c:	e13fff15 	stw	r4,-4(fp)
}
   23720:	0001883a 	nop
   23724:	e037883a 	mov	sp,fp
   23728:	df000017 	ldw	fp,0(sp)
   2372c:	dec00104 	addi	sp,sp,4
   23730:	f800283a 	ret

00023734 <alt_get_errno>:
{
   23734:	defffe04 	addi	sp,sp,-8
   23738:	dfc00115 	stw	ra,4(sp)
   2373c:	df000015 	stw	fp,0(sp)
   23740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23744:	d0a00917 	ldw	r2,-32732(gp)
   23748:	10000326 	beq	r2,zero,23758 <alt_get_errno+0x24>
   2374c:	d0a00917 	ldw	r2,-32732(gp)
   23750:	103ee83a 	callr	r2
   23754:	00000106 	br	2375c <alt_get_errno+0x28>
   23758:	d0a6b804 	addi	r2,gp,-25888
}
   2375c:	e037883a 	mov	sp,fp
   23760:	dfc00117 	ldw	ra,4(sp)
   23764:	df000017 	ldw	fp,0(sp)
   23768:	dec00204 	addi	sp,sp,8
   2376c:	f800283a 	ret

00023770 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23770:	defff904 	addi	sp,sp,-28
   23774:	dfc00615 	stw	ra,24(sp)
   23778:	df000515 	stw	fp,20(sp)
   2377c:	df000504 	addi	fp,sp,20
   23780:	e13ffd15 	stw	r4,-12(fp)
   23784:	e17ffc15 	stw	r5,-16(fp)
   23788:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2378c:	e0bffd17 	ldw	r2,-12(fp)
   23790:	10000916 	blt	r2,zero,237b8 <read+0x48>
   23794:	e0fffd17 	ldw	r3,-12(fp)
   23798:	1805883a 	mov	r2,r3
   2379c:	1085883a 	add	r2,r2,r2
   237a0:	10c5883a 	add	r2,r2,r3
   237a4:	100490ba 	slli	r2,r2,2
   237a8:	00c000b4 	movhi	r3,2
   237ac:	18d9a404 	addi	r3,r3,26256
   237b0:	10c5883a 	add	r2,r2,r3
   237b4:	00000106 	br	237bc <read+0x4c>
   237b8:	0005883a 	mov	r2,zero
   237bc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   237c0:	e0bfff17 	ldw	r2,-4(fp)
   237c4:	10002226 	beq	r2,zero,23850 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   237c8:	e0bfff17 	ldw	r2,-4(fp)
   237cc:	10800217 	ldw	r2,8(r2)
   237d0:	108000cc 	andi	r2,r2,3
   237d4:	10800060 	cmpeqi	r2,r2,1
   237d8:	1000181e 	bne	r2,zero,2383c <read+0xcc>
        (fd->dev->read))
   237dc:	e0bfff17 	ldw	r2,-4(fp)
   237e0:	10800017 	ldw	r2,0(r2)
   237e4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   237e8:	10001426 	beq	r2,zero,2383c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   237ec:	e0bfff17 	ldw	r2,-4(fp)
   237f0:	10800017 	ldw	r2,0(r2)
   237f4:	10800517 	ldw	r2,20(r2)
   237f8:	e0fffb17 	ldw	r3,-20(fp)
   237fc:	180d883a 	mov	r6,r3
   23800:	e17ffc17 	ldw	r5,-16(fp)
   23804:	e13fff17 	ldw	r4,-4(fp)
   23808:	103ee83a 	callr	r2
   2380c:	e0bffe15 	stw	r2,-8(fp)
   23810:	e0bffe17 	ldw	r2,-8(fp)
   23814:	1000070e 	bge	r2,zero,23834 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   23818:	00237340 	call	23734 <alt_get_errno>
   2381c:	1007883a 	mov	r3,r2
   23820:	e0bffe17 	ldw	r2,-8(fp)
   23824:	0085c83a 	sub	r2,zero,r2
   23828:	18800015 	stw	r2,0(r3)
          return -1;
   2382c:	00bfffc4 	movi	r2,-1
   23830:	00000c06 	br	23864 <read+0xf4>
        }
        return rval;
   23834:	e0bffe17 	ldw	r2,-8(fp)
   23838:	00000a06 	br	23864 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2383c:	00237340 	call	23734 <alt_get_errno>
   23840:	1007883a 	mov	r3,r2
   23844:	00800344 	movi	r2,13
   23848:	18800015 	stw	r2,0(r3)
   2384c:	00000406 	br	23860 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23850:	00237340 	call	23734 <alt_get_errno>
   23854:	1007883a 	mov	r3,r2
   23858:	00801444 	movi	r2,81
   2385c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23860:	00bfffc4 	movi	r2,-1
}
   23864:	e037883a 	mov	sp,fp
   23868:	dfc00117 	ldw	ra,4(sp)
   2386c:	df000017 	ldw	fp,0(sp)
   23870:	dec00204 	addi	sp,sp,8
   23874:	f800283a 	ret

00023878 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23878:	defffe04 	addi	sp,sp,-8
   2387c:	df000115 	stw	fp,4(sp)
   23880:	df000104 	addi	fp,sp,4
   23884:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23888:	e0bfff17 	ldw	r2,-4(fp)
   2388c:	108000d0 	cmplti	r2,r2,3
   23890:	1000101e 	bne	r2,zero,238d4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   23894:	e0ffff17 	ldw	r3,-4(fp)
   23898:	1805883a 	mov	r2,r3
   2389c:	1085883a 	add	r2,r2,r2
   238a0:	10c5883a 	add	r2,r2,r3
   238a4:	100490ba 	slli	r2,r2,2
   238a8:	00c000b4 	movhi	r3,2
   238ac:	10c7883a 	add	r3,r2,r3
   238b0:	1819a615 	stw	zero,26264(r3)
    alt_fd_list[fd].dev      = 0;
   238b4:	e0ffff17 	ldw	r3,-4(fp)
   238b8:	1805883a 	mov	r2,r3
   238bc:	1085883a 	add	r2,r2,r2
   238c0:	10c5883a 	add	r2,r2,r3
   238c4:	100490ba 	slli	r2,r2,2
   238c8:	00c000b4 	movhi	r3,2
   238cc:	10c7883a 	add	r3,r2,r3
   238d0:	1819a415 	stw	zero,26256(r3)
  }
}
   238d4:	0001883a 	nop
   238d8:	e037883a 	mov	sp,fp
   238dc:	df000017 	ldw	fp,0(sp)
   238e0:	dec00104 	addi	sp,sp,4
   238e4:	f800283a 	ret

000238e8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   238e8:	defff904 	addi	sp,sp,-28
   238ec:	df000615 	stw	fp,24(sp)
   238f0:	df000604 	addi	fp,sp,24
   238f4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   238f8:	0005303a 	rdctl	r2,status
   238fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23900:	e0fffd17 	ldw	r3,-12(fp)
   23904:	00bfff84 	movi	r2,-2
   23908:	1884703a 	and	r2,r3,r2
   2390c:	1001703a 	wrctl	status,r2
  return context;
   23910:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23914:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23918:	d0a00a17 	ldw	r2,-32728(gp)
   2391c:	10c000c4 	addi	r3,r2,3
   23920:	00bfff04 	movi	r2,-4
   23924:	1884703a 	and	r2,r3,r2
   23928:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2392c:	d0e00a17 	ldw	r3,-32728(gp)
   23930:	e0bffa17 	ldw	r2,-24(fp)
   23934:	1887883a 	add	r3,r3,r2
   23938:	00800134 	movhi	r2,4
   2393c:	10800004 	addi	r2,r2,0
   23940:	10c0072e 	bgeu	r2,r3,23960 <sbrk+0x78>
   23944:	e0bfff17 	ldw	r2,-4(fp)
   23948:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2394c:	e0bffc17 	ldw	r2,-16(fp)
   23950:	1001703a 	wrctl	status,r2
}
   23954:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23958:	00bfffc4 	movi	r2,-1
   2395c:	00000c06 	br	23990 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   23960:	d0a00a17 	ldw	r2,-32728(gp)
   23964:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   23968:	d0e00a17 	ldw	r3,-32728(gp)
   2396c:	e0bffa17 	ldw	r2,-24(fp)
   23970:	1885883a 	add	r2,r3,r2
   23974:	d0a00a15 	stw	r2,-32728(gp)
   23978:	e0bfff17 	ldw	r2,-4(fp)
   2397c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23980:	e0bffb17 	ldw	r2,-20(fp)
   23984:	1001703a 	wrctl	status,r2
}
   23988:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2398c:	e0bffe17 	ldw	r2,-8(fp)
} 
   23990:	e037883a 	mov	sp,fp
   23994:	df000017 	ldw	fp,0(sp)
   23998:	dec00104 	addi	sp,sp,4
   2399c:	f800283a 	ret

000239a0 <alt_get_errno>:
{
   239a0:	defffe04 	addi	sp,sp,-8
   239a4:	dfc00115 	stw	ra,4(sp)
   239a8:	df000015 	stw	fp,0(sp)
   239ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   239b0:	d0a00917 	ldw	r2,-32732(gp)
   239b4:	10000326 	beq	r2,zero,239c4 <alt_get_errno+0x24>
   239b8:	d0a00917 	ldw	r2,-32732(gp)
   239bc:	103ee83a 	callr	r2
   239c0:	00000106 	br	239c8 <alt_get_errno+0x28>
   239c4:	d0a6b804 	addi	r2,gp,-25888
}
   239c8:	e037883a 	mov	sp,fp
   239cc:	dfc00117 	ldw	ra,4(sp)
   239d0:	df000017 	ldw	fp,0(sp)
   239d4:	dec00204 	addi	sp,sp,8
   239d8:	f800283a 	ret

000239dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   239dc:	defff904 	addi	sp,sp,-28
   239e0:	dfc00615 	stw	ra,24(sp)
   239e4:	df000515 	stw	fp,20(sp)
   239e8:	df000504 	addi	fp,sp,20
   239ec:	e13ffd15 	stw	r4,-12(fp)
   239f0:	e17ffc15 	stw	r5,-16(fp)
   239f4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   239f8:	e0bffd17 	ldw	r2,-12(fp)
   239fc:	10000916 	blt	r2,zero,23a24 <write+0x48>
   23a00:	e0fffd17 	ldw	r3,-12(fp)
   23a04:	1805883a 	mov	r2,r3
   23a08:	1085883a 	add	r2,r2,r2
   23a0c:	10c5883a 	add	r2,r2,r3
   23a10:	100490ba 	slli	r2,r2,2
   23a14:	00c000b4 	movhi	r3,2
   23a18:	18d9a404 	addi	r3,r3,26256
   23a1c:	10c5883a 	add	r2,r2,r3
   23a20:	00000106 	br	23a28 <write+0x4c>
   23a24:	0005883a 	mov	r2,zero
   23a28:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23a2c:	e0bfff17 	ldw	r2,-4(fp)
   23a30:	10002126 	beq	r2,zero,23ab8 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23a34:	e0bfff17 	ldw	r2,-4(fp)
   23a38:	10800217 	ldw	r2,8(r2)
   23a3c:	108000cc 	andi	r2,r2,3
   23a40:	10001826 	beq	r2,zero,23aa4 <write+0xc8>
   23a44:	e0bfff17 	ldw	r2,-4(fp)
   23a48:	10800017 	ldw	r2,0(r2)
   23a4c:	10800617 	ldw	r2,24(r2)
   23a50:	10001426 	beq	r2,zero,23aa4 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23a54:	e0bfff17 	ldw	r2,-4(fp)
   23a58:	10800017 	ldw	r2,0(r2)
   23a5c:	10800617 	ldw	r2,24(r2)
   23a60:	e0fffb17 	ldw	r3,-20(fp)
   23a64:	180d883a 	mov	r6,r3
   23a68:	e17ffc17 	ldw	r5,-16(fp)
   23a6c:	e13fff17 	ldw	r4,-4(fp)
   23a70:	103ee83a 	callr	r2
   23a74:	e0bffe15 	stw	r2,-8(fp)
   23a78:	e0bffe17 	ldw	r2,-8(fp)
   23a7c:	1000070e 	bge	r2,zero,23a9c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   23a80:	00239a00 	call	239a0 <alt_get_errno>
   23a84:	1007883a 	mov	r3,r2
   23a88:	e0bffe17 	ldw	r2,-8(fp)
   23a8c:	0085c83a 	sub	r2,zero,r2
   23a90:	18800015 	stw	r2,0(r3)
        return -1;
   23a94:	00bfffc4 	movi	r2,-1
   23a98:	00000c06 	br	23acc <write+0xf0>
      }
      return rval;
   23a9c:	e0bffe17 	ldw	r2,-8(fp)
   23aa0:	00000a06 	br	23acc <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23aa4:	00239a00 	call	239a0 <alt_get_errno>
   23aa8:	1007883a 	mov	r3,r2
   23aac:	00800344 	movi	r2,13
   23ab0:	18800015 	stw	r2,0(r3)
   23ab4:	00000406 	br	23ac8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23ab8:	00239a00 	call	239a0 <alt_get_errno>
   23abc:	1007883a 	mov	r3,r2
   23ac0:	00801444 	movi	r2,81
   23ac4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23ac8:	00bfffc4 	movi	r2,-1
}
   23acc:	e037883a 	mov	sp,fp
   23ad0:	dfc00117 	ldw	ra,4(sp)
   23ad4:	df000017 	ldw	fp,0(sp)
   23ad8:	dec00204 	addi	sp,sp,8
   23adc:	f800283a 	ret

00023ae0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23ae0:	defffd04 	addi	sp,sp,-12
   23ae4:	dfc00215 	stw	ra,8(sp)
   23ae8:	df000115 	stw	fp,4(sp)
   23aec:	df000104 	addi	fp,sp,4
   23af0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23af4:	d1600604 	addi	r5,gp,-32744
   23af8:	e13fff17 	ldw	r4,-4(fp)
   23afc:	0024f5c0 	call	24f5c <alt_dev_llist_insert>
}
   23b00:	e037883a 	mov	sp,fp
   23b04:	dfc00117 	ldw	ra,4(sp)
   23b08:	df000017 	ldw	fp,0(sp)
   23b0c:	dec00204 	addi	sp,sp,8
   23b10:	f800283a 	ret

00023b14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23b14:	defffd04 	addi	sp,sp,-12
   23b18:	dfc00215 	stw	ra,8(sp)
   23b1c:	df000115 	stw	fp,4(sp)
   23b20:	df000104 	addi	fp,sp,4
   23b24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   23b28:	00258940 	call	25894 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23b2c:	00800044 	movi	r2,1
   23b30:	1001703a 	wrctl	status,r2
}
   23b34:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   23b38:	0001883a 	nop
   23b3c:	e037883a 	mov	sp,fp
   23b40:	dfc00117 	ldw	ra,4(sp)
   23b44:	df000017 	ldw	fp,0(sp)
   23b48:	dec00204 	addi	sp,sp,8
   23b4c:	f800283a 	ret

00023b50 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23b50:	defffe04 	addi	sp,sp,-8
   23b54:	dfc00115 	stw	ra,4(sp)
   23b58:	df000015 	stw	fp,0(sp)
   23b5c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23b60:	000d883a 	mov	r6,zero
   23b64:	000b883a 	mov	r5,zero
   23b68:	010000b4 	movhi	r4,2
   23b6c:	211a0e04 	addi	r4,r4,26680
   23b70:	0023d080 	call	23d08 <altera_avalon_jtag_uart_init>
   23b74:	010000b4 	movhi	r4,2
   23b78:	211a0404 	addi	r4,r4,26640
   23b7c:	0023ae00 	call	23ae0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
   23b80:	010000b4 	movhi	r4,2
   23b84:	211e1c04 	addi	r4,r4,30832
   23b88:	0023ae00 	call	23ae0 <alt_dev_reg>
}
   23b8c:	0001883a 	nop
   23b90:	e037883a 	mov	sp,fp
   23b94:	dfc00117 	ldw	ra,4(sp)
   23b98:	df000017 	ldw	fp,0(sp)
   23b9c:	dec00204 	addi	sp,sp,8
   23ba0:	f800283a 	ret

00023ba4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23ba4:	defffa04 	addi	sp,sp,-24
   23ba8:	dfc00515 	stw	ra,20(sp)
   23bac:	df000415 	stw	fp,16(sp)
   23bb0:	df000404 	addi	fp,sp,16
   23bb4:	e13ffe15 	stw	r4,-8(fp)
   23bb8:	e17ffd15 	stw	r5,-12(fp)
   23bbc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23bc0:	e0bffe17 	ldw	r2,-8(fp)
   23bc4:	10800017 	ldw	r2,0(r2)
   23bc8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23bcc:	e0bfff17 	ldw	r2,-4(fp)
   23bd0:	10c00a04 	addi	r3,r2,40
   23bd4:	e0bffe17 	ldw	r2,-8(fp)
   23bd8:	10800217 	ldw	r2,8(r2)
   23bdc:	100f883a 	mov	r7,r2
   23be0:	e1bffc17 	ldw	r6,-16(fp)
   23be4:	e17ffd17 	ldw	r5,-12(fp)
   23be8:	1809883a 	mov	r4,r3
   23bec:	00241c80 	call	241c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23bf0:	e037883a 	mov	sp,fp
   23bf4:	dfc00117 	ldw	ra,4(sp)
   23bf8:	df000017 	ldw	fp,0(sp)
   23bfc:	dec00204 	addi	sp,sp,8
   23c00:	f800283a 	ret

00023c04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23c04:	defffa04 	addi	sp,sp,-24
   23c08:	dfc00515 	stw	ra,20(sp)
   23c0c:	df000415 	stw	fp,16(sp)
   23c10:	df000404 	addi	fp,sp,16
   23c14:	e13ffe15 	stw	r4,-8(fp)
   23c18:	e17ffd15 	stw	r5,-12(fp)
   23c1c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c20:	e0bffe17 	ldw	r2,-8(fp)
   23c24:	10800017 	ldw	r2,0(r2)
   23c28:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23c2c:	e0bfff17 	ldw	r2,-4(fp)
   23c30:	10c00a04 	addi	r3,r2,40
   23c34:	e0bffe17 	ldw	r2,-8(fp)
   23c38:	10800217 	ldw	r2,8(r2)
   23c3c:	100f883a 	mov	r7,r2
   23c40:	e1bffc17 	ldw	r6,-16(fp)
   23c44:	e17ffd17 	ldw	r5,-12(fp)
   23c48:	1809883a 	mov	r4,r3
   23c4c:	00243e80 	call	243e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23c50:	e037883a 	mov	sp,fp
   23c54:	dfc00117 	ldw	ra,4(sp)
   23c58:	df000017 	ldw	fp,0(sp)
   23c5c:	dec00204 	addi	sp,sp,8
   23c60:	f800283a 	ret

00023c64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23c64:	defffc04 	addi	sp,sp,-16
   23c68:	dfc00315 	stw	ra,12(sp)
   23c6c:	df000215 	stw	fp,8(sp)
   23c70:	df000204 	addi	fp,sp,8
   23c74:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23c78:	e0bffe17 	ldw	r2,-8(fp)
   23c7c:	10800017 	ldw	r2,0(r2)
   23c80:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23c84:	e0bfff17 	ldw	r2,-4(fp)
   23c88:	10c00a04 	addi	r3,r2,40
   23c8c:	e0bffe17 	ldw	r2,-8(fp)
   23c90:	10800217 	ldw	r2,8(r2)
   23c94:	100b883a 	mov	r5,r2
   23c98:	1809883a 	mov	r4,r3
   23c9c:	002406c0 	call	2406c <altera_avalon_jtag_uart_close>
}
   23ca0:	e037883a 	mov	sp,fp
   23ca4:	dfc00117 	ldw	ra,4(sp)
   23ca8:	df000017 	ldw	fp,0(sp)
   23cac:	dec00204 	addi	sp,sp,8
   23cb0:	f800283a 	ret

00023cb4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23cb4:	defffa04 	addi	sp,sp,-24
   23cb8:	dfc00515 	stw	ra,20(sp)
   23cbc:	df000415 	stw	fp,16(sp)
   23cc0:	df000404 	addi	fp,sp,16
   23cc4:	e13ffe15 	stw	r4,-8(fp)
   23cc8:	e17ffd15 	stw	r5,-12(fp)
   23ccc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23cd0:	e0bffe17 	ldw	r2,-8(fp)
   23cd4:	10800017 	ldw	r2,0(r2)
   23cd8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23cdc:	e0bfff17 	ldw	r2,-4(fp)
   23ce0:	10800a04 	addi	r2,r2,40
   23ce4:	e1bffc17 	ldw	r6,-16(fp)
   23ce8:	e17ffd17 	ldw	r5,-12(fp)
   23cec:	1009883a 	mov	r4,r2
   23cf0:	00240d40 	call	240d4 <altera_avalon_jtag_uart_ioctl>
}
   23cf4:	e037883a 	mov	sp,fp
   23cf8:	dfc00117 	ldw	ra,4(sp)
   23cfc:	df000017 	ldw	fp,0(sp)
   23d00:	dec00204 	addi	sp,sp,8
   23d04:	f800283a 	ret

00023d08 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23d08:	defffb04 	addi	sp,sp,-20
   23d0c:	dfc00415 	stw	ra,16(sp)
   23d10:	df000315 	stw	fp,12(sp)
   23d14:	df000304 	addi	fp,sp,12
   23d18:	e13fff15 	stw	r4,-4(fp)
   23d1c:	e17ffe15 	stw	r5,-8(fp)
   23d20:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23d24:	e0bfff17 	ldw	r2,-4(fp)
   23d28:	00c00044 	movi	r3,1
   23d2c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23d30:	e0bfff17 	ldw	r2,-4(fp)
   23d34:	10800017 	ldw	r2,0(r2)
   23d38:	10800104 	addi	r2,r2,4
   23d3c:	1007883a 	mov	r3,r2
   23d40:	e0bfff17 	ldw	r2,-4(fp)
   23d44:	10800817 	ldw	r2,32(r2)
   23d48:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   23d4c:	e0bffd17 	ldw	r2,-12(fp)
   23d50:	018000b4 	movhi	r6,2
   23d54:	318f6f04 	addi	r6,r6,15804
   23d58:	e17fff17 	ldw	r5,-4(fp)
   23d5c:	1009883a 	mov	r4,r2
   23d60:	00252cc0 	call	252cc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23d64:	e0bfff17 	ldw	r2,-4(fp)
   23d68:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23d6c:	e0bfff17 	ldw	r2,-4(fp)
   23d70:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23d74:	d0e6bd17 	ldw	r3,-25868(gp)
   23d78:	e1ffff17 	ldw	r7,-4(fp)
   23d7c:	018000b4 	movhi	r6,2
   23d80:	318ff304 	addi	r6,r6,16332
   23d84:	180b883a 	mov	r5,r3
   23d88:	1009883a 	mov	r4,r2
   23d8c:	0024da00 	call	24da0 <alt_alarm_start>
   23d90:	1000040e 	bge	r2,zero,23da4 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23d94:	e0ffff17 	ldw	r3,-4(fp)
   23d98:	00a00034 	movhi	r2,32768
   23d9c:	10bfffc4 	addi	r2,r2,-1
   23da0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23da4:	0001883a 	nop
   23da8:	e037883a 	mov	sp,fp
   23dac:	dfc00117 	ldw	ra,4(sp)
   23db0:	df000017 	ldw	fp,0(sp)
   23db4:	dec00204 	addi	sp,sp,8
   23db8:	f800283a 	ret

00023dbc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23dbc:	defff704 	addi	sp,sp,-36
   23dc0:	df000815 	stw	fp,32(sp)
   23dc4:	df000804 	addi	fp,sp,32
   23dc8:	e13ff915 	stw	r4,-28(fp)
   23dcc:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23dd0:	e0bff917 	ldw	r2,-28(fp)
   23dd4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   23dd8:	e0bffd17 	ldw	r2,-12(fp)
   23ddc:	10800017 	ldw	r2,0(r2)
   23de0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23de4:	e0bffc17 	ldw	r2,-16(fp)
   23de8:	10800104 	addi	r2,r2,4
   23dec:	10800037 	ldwio	r2,0(r2)
   23df0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23df4:	e0bffb17 	ldw	r2,-20(fp)
   23df8:	1080c00c 	andi	r2,r2,768
   23dfc:	10006d26 	beq	r2,zero,23fb4 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23e00:	e0bffb17 	ldw	r2,-20(fp)
   23e04:	1080400c 	andi	r2,r2,256
   23e08:	10003526 	beq	r2,zero,23ee0 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23e0c:	00800074 	movhi	r2,1
   23e10:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e14:	e0bffd17 	ldw	r2,-12(fp)
   23e18:	10800a17 	ldw	r2,40(r2)
   23e1c:	10800044 	addi	r2,r2,1
   23e20:	1081ffcc 	andi	r2,r2,2047
   23e24:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   23e28:	e0bffd17 	ldw	r2,-12(fp)
   23e2c:	10800b17 	ldw	r2,44(r2)
   23e30:	e0fffa17 	ldw	r3,-24(fp)
   23e34:	18801526 	beq	r3,r2,23e8c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23e38:	e0bffc17 	ldw	r2,-16(fp)
   23e3c:	10800037 	ldwio	r2,0(r2)
   23e40:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23e44:	e0bfff17 	ldw	r2,-4(fp)
   23e48:	10a0000c 	andi	r2,r2,32768
   23e4c:	10001126 	beq	r2,zero,23e94 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23e50:	e0bffd17 	ldw	r2,-12(fp)
   23e54:	10800a17 	ldw	r2,40(r2)
   23e58:	e0ffff17 	ldw	r3,-4(fp)
   23e5c:	1809883a 	mov	r4,r3
   23e60:	e0fffd17 	ldw	r3,-12(fp)
   23e64:	1885883a 	add	r2,r3,r2
   23e68:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e6c:	e0bffd17 	ldw	r2,-12(fp)
   23e70:	10800a17 	ldw	r2,40(r2)
   23e74:	10800044 	addi	r2,r2,1
   23e78:	10c1ffcc 	andi	r3,r2,2047
   23e7c:	e0bffd17 	ldw	r2,-12(fp)
   23e80:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   23e84:	0001883a 	nop
      {
   23e88:	003fe206 	br	23e14 <altera_avalon_jtag_uart_irq+0x58>
          break;
   23e8c:	0001883a 	nop
   23e90:	00000106 	br	23e98 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   23e94:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23e98:	e0bfff17 	ldw	r2,-4(fp)
   23e9c:	10bfffec 	andhi	r2,r2,65535
   23ea0:	10000f26 	beq	r2,zero,23ee0 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23ea4:	e0bffd17 	ldw	r2,-12(fp)
   23ea8:	10c00817 	ldw	r3,32(r2)
   23eac:	00bfff84 	movi	r2,-2
   23eb0:	1886703a 	and	r3,r3,r2
   23eb4:	e0bffd17 	ldw	r2,-12(fp)
   23eb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23ebc:	e0bffc17 	ldw	r2,-16(fp)
   23ec0:	10800104 	addi	r2,r2,4
   23ec4:	1007883a 	mov	r3,r2
   23ec8:	e0bffd17 	ldw	r2,-12(fp)
   23ecc:	10800817 	ldw	r2,32(r2)
   23ed0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23ed4:	e0bffc17 	ldw	r2,-16(fp)
   23ed8:	10800104 	addi	r2,r2,4
   23edc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23ee0:	e0bffb17 	ldw	r2,-20(fp)
   23ee4:	1080800c 	andi	r2,r2,512
   23ee8:	103fbe26 	beq	r2,zero,23de4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23eec:	e0bffb17 	ldw	r2,-20(fp)
   23ef0:	1004d43a 	srli	r2,r2,16
   23ef4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ef8:	00001406 	br	23f4c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23efc:	e0bffc17 	ldw	r2,-16(fp)
   23f00:	e0fffd17 	ldw	r3,-12(fp)
   23f04:	18c00d17 	ldw	r3,52(r3)
   23f08:	e13ffd17 	ldw	r4,-12(fp)
   23f0c:	20c7883a 	add	r3,r4,r3
   23f10:	18c20e03 	ldbu	r3,2104(r3)
   23f14:	18c03fcc 	andi	r3,r3,255
   23f18:	18c0201c 	xori	r3,r3,128
   23f1c:	18ffe004 	addi	r3,r3,-128
   23f20:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23f24:	e0bffd17 	ldw	r2,-12(fp)
   23f28:	10800d17 	ldw	r2,52(r2)
   23f2c:	10800044 	addi	r2,r2,1
   23f30:	10c1ffcc 	andi	r3,r2,2047
   23f34:	e0bffd17 	ldw	r2,-12(fp)
   23f38:	10c00d15 	stw	r3,52(r2)
   23f3c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23f40:	e0bffe17 	ldw	r2,-8(fp)
   23f44:	10bfffc4 	addi	r2,r2,-1
   23f48:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   23f4c:	e0bffe17 	ldw	r2,-8(fp)
   23f50:	10000526 	beq	r2,zero,23f68 <altera_avalon_jtag_uart_irq+0x1ac>
   23f54:	e0bffd17 	ldw	r2,-12(fp)
   23f58:	10c00d17 	ldw	r3,52(r2)
   23f5c:	e0bffd17 	ldw	r2,-12(fp)
   23f60:	10800c17 	ldw	r2,48(r2)
   23f64:	18bfe51e 	bne	r3,r2,23efc <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   23f68:	e0bffe17 	ldw	r2,-8(fp)
   23f6c:	103f9d26 	beq	r2,zero,23de4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23f70:	e0bffd17 	ldw	r2,-12(fp)
   23f74:	10c00817 	ldw	r3,32(r2)
   23f78:	00bfff44 	movi	r2,-3
   23f7c:	1886703a 	and	r3,r3,r2
   23f80:	e0bffd17 	ldw	r2,-12(fp)
   23f84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f88:	e0bffd17 	ldw	r2,-12(fp)
   23f8c:	10800017 	ldw	r2,0(r2)
   23f90:	10800104 	addi	r2,r2,4
   23f94:	1007883a 	mov	r3,r2
   23f98:	e0bffd17 	ldw	r2,-12(fp)
   23f9c:	10800817 	ldw	r2,32(r2)
   23fa0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23fa4:	e0bffc17 	ldw	r2,-16(fp)
   23fa8:	10800104 	addi	r2,r2,4
   23fac:	10800037 	ldwio	r2,0(r2)
  {
   23fb0:	003f8c06 	br	23de4 <altera_avalon_jtag_uart_irq+0x28>
      break;
   23fb4:	0001883a 	nop
      }
    }
  }
}
   23fb8:	0001883a 	nop
   23fbc:	e037883a 	mov	sp,fp
   23fc0:	df000017 	ldw	fp,0(sp)
   23fc4:	dec00104 	addi	sp,sp,4
   23fc8:	f800283a 	ret

00023fcc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23fcc:	defffc04 	addi	sp,sp,-16
   23fd0:	df000315 	stw	fp,12(sp)
   23fd4:	df000304 	addi	fp,sp,12
   23fd8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23fdc:	e0bffd17 	ldw	r2,-12(fp)
   23fe0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23fe4:	e0bfff17 	ldw	r2,-4(fp)
   23fe8:	10800017 	ldw	r2,0(r2)
   23fec:	10800104 	addi	r2,r2,4
   23ff0:	10800037 	ldwio	r2,0(r2)
   23ff4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23ff8:	e0bffe17 	ldw	r2,-8(fp)
   23ffc:	1081000c 	andi	r2,r2,1024
   24000:	10000b26 	beq	r2,zero,24030 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24004:	e0bfff17 	ldw	r2,-4(fp)
   24008:	10800017 	ldw	r2,0(r2)
   2400c:	10800104 	addi	r2,r2,4
   24010:	1007883a 	mov	r3,r2
   24014:	e0bfff17 	ldw	r2,-4(fp)
   24018:	10800817 	ldw	r2,32(r2)
   2401c:	10810014 	ori	r2,r2,1024
   24020:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24024:	e0bfff17 	ldw	r2,-4(fp)
   24028:	10000915 	stw	zero,36(r2)
   2402c:	00000a06 	br	24058 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24030:	e0bfff17 	ldw	r2,-4(fp)
   24034:	10c00917 	ldw	r3,36(r2)
   24038:	00a00034 	movhi	r2,32768
   2403c:	10bfff04 	addi	r2,r2,-4
   24040:	10c00536 	bltu	r2,r3,24058 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24044:	e0bfff17 	ldw	r2,-4(fp)
   24048:	10800917 	ldw	r2,36(r2)
   2404c:	10c00044 	addi	r3,r2,1
   24050:	e0bfff17 	ldw	r2,-4(fp)
   24054:	10c00915 	stw	r3,36(r2)
   24058:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2405c:	e037883a 	mov	sp,fp
   24060:	df000017 	ldw	fp,0(sp)
   24064:	dec00104 	addi	sp,sp,4
   24068:	f800283a 	ret

0002406c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2406c:	defffd04 	addi	sp,sp,-12
   24070:	df000215 	stw	fp,8(sp)
   24074:	df000204 	addi	fp,sp,8
   24078:	e13fff15 	stw	r4,-4(fp)
   2407c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24080:	00000506 	br	24098 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24084:	e0bffe17 	ldw	r2,-8(fp)
   24088:	1090000c 	andi	r2,r2,16384
   2408c:	10000226 	beq	r2,zero,24098 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24090:	00bffd44 	movi	r2,-11
   24094:	00000b06 	br	240c4 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24098:	e0bfff17 	ldw	r2,-4(fp)
   2409c:	10c00d17 	ldw	r3,52(r2)
   240a0:	e0bfff17 	ldw	r2,-4(fp)
   240a4:	10800c17 	ldw	r2,48(r2)
   240a8:	18800526 	beq	r3,r2,240c0 <altera_avalon_jtag_uart_close+0x54>
   240ac:	e0bfff17 	ldw	r2,-4(fp)
   240b0:	10c00917 	ldw	r3,36(r2)
   240b4:	e0bfff17 	ldw	r2,-4(fp)
   240b8:	10800117 	ldw	r2,4(r2)
   240bc:	18bff136 	bltu	r3,r2,24084 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   240c0:	0005883a 	mov	r2,zero
}
   240c4:	e037883a 	mov	sp,fp
   240c8:	df000017 	ldw	fp,0(sp)
   240cc:	dec00104 	addi	sp,sp,4
   240d0:	f800283a 	ret

000240d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   240d4:	defffa04 	addi	sp,sp,-24
   240d8:	df000515 	stw	fp,20(sp)
   240dc:	df000504 	addi	fp,sp,20
   240e0:	e13ffd15 	stw	r4,-12(fp)
   240e4:	e17ffc15 	stw	r5,-16(fp)
   240e8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   240ec:	00bff9c4 	movi	r2,-25
   240f0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   240f4:	e0bffc17 	ldw	r2,-16(fp)
   240f8:	109a8060 	cmpeqi	r2,r2,27137
   240fc:	1000041e 	bne	r2,zero,24110 <altera_avalon_jtag_uart_ioctl+0x3c>
   24100:	e0bffc17 	ldw	r2,-16(fp)
   24104:	109a80a0 	cmpeqi	r2,r2,27138
   24108:	1000181e 	bne	r2,zero,2416c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   2410c:	00002906 	br	241b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   24110:	e0bffd17 	ldw	r2,-12(fp)
   24114:	10c00117 	ldw	r3,4(r2)
   24118:	00a00034 	movhi	r2,32768
   2411c:	10bfffc4 	addi	r2,r2,-1
   24120:	18802126 	beq	r3,r2,241a8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   24124:	e0bffb17 	ldw	r2,-20(fp)
   24128:	10800017 	ldw	r2,0(r2)
   2412c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24130:	e0bffe17 	ldw	r2,-8(fp)
   24134:	10800090 	cmplti	r2,r2,2
   24138:	1000061e 	bne	r2,zero,24154 <altera_avalon_jtag_uart_ioctl+0x80>
   2413c:	e0fffe17 	ldw	r3,-8(fp)
   24140:	00a00034 	movhi	r2,32768
   24144:	10bfffc4 	addi	r2,r2,-1
   24148:	18800226 	beq	r3,r2,24154 <altera_avalon_jtag_uart_ioctl+0x80>
   2414c:	e0bffe17 	ldw	r2,-8(fp)
   24150:	00000206 	br	2415c <altera_avalon_jtag_uart_ioctl+0x88>
   24154:	00a00034 	movhi	r2,32768
   24158:	10bfff84 	addi	r2,r2,-2
   2415c:	e0fffd17 	ldw	r3,-12(fp)
   24160:	18800115 	stw	r2,4(r3)
      rc = 0;
   24164:	e03fff15 	stw	zero,-4(fp)
    break;
   24168:	00000f06 	br	241a8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   2416c:	e0bffd17 	ldw	r2,-12(fp)
   24170:	10c00117 	ldw	r3,4(r2)
   24174:	00a00034 	movhi	r2,32768
   24178:	10bfffc4 	addi	r2,r2,-1
   2417c:	18800c26 	beq	r3,r2,241b0 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24180:	e0bffd17 	ldw	r2,-12(fp)
   24184:	10c00917 	ldw	r3,36(r2)
   24188:	e0bffd17 	ldw	r2,-12(fp)
   2418c:	10800117 	ldw	r2,4(r2)
   24190:	1885803a 	cmpltu	r2,r3,r2
   24194:	10c03fcc 	andi	r3,r2,255
   24198:	e0bffb17 	ldw	r2,-20(fp)
   2419c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   241a0:	e03fff15 	stw	zero,-4(fp)
    break;
   241a4:	00000206 	br	241b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   241a8:	0001883a 	nop
   241ac:	00000106 	br	241b4 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   241b0:	0001883a 	nop
  }

  return rc;
   241b4:	e0bfff17 	ldw	r2,-4(fp)
}
   241b8:	e037883a 	mov	sp,fp
   241bc:	df000017 	ldw	fp,0(sp)
   241c0:	dec00104 	addi	sp,sp,4
   241c4:	f800283a 	ret

000241c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   241c8:	defff304 	addi	sp,sp,-52
   241cc:	dfc00c15 	stw	ra,48(sp)
   241d0:	df000b15 	stw	fp,44(sp)
   241d4:	df000b04 	addi	fp,sp,44
   241d8:	e13ff815 	stw	r4,-32(fp)
   241dc:	e17ff715 	stw	r5,-36(fp)
   241e0:	e1bff615 	stw	r6,-40(fp)
   241e4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   241e8:	e0bff717 	ldw	r2,-36(fp)
   241ec:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   241f0:	00004706 	br	24310 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   241f4:	e0bff817 	ldw	r2,-32(fp)
   241f8:	10800a17 	ldw	r2,40(r2)
   241fc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   24200:	e0bff817 	ldw	r2,-32(fp)
   24204:	10800b17 	ldw	r2,44(r2)
   24208:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   2420c:	e0fffd17 	ldw	r3,-12(fp)
   24210:	e0bffc17 	ldw	r2,-16(fp)
   24214:	18800536 	bltu	r3,r2,2422c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24218:	e0fffd17 	ldw	r3,-12(fp)
   2421c:	e0bffc17 	ldw	r2,-16(fp)
   24220:	1885c83a 	sub	r2,r3,r2
   24224:	e0bffe15 	stw	r2,-8(fp)
   24228:	00000406 	br	2423c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2422c:	00c20004 	movi	r3,2048
   24230:	e0bffc17 	ldw	r2,-16(fp)
   24234:	1885c83a 	sub	r2,r3,r2
   24238:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   2423c:	e0bffe17 	ldw	r2,-8(fp)
   24240:	10001e26 	beq	r2,zero,242bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24244:	e0fff617 	ldw	r3,-40(fp)
   24248:	e0bffe17 	ldw	r2,-8(fp)
   2424c:	1880022e 	bgeu	r3,r2,24258 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24250:	e0bff617 	ldw	r2,-40(fp)
   24254:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24258:	e0bff817 	ldw	r2,-32(fp)
   2425c:	10c00e04 	addi	r3,r2,56
   24260:	e0bffc17 	ldw	r2,-16(fp)
   24264:	1885883a 	add	r2,r3,r2
   24268:	e1bffe17 	ldw	r6,-8(fp)
   2426c:	100b883a 	mov	r5,r2
   24270:	e13fff17 	ldw	r4,-4(fp)
   24274:	00216c80 	call	216c8 <memcpy>
      ptr   += n;
   24278:	e0ffff17 	ldw	r3,-4(fp)
   2427c:	e0bffe17 	ldw	r2,-8(fp)
   24280:	1885883a 	add	r2,r3,r2
   24284:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   24288:	e0fff617 	ldw	r3,-40(fp)
   2428c:	e0bffe17 	ldw	r2,-8(fp)
   24290:	1885c83a 	sub	r2,r3,r2
   24294:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24298:	e0fffc17 	ldw	r3,-16(fp)
   2429c:	e0bffe17 	ldw	r2,-8(fp)
   242a0:	1885883a 	add	r2,r3,r2
   242a4:	10c1ffcc 	andi	r3,r2,2047
   242a8:	e0bff817 	ldw	r2,-32(fp)
   242ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   242b0:	e0bff617 	ldw	r2,-40(fp)
   242b4:	00bfcf16 	blt	zero,r2,241f4 <altera_avalon_jtag_uart_read+0x2c>
   242b8:	00000106 	br	242c0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   242bc:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   242c0:	e0ffff17 	ldw	r3,-4(fp)
   242c4:	e0bff717 	ldw	r2,-36(fp)
   242c8:	1880141e 	bne	r3,r2,2431c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   242cc:	e0bff517 	ldw	r2,-44(fp)
   242d0:	1090000c 	andi	r2,r2,16384
   242d4:	1000131e 	bne	r2,zero,24324 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   242d8:	0001883a 	nop
   242dc:	e0bff817 	ldw	r2,-32(fp)
   242e0:	10800a17 	ldw	r2,40(r2)
   242e4:	e0fffd17 	ldw	r3,-12(fp)
   242e8:	1880051e 	bne	r3,r2,24300 <altera_avalon_jtag_uart_read+0x138>
   242ec:	e0bff817 	ldw	r2,-32(fp)
   242f0:	10c00917 	ldw	r3,36(r2)
   242f4:	e0bff817 	ldw	r2,-32(fp)
   242f8:	10800117 	ldw	r2,4(r2)
   242fc:	18bff736 	bltu	r3,r2,242dc <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24300:	e0bff817 	ldw	r2,-32(fp)
   24304:	10800a17 	ldw	r2,40(r2)
   24308:	e0fffd17 	ldw	r3,-12(fp)
   2430c:	18800726 	beq	r3,r2,2432c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   24310:	e0bff617 	ldw	r2,-40(fp)
   24314:	00bfb716 	blt	zero,r2,241f4 <altera_avalon_jtag_uart_read+0x2c>
   24318:	00000506 	br	24330 <altera_avalon_jtag_uart_read+0x168>
      break;
   2431c:	0001883a 	nop
   24320:	00000306 	br	24330 <altera_avalon_jtag_uart_read+0x168>
      break;
   24324:	0001883a 	nop
   24328:	00000106 	br	24330 <altera_avalon_jtag_uart_read+0x168>
      break;
   2432c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24330:	e0ffff17 	ldw	r3,-4(fp)
   24334:	e0bff717 	ldw	r2,-36(fp)
   24338:	18801926 	beq	r3,r2,243a0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   2433c:	0005303a 	rdctl	r2,status
   24340:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24344:	e0fff917 	ldw	r3,-28(fp)
   24348:	00bfff84 	movi	r2,-2
   2434c:	1884703a 	and	r2,r3,r2
   24350:	1001703a 	wrctl	status,r2
  return context;
   24354:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24358:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2435c:	e0bff817 	ldw	r2,-32(fp)
   24360:	10800817 	ldw	r2,32(r2)
   24364:	10c00054 	ori	r3,r2,1
   24368:	e0bff817 	ldw	r2,-32(fp)
   2436c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24370:	e0bff817 	ldw	r2,-32(fp)
   24374:	10800017 	ldw	r2,0(r2)
   24378:	10800104 	addi	r2,r2,4
   2437c:	1007883a 	mov	r3,r2
   24380:	e0bff817 	ldw	r2,-32(fp)
   24384:	10800817 	ldw	r2,32(r2)
   24388:	18800035 	stwio	r2,0(r3)
   2438c:	e0bffb17 	ldw	r2,-20(fp)
   24390:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24394:	e0bffa17 	ldw	r2,-24(fp)
   24398:	1001703a 	wrctl	status,r2
}
   2439c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   243a0:	e0ffff17 	ldw	r3,-4(fp)
   243a4:	e0bff717 	ldw	r2,-36(fp)
   243a8:	18800426 	beq	r3,r2,243bc <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   243ac:	e0ffff17 	ldw	r3,-4(fp)
   243b0:	e0bff717 	ldw	r2,-36(fp)
   243b4:	1885c83a 	sub	r2,r3,r2
   243b8:	00000606 	br	243d4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   243bc:	e0bff517 	ldw	r2,-44(fp)
   243c0:	1090000c 	andi	r2,r2,16384
   243c4:	10000226 	beq	r2,zero,243d0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   243c8:	00bffd44 	movi	r2,-11
   243cc:	00000106 	br	243d4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   243d0:	00bffec4 	movi	r2,-5
}
   243d4:	e037883a 	mov	sp,fp
   243d8:	dfc00117 	ldw	ra,4(sp)
   243dc:	df000017 	ldw	fp,0(sp)
   243e0:	dec00204 	addi	sp,sp,8
   243e4:	f800283a 	ret

000243e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   243e8:	defff304 	addi	sp,sp,-52
   243ec:	dfc00c15 	stw	ra,48(sp)
   243f0:	df000b15 	stw	fp,44(sp)
   243f4:	df000b04 	addi	fp,sp,44
   243f8:	e13ff815 	stw	r4,-32(fp)
   243fc:	e17ff715 	stw	r5,-36(fp)
   24400:	e1bff615 	stw	r6,-40(fp)
   24404:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24408:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2440c:	e0bff717 	ldw	r2,-36(fp)
   24410:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24414:	00003706 	br	244f4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24418:	e0bff817 	ldw	r2,-32(fp)
   2441c:	10800c17 	ldw	r2,48(r2)
   24420:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   24424:	e0bff817 	ldw	r2,-32(fp)
   24428:	10800d17 	ldw	r2,52(r2)
   2442c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   24430:	e0fffc17 	ldw	r3,-16(fp)
   24434:	e0bfff17 	ldw	r2,-4(fp)
   24438:	1880062e 	bgeu	r3,r2,24454 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2443c:	e0ffff17 	ldw	r3,-4(fp)
   24440:	e0bffc17 	ldw	r2,-16(fp)
   24444:	1885c83a 	sub	r2,r3,r2
   24448:	10bfffc4 	addi	r2,r2,-1
   2444c:	e0bffe15 	stw	r2,-8(fp)
   24450:	00000b06 	br	24480 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24454:	e0bfff17 	ldw	r2,-4(fp)
   24458:	10000526 	beq	r2,zero,24470 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2445c:	00c20004 	movi	r3,2048
   24460:	e0bffc17 	ldw	r2,-16(fp)
   24464:	1885c83a 	sub	r2,r3,r2
   24468:	e0bffe15 	stw	r2,-8(fp)
   2446c:	00000406 	br	24480 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24470:	00c1ffc4 	movi	r3,2047
   24474:	e0bffc17 	ldw	r2,-16(fp)
   24478:	1885c83a 	sub	r2,r3,r2
   2447c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24480:	e0bffe17 	ldw	r2,-8(fp)
   24484:	10001e26 	beq	r2,zero,24500 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24488:	e0fff617 	ldw	r3,-40(fp)
   2448c:	e0bffe17 	ldw	r2,-8(fp)
   24490:	1880022e 	bgeu	r3,r2,2449c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24494:	e0bff617 	ldw	r2,-40(fp)
   24498:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2449c:	e0bff817 	ldw	r2,-32(fp)
   244a0:	10c20e04 	addi	r3,r2,2104
   244a4:	e0bffc17 	ldw	r2,-16(fp)
   244a8:	1885883a 	add	r2,r3,r2
   244ac:	e1bffe17 	ldw	r6,-8(fp)
   244b0:	e17ff717 	ldw	r5,-36(fp)
   244b4:	1009883a 	mov	r4,r2
   244b8:	00216c80 	call	216c8 <memcpy>
      ptr   += n;
   244bc:	e0fff717 	ldw	r3,-36(fp)
   244c0:	e0bffe17 	ldw	r2,-8(fp)
   244c4:	1885883a 	add	r2,r3,r2
   244c8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   244cc:	e0fff617 	ldw	r3,-40(fp)
   244d0:	e0bffe17 	ldw	r2,-8(fp)
   244d4:	1885c83a 	sub	r2,r3,r2
   244d8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   244dc:	e0fffc17 	ldw	r3,-16(fp)
   244e0:	e0bffe17 	ldw	r2,-8(fp)
   244e4:	1885883a 	add	r2,r3,r2
   244e8:	10c1ffcc 	andi	r3,r2,2047
   244ec:	e0bff817 	ldw	r2,-32(fp)
   244f0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   244f4:	e0bff617 	ldw	r2,-40(fp)
   244f8:	00bfc716 	blt	zero,r2,24418 <altera_avalon_jtag_uart_write+0x30>
   244fc:	00000106 	br	24504 <altera_avalon_jtag_uart_write+0x11c>
        break;
   24500:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   24504:	0005303a 	rdctl	r2,status
   24508:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2450c:	e0fff917 	ldw	r3,-28(fp)
   24510:	00bfff84 	movi	r2,-2
   24514:	1884703a 	and	r2,r3,r2
   24518:	1001703a 	wrctl	status,r2
  return context;
   2451c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24520:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24524:	e0bff817 	ldw	r2,-32(fp)
   24528:	10800817 	ldw	r2,32(r2)
   2452c:	10c00094 	ori	r3,r2,2
   24530:	e0bff817 	ldw	r2,-32(fp)
   24534:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24538:	e0bff817 	ldw	r2,-32(fp)
   2453c:	10800017 	ldw	r2,0(r2)
   24540:	10800104 	addi	r2,r2,4
   24544:	1007883a 	mov	r3,r2
   24548:	e0bff817 	ldw	r2,-32(fp)
   2454c:	10800817 	ldw	r2,32(r2)
   24550:	18800035 	stwio	r2,0(r3)
   24554:	e0bffb17 	ldw	r2,-20(fp)
   24558:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   2455c:	e0bffa17 	ldw	r2,-24(fp)
   24560:	1001703a 	wrctl	status,r2
}
   24564:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24568:	e0bff617 	ldw	r2,-40(fp)
   2456c:	0080100e 	bge	zero,r2,245b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24570:	e0bff517 	ldw	r2,-44(fp)
   24574:	1090000c 	andi	r2,r2,16384
   24578:	1000101e 	bne	r2,zero,245bc <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2457c:	0001883a 	nop
   24580:	e0bff817 	ldw	r2,-32(fp)
   24584:	10800d17 	ldw	r2,52(r2)
   24588:	e0ffff17 	ldw	r3,-4(fp)
   2458c:	1880051e 	bne	r3,r2,245a4 <altera_avalon_jtag_uart_write+0x1bc>
   24590:	e0bff817 	ldw	r2,-32(fp)
   24594:	10c00917 	ldw	r3,36(r2)
   24598:	e0bff817 	ldw	r2,-32(fp)
   2459c:	10800117 	ldw	r2,4(r2)
   245a0:	18bff736 	bltu	r3,r2,24580 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   245a4:	e0bff817 	ldw	r2,-32(fp)
   245a8:	10800917 	ldw	r2,36(r2)
   245ac:	1000051e 	bne	r2,zero,245c4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   245b0:	e0bff617 	ldw	r2,-40(fp)
   245b4:	00bfcf16 	blt	zero,r2,244f4 <altera_avalon_jtag_uart_write+0x10c>
   245b8:	00000306 	br	245c8 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   245bc:	0001883a 	nop
   245c0:	00000106 	br	245c8 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   245c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   245c8:	e0fff717 	ldw	r3,-36(fp)
   245cc:	e0bffd17 	ldw	r2,-12(fp)
   245d0:	18800426 	beq	r3,r2,245e4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   245d4:	e0fff717 	ldw	r3,-36(fp)
   245d8:	e0bffd17 	ldw	r2,-12(fp)
   245dc:	1885c83a 	sub	r2,r3,r2
   245e0:	00000606 	br	245fc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   245e4:	e0bff517 	ldw	r2,-44(fp)
   245e8:	1090000c 	andi	r2,r2,16384
   245ec:	10000226 	beq	r2,zero,245f8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   245f0:	00bffd44 	movi	r2,-11
   245f4:	00000106 	br	245fc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   245f8:	00bffec4 	movi	r2,-5
}
   245fc:	e037883a 	mov	sp,fp
   24600:	dfc00117 	ldw	ra,4(sp)
   24604:	df000017 	ldw	fp,0(sp)
   24608:	dec00204 	addi	sp,sp,8
   2460c:	f800283a 	ret

00024610 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   24610:	defffc04 	addi	sp,sp,-16
   24614:	dfc00315 	stw	ra,12(sp)
   24618:	df000215 	stw	fp,8(sp)
   2461c:	df000204 	addi	fp,sp,8
   24620:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   24624:	d1600604 	addi	r5,gp,-32744
   24628:	e13ffe17 	ldw	r4,-8(fp)
   2462c:	00250cc0 	call	250cc <alt_find_dev>
   24630:	e0bfff15 	stw	r2,-4(fp)
  return dev;
   24634:	e0bfff17 	ldw	r2,-4(fp)
}
   24638:	e037883a 	mov	sp,fp
   2463c:	dfc00117 	ldw	ra,4(sp)
   24640:	df000017 	ldw	fp,0(sp)
   24644:	dec00204 	addi	sp,sp,8
   24648:	f800283a 	ret

0002464c <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   2464c:	defffd04 	addi	sp,sp,-12
   24650:	df000215 	stw	fp,8(sp)
   24654:	df000204 	addi	fp,sp,8
   24658:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   2465c:	e0bffe17 	ldw	r2,-8(fp)
   24660:	10800a17 	ldw	r2,40(r2)
   24664:	10800037 	ldwio	r2,0(r2)
   24668:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   2466c:	e0bfff17 	ldw	r2,-4(fp)
   24670:	10800054 	ori	r2,r2,1
   24674:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24678:	e0bffe17 	ldw	r2,-8(fp)
   2467c:	10800a17 	ldw	r2,40(r2)
   24680:	1007883a 	mov	r3,r2
   24684:	e0bfff17 	ldw	r2,-4(fp)
   24688:	18800035 	stwio	r2,0(r3)
}
   2468c:	0001883a 	nop
   24690:	e037883a 	mov	sp,fp
   24694:	df000017 	ldw	fp,0(sp)
   24698:	dec00104 	addi	sp,sp,4
   2469c:	f800283a 	ret

000246a0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   246a0:	defffd04 	addi	sp,sp,-12
   246a4:	df000215 	stw	fp,8(sp)
   246a8:	df000204 	addi	fp,sp,8
   246ac:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   246b0:	e0bffe17 	ldw	r2,-8(fp)
   246b4:	10800a17 	ldw	r2,40(r2)
   246b8:	10800037 	ldwio	r2,0(r2)
   246bc:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   246c0:	e0ffff17 	ldw	r3,-4(fp)
   246c4:	00bfff84 	movi	r2,-2
   246c8:	1884703a 	and	r2,r3,r2
   246cc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   246d0:	e0bffe17 	ldw	r2,-8(fp)
   246d4:	10800a17 	ldw	r2,40(r2)
   246d8:	1007883a 	mov	r3,r2
   246dc:	e0bfff17 	ldw	r2,-4(fp)
   246e0:	18800035 	stwio	r2,0(r3)
}
   246e4:	0001883a 	nop
   246e8:	e037883a 	mov	sp,fp
   246ec:	df000017 	ldw	fp,0(sp)
   246f0:	dec00104 	addi	sp,sp,4
   246f4:	f800283a 	ret

000246f8 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   246f8:	defffd04 	addi	sp,sp,-12
   246fc:	df000215 	stw	fp,8(sp)
   24700:	df000204 	addi	fp,sp,8
   24704:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24708:	e0bffe17 	ldw	r2,-8(fp)
   2470c:	10800a17 	ldw	r2,40(r2)
   24710:	10800037 	ldwio	r2,0(r2)
   24714:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   24718:	e0bfff17 	ldw	r2,-4(fp)
   2471c:	10800094 	ori	r2,r2,2
   24720:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24724:	e0bffe17 	ldw	r2,-8(fp)
   24728:	10800a17 	ldw	r2,40(r2)
   2472c:	1007883a 	mov	r3,r2
   24730:	e0bfff17 	ldw	r2,-4(fp)
   24734:	18800035 	stwio	r2,0(r3)
}
   24738:	0001883a 	nop
   2473c:	e037883a 	mov	sp,fp
   24740:	df000017 	ldw	fp,0(sp)
   24744:	dec00104 	addi	sp,sp,4
   24748:	f800283a 	ret

0002474c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   2474c:	defffd04 	addi	sp,sp,-12
   24750:	df000215 	stw	fp,8(sp)
   24754:	df000204 	addi	fp,sp,8
   24758:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   2475c:	e0bffe17 	ldw	r2,-8(fp)
   24760:	10800a17 	ldw	r2,40(r2)
   24764:	10800037 	ldwio	r2,0(r2)
   24768:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   2476c:	e0ffff17 	ldw	r3,-4(fp)
   24770:	00bfff44 	movi	r2,-3
   24774:	1884703a 	and	r2,r3,r2
   24778:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   2477c:	e0bffe17 	ldw	r2,-8(fp)
   24780:	10800a17 	ldw	r2,40(r2)
   24784:	1007883a 	mov	r3,r2
   24788:	e0bfff17 	ldw	r2,-4(fp)
   2478c:	18800035 	stwio	r2,0(r3)
}
   24790:	0001883a 	nop
   24794:	e037883a 	mov	sp,fp
   24798:	df000017 	ldw	fp,0(sp)
   2479c:	dec00104 	addi	sp,sp,4
   247a0:	f800283a 	ret

000247a4 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   247a4:	defffd04 	addi	sp,sp,-12
   247a8:	df000215 	stw	fp,8(sp)
   247ac:	df000204 	addi	fp,sp,8
   247b0:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   247b4:	e0bffe17 	ldw	r2,-8(fp)
   247b8:	10800a17 	ldw	r2,40(r2)
   247bc:	10800037 	ldwio	r2,0(r2)
   247c0:	e0bfff15 	stw	r2,-4(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   247c4:	e0bfff17 	ldw	r2,-4(fp)
   247c8:	1004d23a 	srli	r2,r2,8
   247cc:	1080004c 	andi	r2,r2,1
}
   247d0:	e037883a 	mov	sp,fp
   247d4:	df000017 	ldw	fp,0(sp)
   247d8:	dec00104 	addi	sp,sp,4
   247dc:	f800283a 	ret

000247e0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   247e0:	defffd04 	addi	sp,sp,-12
   247e4:	df000215 	stw	fp,8(sp)
   247e8:	df000204 	addi	fp,sp,8
   247ec:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   247f0:	e0bffe17 	ldw	r2,-8(fp)
   247f4:	10800a17 	ldw	r2,40(r2)
   247f8:	10800037 	ldwio	r2,0(r2)
   247fc:	e0bfff15 	stw	r2,-4(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   24800:	e0bfff17 	ldw	r2,-4(fp)
   24804:	1004d27a 	srli	r2,r2,9
   24808:	1080004c 	andi	r2,r2,1
}
   2480c:	e037883a 	mov	sp,fp
   24810:	df000017 	ldw	fp,0(sp)
   24814:	dec00104 	addi	sp,sp,4
   24818:	f800283a 	ret

0002481c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   2481c:	defffd04 	addi	sp,sp,-12
   24820:	df000215 	stw	fp,8(sp)
   24824:	df000204 	addi	fp,sp,8
   24828:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   2482c:	e0bffe17 	ldw	r2,-8(fp)
   24830:	10800a17 	ldw	r2,40(r2)
   24834:	10800037 	ldwio	r2,0(r2)
   24838:	e0bfff15 	stw	r2,-4(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   2483c:	e0bfff17 	ldw	r2,-4(fp)
   24840:	10800114 	ori	r2,r2,4
   24844:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   24848:	e0bfff17 	ldw	r2,-4(fp)
   2484c:	10800214 	ori	r2,r2,8
   24850:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24854:	e0bffe17 	ldw	r2,-8(fp)
   24858:	10800a17 	ldw	r2,40(r2)
   2485c:	1007883a 	mov	r3,r2
   24860:	e0bfff17 	ldw	r2,-4(fp)
   24864:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   24868:	e0ffff17 	ldw	r3,-4(fp)
   2486c:	00bffec4 	movi	r2,-5
   24870:	1884703a 	and	r2,r3,r2
   24874:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   24878:	e0ffff17 	ldw	r3,-4(fp)
   2487c:	00bffdc4 	movi	r2,-9
   24880:	1884703a 	and	r2,r3,r2
   24884:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24888:	e0bffe17 	ldw	r2,-8(fp)
   2488c:	10800a17 	ldw	r2,40(r2)
   24890:	1007883a 	mov	r3,r2
   24894:	e0bfff17 	ldw	r2,-4(fp)
   24898:	18800035 	stwio	r2,0(r3)
}
   2489c:	0001883a 	nop
   248a0:	e037883a 	mov	sp,fp
   248a4:	df000017 	ldw	fp,0(sp)
   248a8:	dec00104 	addi	sp,sp,4
   248ac:	f800283a 	ret

000248b0 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   248b0:	defffc04 	addi	sp,sp,-16
   248b4:	df000315 	stw	fp,12(sp)
   248b8:	df000304 	addi	fp,sp,12
   248bc:	e13ffe15 	stw	r4,-8(fp)
   248c0:	e17ffd15 	stw	r5,-12(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   248c4:	e0bffe17 	ldw	r2,-8(fp)
   248c8:	10800a17 	ldw	r2,40(r2)
   248cc:	10800104 	addi	r2,r2,4
   248d0:	10800037 	ldwio	r2,0(r2)
   248d4:	e0bfff15 	stw	r2,-4(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   248d8:	e0bffd17 	ldw	r2,-12(fp)
   248dc:	1000041e 	bne	r2,zero,248f0 <alt_up_audio_read_fifo_avail+0x40>
   248e0:	e0bfff17 	ldw	r2,-4(fp)
   248e4:	1004d23a 	srli	r2,r2,8
   248e8:	10803fcc 	andi	r2,r2,255
   248ec:	00000206 	br	248f8 <alt_up_audio_read_fifo_avail+0x48>
   248f0:	e0bfff17 	ldw	r2,-4(fp)
   248f4:	10803fcc 	andi	r2,r2,255
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   248f8:	e0bfff15 	stw	r2,-4(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   248fc:	e0bfff17 	ldw	r2,-4(fp)
}
   24900:	e037883a 	mov	sp,fp
   24904:	df000017 	ldw	fp,0(sp)
   24908:	dec00104 	addi	sp,sp,4
   2490c:	f800283a 	ret

00024910 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24910:	defffa04 	addi	sp,sp,-24
   24914:	dfc00515 	stw	ra,20(sp)
   24918:	df000415 	stw	fp,16(sp)
   2491c:	df000404 	addi	fp,sp,16
   24920:	e13ffe15 	stw	r4,-8(fp)
   24924:	e17ffd15 	stw	r5,-12(fp)
   24928:	e1bffc15 	stw	r6,-16(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   2492c:	01400044 	movi	r5,1
   24930:	e13ffe17 	ldw	r4,-8(fp)
   24934:	00248b00 	call	248b0 <alt_up_audio_read_fifo_avail>
   24938:	e0bfff15 	stw	r2,-4(fp)
	if (data_words <= BUF_THRESHOLD)
   2493c:	e0bfff17 	ldw	r2,-4(fp)
   24940:	10801868 	cmpgeui	r2,r2,97
   24944:	1000021e 	bne	r2,zero,24950 <alt_up_audio_record_r+0x40>
		return 0;
   24948:	0005883a 	mov	r2,zero
   2494c:	00000506 	br	24964 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   24950:	01c00044 	movi	r7,1
   24954:	e1bffc17 	ldw	r6,-16(fp)
   24958:	e17ffd17 	ldw	r5,-12(fp)
   2495c:	e13ffe17 	ldw	r4,-8(fp)
   24960:	0024b100 	call	24b10 <alt_up_audio_read_fifo>
}
   24964:	e037883a 	mov	sp,fp
   24968:	dfc00117 	ldw	ra,4(sp)
   2496c:	df000017 	ldw	fp,0(sp)
   24970:	dec00204 	addi	sp,sp,8
   24974:	f800283a 	ret

00024978 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24978:	defffa04 	addi	sp,sp,-24
   2497c:	dfc00515 	stw	ra,20(sp)
   24980:	df000415 	stw	fp,16(sp)
   24984:	df000404 	addi	fp,sp,16
   24988:	e13ffe15 	stw	r4,-8(fp)
   2498c:	e17ffd15 	stw	r5,-12(fp)
   24990:	e1bffc15 	stw	r6,-16(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   24994:	000b883a 	mov	r5,zero
   24998:	e13ffe17 	ldw	r4,-8(fp)
   2499c:	00248b00 	call	248b0 <alt_up_audio_read_fifo_avail>
   249a0:	e0bfff15 	stw	r2,-4(fp)
	if (data_words <= BUF_THRESHOLD)
   249a4:	e0bfff17 	ldw	r2,-4(fp)
   249a8:	10801868 	cmpgeui	r2,r2,97
   249ac:	1000021e 	bne	r2,zero,249b8 <alt_up_audio_record_l+0x40>
		return 0;
   249b0:	0005883a 	mov	r2,zero
   249b4:	00000506 	br	249cc <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   249b8:	000f883a 	mov	r7,zero
   249bc:	e1bffc17 	ldw	r6,-16(fp)
   249c0:	e17ffd17 	ldw	r5,-12(fp)
   249c4:	e13ffe17 	ldw	r4,-8(fp)
   249c8:	0024b100 	call	24b10 <alt_up_audio_read_fifo>
}
   249cc:	e037883a 	mov	sp,fp
   249d0:	dfc00117 	ldw	ra,4(sp)
   249d4:	df000017 	ldw	fp,0(sp)
   249d8:	dec00204 	addi	sp,sp,8
   249dc:	f800283a 	ret

000249e0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   249e0:	defffc04 	addi	sp,sp,-16
   249e4:	df000315 	stw	fp,12(sp)
   249e8:	df000304 	addi	fp,sp,12
   249ec:	e13ffe15 	stw	r4,-8(fp)
   249f0:	e17ffd15 	stw	r5,-12(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   249f4:	e0bffe17 	ldw	r2,-8(fp)
   249f8:	10800a17 	ldw	r2,40(r2)
   249fc:	10800104 	addi	r2,r2,4
   24a00:	10800037 	ldwio	r2,0(r2)
   24a04:	e0bfff15 	stw	r2,-4(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24a08:	e0bffd17 	ldw	r2,-12(fp)
   24a0c:	1000031e 	bne	r2,zero,24a1c <alt_up_audio_write_fifo_space+0x3c>
   24a10:	e0bfff17 	ldw	r2,-4(fp)
   24a14:	1004d63a 	srli	r2,r2,24
   24a18:	00000306 	br	24a28 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   24a1c:	e0bfff17 	ldw	r2,-4(fp)
   24a20:	1004d43a 	srli	r2,r2,16
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24a24:	10803fcc 	andi	r2,r2,255
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24a28:	e0bfff15 	stw	r2,-4(fp)
	return (fifospace);
   24a2c:	e0bfff17 	ldw	r2,-4(fp)
}
   24a30:	e037883a 	mov	sp,fp
   24a34:	df000017 	ldw	fp,0(sp)
   24a38:	dec00104 	addi	sp,sp,4
   24a3c:	f800283a 	ret

00024a40 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24a40:	defffa04 	addi	sp,sp,-24
   24a44:	dfc00515 	stw	ra,20(sp)
   24a48:	df000415 	stw	fp,16(sp)
   24a4c:	df000404 	addi	fp,sp,16
   24a50:	e13ffe15 	stw	r4,-8(fp)
   24a54:	e17ffd15 	stw	r5,-12(fp)
   24a58:	e1bffc15 	stw	r6,-16(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   24a5c:	01400044 	movi	r5,1
   24a60:	e13ffe17 	ldw	r4,-8(fp)
   24a64:	00249e00 	call	249e0 <alt_up_audio_write_fifo_space>
   24a68:	e0bfff15 	stw	r2,-4(fp)
	if (space <= BUF_THRESHOLD)
   24a6c:	e0bfff17 	ldw	r2,-4(fp)
   24a70:	10801868 	cmpgeui	r2,r2,97
   24a74:	1000021e 	bne	r2,zero,24a80 <alt_up_audio_play_r+0x40>
		return 0;
   24a78:	0005883a 	mov	r2,zero
   24a7c:	00000506 	br	24a94 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   24a80:	01c00044 	movi	r7,1
   24a84:	e1bffc17 	ldw	r6,-16(fp)
   24a88:	e17ffd17 	ldw	r5,-12(fp)
   24a8c:	e13ffe17 	ldw	r4,-8(fp)
   24a90:	0024bf00 	call	24bf0 <alt_up_audio_write_fifo>
}
   24a94:	e037883a 	mov	sp,fp
   24a98:	dfc00117 	ldw	ra,4(sp)
   24a9c:	df000017 	ldw	fp,0(sp)
   24aa0:	dec00204 	addi	sp,sp,8
   24aa4:	f800283a 	ret

00024aa8 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24aa8:	defffa04 	addi	sp,sp,-24
   24aac:	dfc00515 	stw	ra,20(sp)
   24ab0:	df000415 	stw	fp,16(sp)
   24ab4:	df000404 	addi	fp,sp,16
   24ab8:	e13ffe15 	stw	r4,-8(fp)
   24abc:	e17ffd15 	stw	r5,-12(fp)
   24ac0:	e1bffc15 	stw	r6,-16(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   24ac4:	000b883a 	mov	r5,zero
   24ac8:	e13ffe17 	ldw	r4,-8(fp)
   24acc:	00249e00 	call	249e0 <alt_up_audio_write_fifo_space>
   24ad0:	e0bfff15 	stw	r2,-4(fp)
	if (space <= BUF_THRESHOLD)
   24ad4:	e0bfff17 	ldw	r2,-4(fp)
   24ad8:	10801868 	cmpgeui	r2,r2,97
   24adc:	1000021e 	bne	r2,zero,24ae8 <alt_up_audio_play_l+0x40>
		return 0;
   24ae0:	0005883a 	mov	r2,zero
   24ae4:	00000506 	br	24afc <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   24ae8:	000f883a 	mov	r7,zero
   24aec:	e1bffc17 	ldw	r6,-16(fp)
   24af0:	e17ffd17 	ldw	r5,-12(fp)
   24af4:	e13ffe17 	ldw	r4,-8(fp)
   24af8:	0024bf00 	call	24bf0 <alt_up_audio_write_fifo>
}
   24afc:	e037883a 	mov	sp,fp
   24b00:	dfc00117 	ldw	ra,4(sp)
   24b04:	df000017 	ldw	fp,0(sp)
   24b08:	dec00204 	addi	sp,sp,8
   24b0c:	f800283a 	ret

00024b10 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   24b10:	defff904 	addi	sp,sp,-28
   24b14:	df000615 	stw	fp,24(sp)
   24b18:	df000604 	addi	fp,sp,24
   24b1c:	e13ffd15 	stw	r4,-12(fp)
   24b20:	e17ffc15 	stw	r5,-16(fp)
   24b24:	e1bffb15 	stw	r6,-20(fp)
   24b28:	e1fffa15 	stw	r7,-24(fp)
	unsigned int fifospace;
	int count = 0;
   24b2c:	e03fff15 	stw	zero,-4(fp)
	while ( count < len ) 
   24b30:	00002506 	br	24bc8 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   24b34:	e0bffd17 	ldw	r2,-12(fp)
   24b38:	10800a17 	ldw	r2,40(r2)
   24b3c:	10800104 	addi	r2,r2,4
   24b40:	10800037 	ldwio	r2,0(r2)
   24b44:	e0bffe15 	stw	r2,-8(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   24b48:	e0bffa17 	ldw	r2,-24(fp)
   24b4c:	1000041e 	bne	r2,zero,24b60 <alt_up_audio_read_fifo+0x50>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   24b50:	e0bffe17 	ldw	r2,-8(fp)
   24b54:	1004d23a 	srli	r2,r2,8
			:
   24b58:	10803fcc 	andi	r2,r2,255
   24b5c:	00000206 	br	24b68 <alt_up_audio_read_fifo+0x58>
   24b60:	e0bffe17 	ldw	r2,-8(fp)
   24b64:	10803fcc 	andi	r2,r2,255
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24b68:	e0bffe15 	stw	r2,-8(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   24b6c:	e0bffe17 	ldw	r2,-8(fp)
   24b70:	10001926 	beq	r2,zero,24bd8 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   24b74:	e0bffa17 	ldw	r2,-24(fp)
   24b78:	1000061e 	bne	r2,zero,24b94 <alt_up_audio_read_fifo+0x84>
   24b7c:	e0bffd17 	ldw	r2,-12(fp)
   24b80:	10800a17 	ldw	r2,40(r2)
   24b84:	10800204 	addi	r2,r2,8
   24b88:	10800037 	ldwio	r2,0(r2)
   24b8c:	1009883a 	mov	r4,r2
   24b90:	00000506 	br	24ba8 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   24b94:	e0bffd17 	ldw	r2,-12(fp)
   24b98:	10800a17 	ldw	r2,40(r2)
   24b9c:	10800304 	addi	r2,r2,12
   24ba0:	10800037 	ldwio	r2,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   24ba4:	1009883a 	mov	r4,r2
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   24ba8:	e0bfff17 	ldw	r2,-4(fp)
   24bac:	100490ba 	slli	r2,r2,2
   24bb0:	e0fffc17 	ldw	r3,-16(fp)
   24bb4:	1885883a 	add	r2,r3,r2
   24bb8:	11000015 	stw	r4,0(r2)
			count ++;
   24bbc:	e0bfff17 	ldw	r2,-4(fp)
   24bc0:	10800044 	addi	r2,r2,1
   24bc4:	e0bfff15 	stw	r2,-4(fp)
	while ( count < len ) 
   24bc8:	e0ffff17 	ldw	r3,-4(fp)
   24bcc:	e0bffb17 	ldw	r2,-20(fp)
   24bd0:	18bfd816 	blt	r3,r2,24b34 <alt_up_audio_read_fifo+0x24>
   24bd4:	00000106 	br	24bdc <alt_up_audio_read_fifo+0xcc>
		}
		else
		{
			// no more data to read
			break;
   24bd8:	0001883a 	nop
		}
	}
	return count;
   24bdc:	e0bfff17 	ldw	r2,-4(fp)
}
   24be0:	e037883a 	mov	sp,fp
   24be4:	df000017 	ldw	fp,0(sp)
   24be8:	dec00104 	addi	sp,sp,4
   24bec:	f800283a 	ret

00024bf0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   24bf0:	defff904 	addi	sp,sp,-28
   24bf4:	df000615 	stw	fp,24(sp)
   24bf8:	df000604 	addi	fp,sp,24
   24bfc:	e13ffd15 	stw	r4,-12(fp)
   24c00:	e17ffc15 	stw	r5,-16(fp)
   24c04:	e1bffb15 	stw	r6,-20(fp)
   24c08:	e1fffa15 	stw	r7,-24(fp)
	unsigned int fifospace;
	int count = 0;
   24c0c:	e03fff15 	stw	zero,-4(fp)
	while ( count < len ) 
   24c10:	00002b06 	br	24cc0 <alt_up_audio_write_fifo+0xd0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   24c14:	e0bffd17 	ldw	r2,-12(fp)
   24c18:	10800a17 	ldw	r2,40(r2)
   24c1c:	10800104 	addi	r2,r2,4
   24c20:	10800037 	ldwio	r2,0(r2)
   24c24:	e0bffe15 	stw	r2,-8(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24c28:	e0bffa17 	ldw	r2,-24(fp)
   24c2c:	1000031e 	bne	r2,zero,24c3c <alt_up_audio_write_fifo+0x4c>
   24c30:	e0bffe17 	ldw	r2,-8(fp)
   24c34:	1004d63a 	srli	r2,r2,24
   24c38:	00000306 	br	24c48 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   24c3c:	e0bffe17 	ldw	r2,-8(fp)
   24c40:	1004d43a 	srli	r2,r2,16
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24c44:	10803fcc 	andi	r2,r2,255
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24c48:	e0bffe15 	stw	r2,-8(fp)
		if (fifospace > 0) 
   24c4c:	e0bffe17 	ldw	r2,-8(fp)
   24c50:	10001f26 	beq	r2,zero,24cd0 <alt_up_audio_write_fifo+0xe0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   24c54:	e0bffa17 	ldw	r2,-24(fp)
   24c58:	10000d1e 	bne	r2,zero,24c90 <alt_up_audio_write_fifo+0xa0>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   24c5c:	e0bffd17 	ldw	r2,-12(fp)
   24c60:	10800a17 	ldw	r2,40(r2)
   24c64:	10800204 	addi	r2,r2,8
   24c68:	1009883a 	mov	r4,r2
   24c6c:	e0bfff17 	ldw	r2,-4(fp)
   24c70:	10c00044 	addi	r3,r2,1
   24c74:	e0ffff15 	stw	r3,-4(fp)
   24c78:	100490ba 	slli	r2,r2,2
   24c7c:	e0fffc17 	ldw	r3,-16(fp)
   24c80:	1885883a 	add	r2,r3,r2
   24c84:	10800017 	ldw	r2,0(r2)
   24c88:	20800035 	stwio	r2,0(r4)
   24c8c:	00000c06 	br	24cc0 <alt_up_audio_write_fifo+0xd0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   24c90:	e0bffd17 	ldw	r2,-12(fp)
   24c94:	10800a17 	ldw	r2,40(r2)
   24c98:	10800304 	addi	r2,r2,12
   24c9c:	1009883a 	mov	r4,r2
   24ca0:	e0bfff17 	ldw	r2,-4(fp)
   24ca4:	10c00044 	addi	r3,r2,1
   24ca8:	e0ffff15 	stw	r3,-4(fp)
   24cac:	100490ba 	slli	r2,r2,2
   24cb0:	e0fffc17 	ldw	r3,-16(fp)
   24cb4:	1885883a 	add	r2,r3,r2
   24cb8:	10800017 	ldw	r2,0(r2)
   24cbc:	20800035 	stwio	r2,0(r4)
	while ( count < len ) 
   24cc0:	e0ffff17 	ldw	r3,-4(fp)
   24cc4:	e0bffb17 	ldw	r2,-20(fp)
   24cc8:	18bfd216 	blt	r3,r2,24c14 <alt_up_audio_write_fifo+0x24>
   24ccc:	00000106 	br	24cd4 <alt_up_audio_write_fifo+0xe4>
		}
		else
		{
			// no more space to write
			break;
   24cd0:	0001883a 	nop
		}
	}
	return count;
   24cd4:	e0bfff17 	ldw	r2,-4(fp)
}
   24cd8:	e037883a 	mov	sp,fp
   24cdc:	df000017 	ldw	fp,0(sp)
   24ce0:	dec00104 	addi	sp,sp,4
   24ce4:	f800283a 	ret

00024ce8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   24ce8:	defffd04 	addi	sp,sp,-12
   24cec:	df000215 	stw	fp,8(sp)
   24cf0:	df000204 	addi	fp,sp,8
   24cf4:	e13fff15 	stw	r4,-4(fp)
   24cf8:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   24cfc:	e0bffe17 	ldw	r2,-8(fp)
   24d00:	1000051e 	bne	r2,zero,24d18 <alt_up_audio_read_fifo_head+0x30>
   24d04:	e0bfff17 	ldw	r2,-4(fp)
   24d08:	10800a17 	ldw	r2,40(r2)
   24d0c:	10800204 	addi	r2,r2,8
   24d10:	10800037 	ldwio	r2,0(r2)
   24d14:	00000406 	br	24d28 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   24d18:	e0bfff17 	ldw	r2,-4(fp)
   24d1c:	10800a17 	ldw	r2,40(r2)
   24d20:	10800304 	addi	r2,r2,12
   24d24:	10800037 	ldwio	r2,0(r2)
}
   24d28:	e037883a 	mov	sp,fp
   24d2c:	df000017 	ldw	fp,0(sp)
   24d30:	dec00104 	addi	sp,sp,4
   24d34:	f800283a 	ret

00024d38 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   24d38:	defffc04 	addi	sp,sp,-16
   24d3c:	df000315 	stw	fp,12(sp)
   24d40:	df000304 	addi	fp,sp,12
   24d44:	e13fff15 	stw	r4,-4(fp)
   24d48:	e17ffe15 	stw	r5,-8(fp)
   24d4c:	e1bffd15 	stw	r6,-12(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   24d50:	e0bffd17 	ldw	r2,-12(fp)
   24d54:	1000071e 	bne	r2,zero,24d74 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   24d58:	e0bfff17 	ldw	r2,-4(fp)
   24d5c:	10800a17 	ldw	r2,40(r2)
   24d60:	10800204 	addi	r2,r2,8
   24d64:	1007883a 	mov	r3,r2
   24d68:	e0bffe17 	ldw	r2,-8(fp)
   24d6c:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
   24d70:	00000606 	br	24d8c <alt_up_audio_write_fifo_head+0x54>
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   24d74:	e0bfff17 	ldw	r2,-4(fp)
   24d78:	10800a17 	ldw	r2,40(r2)
   24d7c:	10800304 	addi	r2,r2,12
   24d80:	1007883a 	mov	r3,r2
   24d84:	e0bffe17 	ldw	r2,-8(fp)
   24d88:	18800035 	stwio	r2,0(r3)
}
   24d8c:	0001883a 	nop
   24d90:	e037883a 	mov	sp,fp
   24d94:	df000017 	ldw	fp,0(sp)
   24d98:	dec00104 	addi	sp,sp,4
   24d9c:	f800283a 	ret

00024da0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24da0:	defff404 	addi	sp,sp,-48
   24da4:	df000b15 	stw	fp,44(sp)
   24da8:	df000b04 	addi	fp,sp,44
   24dac:	e13ff815 	stw	r4,-32(fp)
   24db0:	e17ff715 	stw	r5,-36(fp)
   24db4:	e1bff615 	stw	r6,-40(fp)
   24db8:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   24dbc:	e03ffe15 	stw	zero,-8(fp)
   24dc0:	e03fff15 	stw	zero,-4(fp)
   24dc4:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
   24dc8:	10004826 	beq	r2,zero,24eec <alt_alarm_start+0x14c>
  {
    if (alarm)
   24dcc:	e0bff817 	ldw	r2,-32(fp)
   24dd0:	10004426 	beq	r2,zero,24ee4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   24dd4:	e0bff817 	ldw	r2,-32(fp)
   24dd8:	e0fff617 	ldw	r3,-40(fp)
   24ddc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   24de0:	e0bff817 	ldw	r2,-32(fp)
   24de4:	e0fff517 	ldw	r3,-44(fp)
   24de8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   24dec:	0005303a 	rdctl	r2,status
   24df0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24df4:	e0fff917 	ldw	r3,-28(fp)
   24df8:	00bfff84 	movi	r2,-2
   24dfc:	1884703a 	and	r2,r3,r2
   24e00:	1001703a 	wrctl	status,r2
  return context;
   24e04:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24e08:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24e0c:	d0a6be17 	ldw	r2,-25864(gp)
   24e10:	d0e6bf17 	ldw	r3,-25860(gp)
      
      current_nticks = alt_nticks();
   24e14:	e0bffe15 	stw	r2,-8(fp)
   24e18:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   24e1c:	e0bff717 	ldw	r2,-36(fp)
   24e20:	1011883a 	mov	r8,r2
   24e24:	0013883a 	mov	r9,zero
   24e28:	e13ffe17 	ldw	r4,-8(fp)
   24e2c:	e17fff17 	ldw	r5,-4(fp)
   24e30:	4105883a 	add	r2,r8,r4
   24e34:	120d803a 	cmpltu	r6,r2,r8
   24e38:	4947883a 	add	r3,r9,r5
   24e3c:	30c9883a 	add	r4,r6,r3
   24e40:	2007883a 	mov	r3,r4
   24e44:	1009883a 	mov	r4,r2
   24e48:	180b883a 	mov	r5,r3
   24e4c:	01800044 	movi	r6,1
   24e50:	000f883a 	mov	r7,zero
   24e54:	2185883a 	add	r2,r4,r6
   24e58:	1111803a 	cmpltu	r8,r2,r4
   24e5c:	29c7883a 	add	r3,r5,r7
   24e60:	40c9883a 	add	r4,r8,r3
   24e64:	2007883a 	mov	r3,r4
   24e68:	1009883a 	mov	r4,r2
   24e6c:	180b883a 	mov	r5,r3
   24e70:	e0bff817 	ldw	r2,-32(fp)
   24e74:	11000215 	stw	r4,8(r2)
   24e78:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24e7c:	e0bff817 	ldw	r2,-32(fp)
   24e80:	d0e00c04 	addi	r3,gp,-32720
   24e84:	e0fffb15 	stw	r3,-20(fp)
   24e88:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24e8c:	e0bffa17 	ldw	r2,-24(fp)
   24e90:	e0fffb17 	ldw	r3,-20(fp)
   24e94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24e98:	e0bffb17 	ldw	r2,-20(fp)
   24e9c:	10c00017 	ldw	r3,0(r2)
   24ea0:	e0bffa17 	ldw	r2,-24(fp)
   24ea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24ea8:	e0bffb17 	ldw	r2,-20(fp)
   24eac:	10800017 	ldw	r2,0(r2)
   24eb0:	e0fffa17 	ldw	r3,-24(fp)
   24eb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24eb8:	e0bffb17 	ldw	r2,-20(fp)
   24ebc:	e0fffa17 	ldw	r3,-24(fp)
   24ec0:	10c00015 	stw	r3,0(r2)
}
   24ec4:	0001883a 	nop
   24ec8:	e0bffd17 	ldw	r2,-12(fp)
   24ecc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24ed0:	e0bffc17 	ldw	r2,-16(fp)
   24ed4:	1001703a 	wrctl	status,r2
}
   24ed8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   24edc:	0005883a 	mov	r2,zero
   24ee0:	00000306 	br	24ef0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   24ee4:	00bffa84 	movi	r2,-22
   24ee8:	00000106 	br	24ef0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   24eec:	00bfde84 	movi	r2,-134
  }
}
   24ef0:	e037883a 	mov	sp,fp
   24ef4:	df000017 	ldw	fp,0(sp)
   24ef8:	dec00104 	addi	sp,sp,4
   24efc:	f800283a 	ret

00024f00 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24f00:	deffff04 	addi	sp,sp,-4
   24f04:	df000015 	stw	fp,0(sp)
   24f08:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24f0c:	0001883a 	nop
   24f10:	e037883a 	mov	sp,fp
   24f14:	df000017 	ldw	fp,0(sp)
   24f18:	dec00104 	addi	sp,sp,4
   24f1c:	f800283a 	ret

00024f20 <alt_get_errno>:
{
   24f20:	defffe04 	addi	sp,sp,-8
   24f24:	dfc00115 	stw	ra,4(sp)
   24f28:	df000015 	stw	fp,0(sp)
   24f2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24f30:	d0a00917 	ldw	r2,-32732(gp)
   24f34:	10000326 	beq	r2,zero,24f44 <alt_get_errno+0x24>
   24f38:	d0a00917 	ldw	r2,-32732(gp)
   24f3c:	103ee83a 	callr	r2
   24f40:	00000106 	br	24f48 <alt_get_errno+0x28>
   24f44:	d0a6b804 	addi	r2,gp,-25888
}
   24f48:	e037883a 	mov	sp,fp
   24f4c:	dfc00117 	ldw	ra,4(sp)
   24f50:	df000017 	ldw	fp,0(sp)
   24f54:	dec00204 	addi	sp,sp,8
   24f58:	f800283a 	ret

00024f5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24f5c:	defffa04 	addi	sp,sp,-24
   24f60:	dfc00515 	stw	ra,20(sp)
   24f64:	df000415 	stw	fp,16(sp)
   24f68:	df000404 	addi	fp,sp,16
   24f6c:	e13ffd15 	stw	r4,-12(fp)
   24f70:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24f74:	e0bffd17 	ldw	r2,-12(fp)
   24f78:	10000326 	beq	r2,zero,24f88 <alt_dev_llist_insert+0x2c>
   24f7c:	e0bffd17 	ldw	r2,-12(fp)
   24f80:	10800217 	ldw	r2,8(r2)
   24f84:	1000061e 	bne	r2,zero,24fa0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24f88:	0024f200 	call	24f20 <alt_get_errno>
   24f8c:	1007883a 	mov	r3,r2
   24f90:	00800584 	movi	r2,22
   24f94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24f98:	00bffa84 	movi	r2,-22
   24f9c:	00001406 	br	24ff0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24fa0:	e0bffd17 	ldw	r2,-12(fp)
   24fa4:	e0fffc17 	ldw	r3,-16(fp)
   24fa8:	e0ffff15 	stw	r3,-4(fp)
   24fac:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   24fb0:	e0bffe17 	ldw	r2,-8(fp)
   24fb4:	e0ffff17 	ldw	r3,-4(fp)
   24fb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24fbc:	e0bfff17 	ldw	r2,-4(fp)
   24fc0:	10c00017 	ldw	r3,0(r2)
   24fc4:	e0bffe17 	ldw	r2,-8(fp)
   24fc8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   24fcc:	e0bfff17 	ldw	r2,-4(fp)
   24fd0:	10800017 	ldw	r2,0(r2)
   24fd4:	e0fffe17 	ldw	r3,-8(fp)
   24fd8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24fdc:	e0bfff17 	ldw	r2,-4(fp)
   24fe0:	e0fffe17 	ldw	r3,-8(fp)
   24fe4:	10c00015 	stw	r3,0(r2)
}
   24fe8:	0001883a 	nop

  return 0;  
   24fec:	0005883a 	mov	r2,zero
}
   24ff0:	e037883a 	mov	sp,fp
   24ff4:	dfc00117 	ldw	ra,4(sp)
   24ff8:	df000017 	ldw	fp,0(sp)
   24ffc:	dec00204 	addi	sp,sp,8
   25000:	f800283a 	ret

00025004 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   25004:	defffd04 	addi	sp,sp,-12
   25008:	dfc00215 	stw	ra,8(sp)
   2500c:	df000115 	stw	fp,4(sp)
   25010:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25014:	008000b4 	movhi	r2,2
   25018:	10976d04 	addi	r2,r2,23988
   2501c:	e0bfff15 	stw	r2,-4(fp)
   25020:	00000606 	br	2503c <_do_ctors+0x38>
        (*ctor) (); 
   25024:	e0bfff17 	ldw	r2,-4(fp)
   25028:	10800017 	ldw	r2,0(r2)
   2502c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25030:	e0bfff17 	ldw	r2,-4(fp)
   25034:	10bfff04 	addi	r2,r2,-4
   25038:	e0bfff15 	stw	r2,-4(fp)
   2503c:	e0ffff17 	ldw	r3,-4(fp)
   25040:	008000b4 	movhi	r2,2
   25044:	10976e04 	addi	r2,r2,23992
   25048:	18bff62e 	bgeu	r3,r2,25024 <_do_ctors+0x20>
}
   2504c:	0001883a 	nop
   25050:	0001883a 	nop
   25054:	e037883a 	mov	sp,fp
   25058:	dfc00117 	ldw	ra,4(sp)
   2505c:	df000017 	ldw	fp,0(sp)
   25060:	dec00204 	addi	sp,sp,8
   25064:	f800283a 	ret

00025068 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25068:	defffd04 	addi	sp,sp,-12
   2506c:	dfc00215 	stw	ra,8(sp)
   25070:	df000115 	stw	fp,4(sp)
   25074:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25078:	008000b4 	movhi	r2,2
   2507c:	10976d04 	addi	r2,r2,23988
   25080:	e0bfff15 	stw	r2,-4(fp)
   25084:	00000606 	br	250a0 <_do_dtors+0x38>
        (*dtor) (); 
   25088:	e0bfff17 	ldw	r2,-4(fp)
   2508c:	10800017 	ldw	r2,0(r2)
   25090:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25094:	e0bfff17 	ldw	r2,-4(fp)
   25098:	10bfff04 	addi	r2,r2,-4
   2509c:	e0bfff15 	stw	r2,-4(fp)
   250a0:	e0ffff17 	ldw	r3,-4(fp)
   250a4:	008000b4 	movhi	r2,2
   250a8:	10976e04 	addi	r2,r2,23992
   250ac:	18bff62e 	bgeu	r3,r2,25088 <_do_dtors+0x20>
}
   250b0:	0001883a 	nop
   250b4:	0001883a 	nop
   250b8:	e037883a 	mov	sp,fp
   250bc:	dfc00117 	ldw	ra,4(sp)
   250c0:	df000017 	ldw	fp,0(sp)
   250c4:	dec00204 	addi	sp,sp,8
   250c8:	f800283a 	ret

000250cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   250cc:	defffa04 	addi	sp,sp,-24
   250d0:	dfc00515 	stw	ra,20(sp)
   250d4:	df000415 	stw	fp,16(sp)
   250d8:	df000404 	addi	fp,sp,16
   250dc:	e13ffd15 	stw	r4,-12(fp)
   250e0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   250e4:	e0bffc17 	ldw	r2,-16(fp)
   250e8:	10800017 	ldw	r2,0(r2)
   250ec:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   250f0:	e13ffd17 	ldw	r4,-12(fp)
   250f4:	00204000 	call	20400 <strlen>
   250f8:	10800044 	addi	r2,r2,1
   250fc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25100:	00000d06 	br	25138 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25104:	e0bfff17 	ldw	r2,-4(fp)
   25108:	10800217 	ldw	r2,8(r2)
   2510c:	e0fffe17 	ldw	r3,-8(fp)
   25110:	180d883a 	mov	r6,r3
   25114:	e17ffd17 	ldw	r5,-12(fp)
   25118:	1009883a 	mov	r4,r2
   2511c:	0025b580 	call	25b58 <memcmp>
   25120:	1000021e 	bne	r2,zero,2512c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25124:	e0bfff17 	ldw	r2,-4(fp)
   25128:	00000706 	br	25148 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2512c:	e0bfff17 	ldw	r2,-4(fp)
   25130:	10800017 	ldw	r2,0(r2)
   25134:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   25138:	e0ffff17 	ldw	r3,-4(fp)
   2513c:	e0bffc17 	ldw	r2,-16(fp)
   25140:	18bff01e 	bne	r3,r2,25104 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   25144:	0005883a 	mov	r2,zero
}
   25148:	e037883a 	mov	sp,fp
   2514c:	dfc00117 	ldw	ra,4(sp)
   25150:	df000017 	ldw	fp,0(sp)
   25154:	dec00204 	addi	sp,sp,8
   25158:	f800283a 	ret

0002515c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2515c:	deffff04 	addi	sp,sp,-4
   25160:	df000015 	stw	fp,0(sp)
   25164:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   25168:	0001883a 	nop
   2516c:	e037883a 	mov	sp,fp
   25170:	df000017 	ldw	fp,0(sp)
   25174:	dec00104 	addi	sp,sp,4
   25178:	f800283a 	ret

0002517c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2517c:	defff904 	addi	sp,sp,-28
   25180:	dfc00615 	stw	ra,24(sp)
   25184:	df000515 	stw	fp,20(sp)
   25188:	df000504 	addi	fp,sp,20
   2518c:	e13ffe15 	stw	r4,-8(fp)
   25190:	e17ffd15 	stw	r5,-12(fp)
   25194:	e1bffc15 	stw	r6,-16(fp)
   25198:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   2519c:	e1bffb17 	ldw	r6,-20(fp)
   251a0:	e17ffc17 	ldw	r5,-16(fp)
   251a4:	e13ffd17 	ldw	r4,-12(fp)
   251a8:	00255640 	call	25564 <open>
   251ac:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   251b0:	e0bfff17 	ldw	r2,-4(fp)
   251b4:	10002016 	blt	r2,zero,25238 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   251b8:	e0ffff17 	ldw	r3,-4(fp)
   251bc:	1805883a 	mov	r2,r3
   251c0:	1085883a 	add	r2,r2,r2
   251c4:	10c5883a 	add	r2,r2,r3
   251c8:	100490ba 	slli	r2,r2,2
   251cc:	00c000b4 	movhi	r3,2
   251d0:	10c7883a 	add	r3,r2,r3
   251d4:	18d9a417 	ldw	r3,26256(r3)
   251d8:	e0bffe17 	ldw	r2,-8(fp)
   251dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   251e0:	e0ffff17 	ldw	r3,-4(fp)
   251e4:	1805883a 	mov	r2,r3
   251e8:	1085883a 	add	r2,r2,r2
   251ec:	10c5883a 	add	r2,r2,r3
   251f0:	100490ba 	slli	r2,r2,2
   251f4:	00c000b4 	movhi	r3,2
   251f8:	10c7883a 	add	r3,r2,r3
   251fc:	18d9a517 	ldw	r3,26260(r3)
   25200:	e0bffe17 	ldw	r2,-8(fp)
   25204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25208:	e0ffff17 	ldw	r3,-4(fp)
   2520c:	1805883a 	mov	r2,r3
   25210:	1085883a 	add	r2,r2,r2
   25214:	10c5883a 	add	r2,r2,r3
   25218:	100490ba 	slli	r2,r2,2
   2521c:	00c000b4 	movhi	r3,2
   25220:	10c7883a 	add	r3,r2,r3
   25224:	18d9a617 	ldw	r3,26264(r3)
   25228:	e0bffe17 	ldw	r2,-8(fp)
   2522c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25230:	e13fff17 	ldw	r4,-4(fp)
   25234:	00238780 	call	23878 <alt_release_fd>
  }
} 
   25238:	0001883a 	nop
   2523c:	e037883a 	mov	sp,fp
   25240:	dfc00117 	ldw	ra,4(sp)
   25244:	df000017 	ldw	fp,0(sp)
   25248:	dec00204 	addi	sp,sp,8
   2524c:	f800283a 	ret

00025250 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25250:	defffb04 	addi	sp,sp,-20
   25254:	dfc00415 	stw	ra,16(sp)
   25258:	df000315 	stw	fp,12(sp)
   2525c:	df000304 	addi	fp,sp,12
   25260:	e13fff15 	stw	r4,-4(fp)
   25264:	e17ffe15 	stw	r5,-8(fp)
   25268:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2526c:	01c07fc4 	movi	r7,511
   25270:	01800044 	movi	r6,1
   25274:	e17fff17 	ldw	r5,-4(fp)
   25278:	010000b4 	movhi	r4,2
   2527c:	2119a704 	addi	r4,r4,26268
   25280:	002517c0 	call	2517c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   25284:	01c07fc4 	movi	r7,511
   25288:	000d883a 	mov	r6,zero
   2528c:	e17ffe17 	ldw	r5,-8(fp)
   25290:	010000b4 	movhi	r4,2
   25294:	2119a404 	addi	r4,r4,26256
   25298:	002517c0 	call	2517c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2529c:	01c07fc4 	movi	r7,511
   252a0:	01800044 	movi	r6,1
   252a4:	e17ffd17 	ldw	r5,-12(fp)
   252a8:	010000b4 	movhi	r4,2
   252ac:	2119aa04 	addi	r4,r4,26280
   252b0:	002517c0 	call	2517c <alt_open_fd>
}  
   252b4:	0001883a 	nop
   252b8:	e037883a 	mov	sp,fp
   252bc:	dfc00117 	ldw	ra,4(sp)
   252c0:	df000017 	ldw	fp,0(sp)
   252c4:	dec00204 	addi	sp,sp,8
   252c8:	f800283a 	ret

000252cc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   252cc:	defff004 	addi	sp,sp,-64
   252d0:	df000f15 	stw	fp,60(sp)
   252d4:	df000f04 	addi	fp,sp,60
   252d8:	e13ff315 	stw	r4,-52(fp)
   252dc:	e17ff215 	stw	r5,-56(fp)
   252e0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   252e4:	00bffa84 	movi	r2,-22
   252e8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   252ec:	e0bff317 	ldw	r2,-52(fp)
   252f0:	10800828 	cmpgeui	r2,r2,32
   252f4:	1000501e 	bne	r2,zero,25438 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   252f8:	0005303a 	rdctl	r2,status
   252fc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25300:	e0fffd17 	ldw	r3,-12(fp)
   25304:	00bfff84 	movi	r2,-2
   25308:	1884703a 	and	r2,r3,r2
   2530c:	1001703a 	wrctl	status,r2
  return context;
   25310:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   25314:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   25318:	e0bff317 	ldw	r2,-52(fp)
   2531c:	100890fa 	slli	r4,r2,3
   25320:	e0fff117 	ldw	r3,-60(fp)
   25324:	008000f4 	movhi	r2,3
   25328:	2085883a 	add	r2,r4,r2
   2532c:	10e4f315 	stw	r3,-27700(r2)
    alt_irq[id].context = context;
   25330:	e0bff317 	ldw	r2,-52(fp)
   25334:	100890fa 	slli	r4,r2,3
   25338:	e0fff217 	ldw	r3,-56(fp)
   2533c:	008000f4 	movhi	r2,3
   25340:	2085883a 	add	r2,r4,r2
   25344:	10e4f415 	stw	r3,-27696(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   25348:	e0bff117 	ldw	r2,-60(fp)
   2534c:	10001a26 	beq	r2,zero,253b8 <alt_irq_register+0xec>
   25350:	e0bff317 	ldw	r2,-52(fp)
   25354:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   25358:	0005303a 	rdctl	r2,status
   2535c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25360:	e0fffb17 	ldw	r3,-20(fp)
   25364:	00bfff84 	movi	r2,-2
   25368:	1884703a 	and	r2,r3,r2
   2536c:	1001703a 	wrctl	status,r2
  return context;
   25370:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25374:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   25378:	00c00044 	movi	r3,1
   2537c:	e0bffc17 	ldw	r2,-16(fp)
   25380:	1884983a 	sll	r2,r3,r2
   25384:	1007883a 	mov	r3,r2
   25388:	d0a6bc17 	ldw	r2,-25872(gp)
   2538c:	1884b03a 	or	r2,r3,r2
   25390:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25394:	d0a6bc17 	ldw	r2,-25872(gp)
   25398:	100170fa 	wrctl	ienable,r2
   2539c:	e0bffa17 	ldw	r2,-24(fp)
   253a0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   253a4:	e0bff917 	ldw	r2,-28(fp)
   253a8:	1001703a 	wrctl	status,r2
}
   253ac:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   253b0:	0005883a 	mov	r2,zero
   253b4:	00001a06 	br	25420 <alt_irq_register+0x154>
   253b8:	e0bff317 	ldw	r2,-52(fp)
   253bc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   253c0:	0005303a 	rdctl	r2,status
   253c4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   253c8:	e0fff717 	ldw	r3,-36(fp)
   253cc:	00bfff84 	movi	r2,-2
   253d0:	1884703a 	and	r2,r3,r2
   253d4:	1001703a 	wrctl	status,r2
  return context;
   253d8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   253dc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   253e0:	00c00044 	movi	r3,1
   253e4:	e0bff817 	ldw	r2,-32(fp)
   253e8:	1884983a 	sll	r2,r3,r2
   253ec:	0084303a 	nor	r2,zero,r2
   253f0:	1007883a 	mov	r3,r2
   253f4:	d0a6bc17 	ldw	r2,-25872(gp)
   253f8:	1884703a 	and	r2,r3,r2
   253fc:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25400:	d0a6bc17 	ldw	r2,-25872(gp)
   25404:	100170fa 	wrctl	ienable,r2
   25408:	e0bff617 	ldw	r2,-40(fp)
   2540c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   25410:	e0bff517 	ldw	r2,-44(fp)
   25414:	1001703a 	wrctl	status,r2
}
   25418:	0001883a 	nop
  return 0;
   2541c:	0005883a 	mov	r2,zero
   25420:	e0bfff15 	stw	r2,-4(fp)
   25424:	e0bffe17 	ldw	r2,-8(fp)
   25428:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   2542c:	e0bff417 	ldw	r2,-48(fp)
   25430:	1001703a 	wrctl	status,r2
}
   25434:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   25438:	e0bfff17 	ldw	r2,-4(fp)
}
   2543c:	e037883a 	mov	sp,fp
   25440:	df000017 	ldw	fp,0(sp)
   25444:	dec00104 	addi	sp,sp,4
   25448:	f800283a 	ret

0002544c <alt_get_errno>:
{
   2544c:	defffe04 	addi	sp,sp,-8
   25450:	dfc00115 	stw	ra,4(sp)
   25454:	df000015 	stw	fp,0(sp)
   25458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2545c:	d0a00917 	ldw	r2,-32732(gp)
   25460:	10000326 	beq	r2,zero,25470 <alt_get_errno+0x24>
   25464:	d0a00917 	ldw	r2,-32732(gp)
   25468:	103ee83a 	callr	r2
   2546c:	00000106 	br	25474 <alt_get_errno+0x28>
   25470:	d0a6b804 	addi	r2,gp,-25888
}
   25474:	e037883a 	mov	sp,fp
   25478:	dfc00117 	ldw	ra,4(sp)
   2547c:	df000017 	ldw	fp,0(sp)
   25480:	dec00204 	addi	sp,sp,8
   25484:	f800283a 	ret

00025488 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25488:	defffd04 	addi	sp,sp,-12
   2548c:	df000215 	stw	fp,8(sp)
   25490:	df000204 	addi	fp,sp,8
   25494:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   25498:	e0bffe17 	ldw	r2,-8(fp)
   2549c:	10800217 	ldw	r2,8(r2)
   254a0:	10d00034 	orhi	r3,r2,16384
   254a4:	e0bffe17 	ldw	r2,-8(fp)
   254a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   254ac:	e03fff15 	stw	zero,-4(fp)
   254b0:	00002306 	br	25540 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   254b4:	e0ffff17 	ldw	r3,-4(fp)
   254b8:	1805883a 	mov	r2,r3
   254bc:	1085883a 	add	r2,r2,r2
   254c0:	10c5883a 	add	r2,r2,r3
   254c4:	100490ba 	slli	r2,r2,2
   254c8:	00c000b4 	movhi	r3,2
   254cc:	10c7883a 	add	r3,r2,r3
   254d0:	18d9a417 	ldw	r3,26256(r3)
   254d4:	e0bffe17 	ldw	r2,-8(fp)
   254d8:	10800017 	ldw	r2,0(r2)
   254dc:	1880151e 	bne	r3,r2,25534 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   254e0:	e0ffff17 	ldw	r3,-4(fp)
   254e4:	1805883a 	mov	r2,r3
   254e8:	1085883a 	add	r2,r2,r2
   254ec:	10c5883a 	add	r2,r2,r3
   254f0:	100490ba 	slli	r2,r2,2
   254f4:	00c000b4 	movhi	r3,2
   254f8:	10c7883a 	add	r3,r2,r3
   254fc:	1899a617 	ldw	r2,26264(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   25500:	10000c0e 	bge	r2,zero,25534 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   25504:	e0ffff17 	ldw	r3,-4(fp)
   25508:	1805883a 	mov	r2,r3
   2550c:	1085883a 	add	r2,r2,r2
   25510:	10c5883a 	add	r2,r2,r3
   25514:	100490ba 	slli	r2,r2,2
   25518:	00c000b4 	movhi	r3,2
   2551c:	18d9a404 	addi	r3,r3,26256
   25520:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25524:	e0fffe17 	ldw	r3,-8(fp)
   25528:	18800226 	beq	r3,r2,25534 <alt_file_locked+0xac>
    {
      return -EACCES;
   2552c:	00bffcc4 	movi	r2,-13
   25530:	00000806 	br	25554 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   25534:	e0bfff17 	ldw	r2,-4(fp)
   25538:	10800044 	addi	r2,r2,1
   2553c:	e0bfff15 	stw	r2,-4(fp)
   25540:	d0a00817 	ldw	r2,-32736(gp)
   25544:	1007883a 	mov	r3,r2
   25548:	e0bfff17 	ldw	r2,-4(fp)
   2554c:	18bfd92e 	bgeu	r3,r2,254b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25550:	0005883a 	mov	r2,zero
}
   25554:	e037883a 	mov	sp,fp
   25558:	df000017 	ldw	fp,0(sp)
   2555c:	dec00104 	addi	sp,sp,4
   25560:	f800283a 	ret

00025564 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   25564:	defff604 	addi	sp,sp,-40
   25568:	dfc00915 	stw	ra,36(sp)
   2556c:	df000815 	stw	fp,32(sp)
   25570:	df000804 	addi	fp,sp,32
   25574:	e13ffa15 	stw	r4,-24(fp)
   25578:	e17ff915 	stw	r5,-28(fp)
   2557c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   25580:	00bfffc4 	movi	r2,-1
   25584:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   25588:	00bffb44 	movi	r2,-19
   2558c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   25590:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   25594:	d1600604 	addi	r5,gp,-32744
   25598:	e13ffa17 	ldw	r4,-24(fp)
   2559c:	00250cc0 	call	250cc <alt_find_dev>
   255a0:	e0bfff15 	stw	r2,-4(fp)
   255a4:	e0bfff17 	ldw	r2,-4(fp)
   255a8:	1000051e 	bne	r2,zero,255c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   255ac:	e13ffa17 	ldw	r4,-24(fp)
   255b0:	00258b80 	call	258b8 <alt_find_file>
   255b4:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   255b8:	00800044 	movi	r2,1
   255bc:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   255c0:	e0bfff17 	ldw	r2,-4(fp)
   255c4:	10002c26 	beq	r2,zero,25678 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   255c8:	e13fff17 	ldw	r4,-4(fp)
   255cc:	00259c00 	call	259c0 <alt_get_fd>
   255d0:	e0bffe15 	stw	r2,-8(fp)
   255d4:	e0bffe17 	ldw	r2,-8(fp)
   255d8:	1000030e 	bge	r2,zero,255e8 <open+0x84>
    {
      status = index;
   255dc:	e0bffe17 	ldw	r2,-8(fp)
   255e0:	e0bffd15 	stw	r2,-12(fp)
   255e4:	00002606 	br	25680 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   255e8:	e0fffe17 	ldw	r3,-8(fp)
   255ec:	1805883a 	mov	r2,r3
   255f0:	1085883a 	add	r2,r2,r2
   255f4:	10c5883a 	add	r2,r2,r3
   255f8:	100490ba 	slli	r2,r2,2
   255fc:	00c000b4 	movhi	r3,2
   25600:	18d9a404 	addi	r3,r3,26256
   25604:	10c5883a 	add	r2,r2,r3
   25608:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2560c:	e0fff917 	ldw	r3,-28(fp)
   25610:	00900034 	movhi	r2,16384
   25614:	10bfffc4 	addi	r2,r2,-1
   25618:	1886703a 	and	r3,r3,r2
   2561c:	e0bffb17 	ldw	r2,-20(fp)
   25620:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25624:	e0bffc17 	ldw	r2,-16(fp)
   25628:	1000051e 	bne	r2,zero,25640 <open+0xdc>
   2562c:	e13ffb17 	ldw	r4,-20(fp)
   25630:	00254880 	call	25488 <alt_file_locked>
   25634:	e0bffd15 	stw	r2,-12(fp)
   25638:	e0bffd17 	ldw	r2,-12(fp)
   2563c:	10001016 	blt	r2,zero,25680 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25640:	e0bfff17 	ldw	r2,-4(fp)
   25644:	10800317 	ldw	r2,12(r2)
   25648:	10000826 	beq	r2,zero,2566c <open+0x108>
   2564c:	e0bfff17 	ldw	r2,-4(fp)
   25650:	10800317 	ldw	r2,12(r2)
   25654:	e1fff817 	ldw	r7,-32(fp)
   25658:	e1bff917 	ldw	r6,-28(fp)
   2565c:	e17ffa17 	ldw	r5,-24(fp)
   25660:	e13ffb17 	ldw	r4,-20(fp)
   25664:	103ee83a 	callr	r2
   25668:	00000106 	br	25670 <open+0x10c>
   2566c:	0005883a 	mov	r2,zero
   25670:	e0bffd15 	stw	r2,-12(fp)
   25674:	00000206 	br	25680 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25678:	00bffb44 	movi	r2,-19
   2567c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25680:	e0bffd17 	ldw	r2,-12(fp)
   25684:	1000090e 	bge	r2,zero,256ac <open+0x148>
  {
    alt_release_fd (index);  
   25688:	e13ffe17 	ldw	r4,-8(fp)
   2568c:	00238780 	call	23878 <alt_release_fd>
    ALT_ERRNO = -status;
   25690:	002544c0 	call	2544c <alt_get_errno>
   25694:	1007883a 	mov	r3,r2
   25698:	e0bffd17 	ldw	r2,-12(fp)
   2569c:	0085c83a 	sub	r2,zero,r2
   256a0:	18800015 	stw	r2,0(r3)
    return -1;
   256a4:	00bfffc4 	movi	r2,-1
   256a8:	00000106 	br	256b0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   256ac:	e0bffe17 	ldw	r2,-8(fp)
}
   256b0:	e037883a 	mov	sp,fp
   256b4:	dfc00117 	ldw	ra,4(sp)
   256b8:	df000017 	ldw	fp,0(sp)
   256bc:	dec00204 	addi	sp,sp,8
   256c0:	f800283a 	ret

000256c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   256c4:	defffa04 	addi	sp,sp,-24
   256c8:	df000515 	stw	fp,20(sp)
   256cc:	df000504 	addi	fp,sp,20
   256d0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   256d4:	0005303a 	rdctl	r2,status
   256d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   256dc:	e0fffc17 	ldw	r3,-16(fp)
   256e0:	00bfff84 	movi	r2,-2
   256e4:	1884703a 	and	r2,r3,r2
   256e8:	1001703a 	wrctl	status,r2
  return context;
   256ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   256f0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   256f4:	e0bffb17 	ldw	r2,-20(fp)
   256f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   256fc:	e0bffd17 	ldw	r2,-12(fp)
   25700:	10800017 	ldw	r2,0(r2)
   25704:	e0fffd17 	ldw	r3,-12(fp)
   25708:	18c00117 	ldw	r3,4(r3)
   2570c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25710:	e0bffd17 	ldw	r2,-12(fp)
   25714:	10800117 	ldw	r2,4(r2)
   25718:	e0fffd17 	ldw	r3,-12(fp)
   2571c:	18c00017 	ldw	r3,0(r3)
   25720:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25724:	e0bffd17 	ldw	r2,-12(fp)
   25728:	e0fffd17 	ldw	r3,-12(fp)
   2572c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25730:	e0bffd17 	ldw	r2,-12(fp)
   25734:	e0fffd17 	ldw	r3,-12(fp)
   25738:	10c00015 	stw	r3,0(r2)
} 
   2573c:	0001883a 	nop
   25740:	e0bfff17 	ldw	r2,-4(fp)
   25744:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   25748:	e0bffe17 	ldw	r2,-8(fp)
   2574c:	1001703a 	wrctl	status,r2
}
   25750:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   25754:	0001883a 	nop
   25758:	e037883a 	mov	sp,fp
   2575c:	df000017 	ldw	fp,0(sp)
   25760:	dec00104 	addi	sp,sp,4
   25764:	f800283a 	ret

00025768 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25768:	defff904 	addi	sp,sp,-28
   2576c:	dfc00615 	stw	ra,24(sp)
   25770:	df000515 	stw	fp,20(sp)
   25774:	dc400415 	stw	r17,16(sp)
   25778:	dc000315 	stw	r16,12(sp)
   2577c:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   25780:	d0a00c17 	ldw	r2,-32720(gp)
   25784:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25788:	d126be17 	ldw	r4,-25864(gp)
   2578c:	d166bf17 	ldw	r5,-25860(gp)
   25790:	01800044 	movi	r6,1
   25794:	000f883a 	mov	r7,zero
   25798:	2185883a 	add	r2,r4,r6
   2579c:	1111803a 	cmpltu	r8,r2,r4
   257a0:	29c7883a 	add	r3,r5,r7
   257a4:	40c9883a 	add	r4,r8,r3
   257a8:	2007883a 	mov	r3,r4
   257ac:	1009883a 	mov	r4,r2
   257b0:	180b883a 	mov	r5,r3
   257b4:	d126be15 	stw	r4,-25864(gp)
   257b8:	d166bf15 	stw	r5,-25860(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   257bc:	00002906 	br	25864 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   257c0:	e0bffd17 	ldw	r2,-12(fp)
   257c4:	10800017 	ldw	r2,0(r2)
   257c8:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   257cc:	e13ffd17 	ldw	r4,-12(fp)
   257d0:	20800217 	ldw	r2,8(r4)
   257d4:	20c00317 	ldw	r3,12(r4)
   257d8:	d126be17 	ldw	r4,-25864(gp)
   257dc:	d166bf17 	ldw	r5,-25860(gp)
   257e0:	28c01e36 	bltu	r5,r3,2585c <alt_tick+0xf4>
   257e4:	1940011e 	bne	r3,r5,257ec <alt_tick+0x84>
   257e8:	20801c36 	bltu	r4,r2,2585c <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   257ec:	e0bffd17 	ldw	r2,-12(fp)
   257f0:	10800417 	ldw	r2,16(r2)
   257f4:	e0fffd17 	ldw	r3,-12(fp)
   257f8:	18c00517 	ldw	r3,20(r3)
   257fc:	1809883a 	mov	r4,r3
   25800:	103ee83a 	callr	r2
   25804:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25808:	e0bffb17 	ldw	r2,-20(fp)
   2580c:	1000031e 	bne	r2,zero,2581c <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   25810:	e13ffd17 	ldw	r4,-12(fp)
   25814:	00256c40 	call	256c4 <alt_alarm_stop>
   25818:	00001006 	br	2585c <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   2581c:	e0bffd17 	ldw	r2,-12(fp)
   25820:	11000217 	ldw	r4,8(r2)
   25824:	11400317 	ldw	r5,12(r2)
   25828:	e0bffb17 	ldw	r2,-20(fp)
   2582c:	1021883a 	mov	r16,r2
   25830:	0023883a 	mov	r17,zero
   25834:	2405883a 	add	r2,r4,r16
   25838:	110d803a 	cmpltu	r6,r2,r4
   2583c:	2c47883a 	add	r3,r5,r17
   25840:	30c9883a 	add	r4,r6,r3
   25844:	2007883a 	mov	r3,r4
   25848:	1009883a 	mov	r4,r2
   2584c:	180b883a 	mov	r5,r3
   25850:	e0bffd17 	ldw	r2,-12(fp)
   25854:	11000215 	stw	r4,8(r2)
   25858:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   2585c:	e0bffc17 	ldw	r2,-16(fp)
   25860:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   25864:	e0fffd17 	ldw	r3,-12(fp)
   25868:	d0a00c04 	addi	r2,gp,-32720
   2586c:	18bfd41e 	bne	r3,r2,257c0 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25870:	0001883a 	nop
}
   25874:	0001883a 	nop
   25878:	e6fffe04 	addi	sp,fp,-8
   2587c:	dfc00317 	ldw	ra,12(sp)
   25880:	df000217 	ldw	fp,8(sp)
   25884:	dc400117 	ldw	r17,4(sp)
   25888:	dc000017 	ldw	r16,0(sp)
   2588c:	dec00404 	addi	sp,sp,16
   25890:	f800283a 	ret

00025894 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25894:	deffff04 	addi	sp,sp,-4
   25898:	df000015 	stw	fp,0(sp)
   2589c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   258a0:	000170fa 	wrctl	ienable,zero
}
   258a4:	0001883a 	nop
   258a8:	e037883a 	mov	sp,fp
   258ac:	df000017 	ldw	fp,0(sp)
   258b0:	dec00104 	addi	sp,sp,4
   258b4:	f800283a 	ret

000258b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   258b8:	defffb04 	addi	sp,sp,-20
   258bc:	dfc00415 	stw	ra,16(sp)
   258c0:	df000315 	stw	fp,12(sp)
   258c4:	df000304 	addi	fp,sp,12
   258c8:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   258cc:	d0a00417 	ldw	r2,-32752(gp)
   258d0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   258d4:	00003106 	br	2599c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   258d8:	e0bfff17 	ldw	r2,-4(fp)
   258dc:	10800217 	ldw	r2,8(r2)
   258e0:	1009883a 	mov	r4,r2
   258e4:	00204000 	call	20400 <strlen>
   258e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   258ec:	e0bfff17 	ldw	r2,-4(fp)
   258f0:	10c00217 	ldw	r3,8(r2)
   258f4:	e0bffe17 	ldw	r2,-8(fp)
   258f8:	10bfffc4 	addi	r2,r2,-1
   258fc:	1885883a 	add	r2,r3,r2
   25900:	10800003 	ldbu	r2,0(r2)
   25904:	10803fcc 	andi	r2,r2,255
   25908:	1080201c 	xori	r2,r2,128
   2590c:	10bfe004 	addi	r2,r2,-128
   25910:	10800bd8 	cmpnei	r2,r2,47
   25914:	1000031e 	bne	r2,zero,25924 <alt_find_file+0x6c>
    {
      len -= 1;
   25918:	e0bffe17 	ldw	r2,-8(fp)
   2591c:	10bfffc4 	addi	r2,r2,-1
   25920:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25924:	e0bffe17 	ldw	r2,-8(fp)
   25928:	e0fffd17 	ldw	r3,-12(fp)
   2592c:	1885883a 	add	r2,r3,r2
   25930:	10800003 	ldbu	r2,0(r2)
   25934:	10803fcc 	andi	r2,r2,255
   25938:	1080201c 	xori	r2,r2,128
   2593c:	10bfe004 	addi	r2,r2,-128
   25940:	10800be0 	cmpeqi	r2,r2,47
   25944:	1000081e 	bne	r2,zero,25968 <alt_find_file+0xb0>
   25948:	e0bffe17 	ldw	r2,-8(fp)
   2594c:	e0fffd17 	ldw	r3,-12(fp)
   25950:	1885883a 	add	r2,r3,r2
   25954:	10800003 	ldbu	r2,0(r2)
   25958:	10803fcc 	andi	r2,r2,255
   2595c:	1080201c 	xori	r2,r2,128
   25960:	10bfe004 	addi	r2,r2,-128
   25964:	10000a1e 	bne	r2,zero,25990 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25968:	e0bfff17 	ldw	r2,-4(fp)
   2596c:	10800217 	ldw	r2,8(r2)
   25970:	e0fffe17 	ldw	r3,-8(fp)
   25974:	180d883a 	mov	r6,r3
   25978:	e17ffd17 	ldw	r5,-12(fp)
   2597c:	1009883a 	mov	r4,r2
   25980:	0025b580 	call	25b58 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   25984:	1000021e 	bne	r2,zero,25990 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   25988:	e0bfff17 	ldw	r2,-4(fp)
   2598c:	00000706 	br	259ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25990:	e0bfff17 	ldw	r2,-4(fp)
   25994:	10800017 	ldw	r2,0(r2)
   25998:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   2599c:	e0ffff17 	ldw	r3,-4(fp)
   259a0:	d0a00404 	addi	r2,gp,-32752
   259a4:	18bfcc1e 	bne	r3,r2,258d8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   259a8:	0005883a 	mov	r2,zero
}
   259ac:	e037883a 	mov	sp,fp
   259b0:	dfc00117 	ldw	ra,4(sp)
   259b4:	df000017 	ldw	fp,0(sp)
   259b8:	dec00204 	addi	sp,sp,8
   259bc:	f800283a 	ret

000259c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   259c0:	defffc04 	addi	sp,sp,-16
   259c4:	df000315 	stw	fp,12(sp)
   259c8:	df000304 	addi	fp,sp,12
   259cc:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   259d0:	00bffa04 	movi	r2,-24
   259d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   259d8:	e03fff15 	stw	zero,-4(fp)
   259dc:	00001d06 	br	25a54 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   259e0:	e0ffff17 	ldw	r3,-4(fp)
   259e4:	1805883a 	mov	r2,r3
   259e8:	1085883a 	add	r2,r2,r2
   259ec:	10c5883a 	add	r2,r2,r3
   259f0:	100490ba 	slli	r2,r2,2
   259f4:	00c000b4 	movhi	r3,2
   259f8:	10c7883a 	add	r3,r2,r3
   259fc:	1899a417 	ldw	r2,26256(r3)
   25a00:	1000111e 	bne	r2,zero,25a48 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   25a04:	e0ffff17 	ldw	r3,-4(fp)
   25a08:	1805883a 	mov	r2,r3
   25a0c:	1085883a 	add	r2,r2,r2
   25a10:	10c5883a 	add	r2,r2,r3
   25a14:	100490ba 	slli	r2,r2,2
   25a18:	e13ffd17 	ldw	r4,-12(fp)
   25a1c:	00c000b4 	movhi	r3,2
   25a20:	10c7883a 	add	r3,r2,r3
   25a24:	1919a415 	stw	r4,26256(r3)
      if (i > alt_max_fd)
   25a28:	d0e00817 	ldw	r3,-32736(gp)
   25a2c:	e0bfff17 	ldw	r2,-4(fp)
   25a30:	1880020e 	bge	r3,r2,25a3c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   25a34:	e0bfff17 	ldw	r2,-4(fp)
   25a38:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   25a3c:	e0bfff17 	ldw	r2,-4(fp)
   25a40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25a44:	00000706 	br	25a64 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   25a48:	e0bfff17 	ldw	r2,-4(fp)
   25a4c:	10800044 	addi	r2,r2,1
   25a50:	e0bfff15 	stw	r2,-4(fp)
   25a54:	e0bfff17 	ldw	r2,-4(fp)
   25a58:	10800810 	cmplti	r2,r2,32
   25a5c:	103fe01e 	bne	r2,zero,259e0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   25a60:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25a64:	e0bffe17 	ldw	r2,-8(fp)
}
   25a68:	e037883a 	mov	sp,fp
   25a6c:	df000017 	ldw	fp,0(sp)
   25a70:	dec00104 	addi	sp,sp,4
   25a74:	f800283a 	ret

00025a78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25a78:	defffe04 	addi	sp,sp,-8
   25a7c:	df000115 	stw	fp,4(sp)
   25a80:	df000104 	addi	fp,sp,4
   25a84:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25a88:	e0bfff17 	ldw	r2,-4(fp)
   25a8c:	10bffe84 	addi	r2,r2,-6
   25a90:	10c00428 	cmpgeui	r3,r2,16
   25a94:	1800191e 	bne	r3,zero,25afc <alt_exception_cause_generated_bad_addr+0x84>
   25a98:	100690ba 	slli	r3,r2,2
   25a9c:	008000b4 	movhi	r2,2
   25aa0:	1885883a 	add	r2,r3,r2
   25aa4:	1096ab17 	ldw	r2,23212(r2)
   25aa8:	1000683a 	jmp	r2
   25aac:	00025aec 	andhi	zero,zero,2411
   25ab0:	00025aec 	andhi	zero,zero,2411
   25ab4:	00025afc 	xorhi	zero,zero,2411
   25ab8:	00025afc 	xorhi	zero,zero,2411
   25abc:	00025afc 	xorhi	zero,zero,2411
   25ac0:	00025aec 	andhi	zero,zero,2411
   25ac4:	00025af4 	movhi	zero,2411
   25ac8:	00025afc 	xorhi	zero,zero,2411
   25acc:	00025aec 	andhi	zero,zero,2411
   25ad0:	00025aec 	andhi	zero,zero,2411
   25ad4:	00025afc 	xorhi	zero,zero,2411
   25ad8:	00025aec 	andhi	zero,zero,2411
   25adc:	00025af4 	movhi	zero,2411
   25ae0:	00025afc 	xorhi	zero,zero,2411
   25ae4:	00025afc 	xorhi	zero,zero,2411
   25ae8:	00025aec 	andhi	zero,zero,2411
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25aec:	00800044 	movi	r2,1
   25af0:	00000306 	br	25b00 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25af4:	0005883a 	mov	r2,zero
   25af8:	00000106 	br	25b00 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   25afc:	0005883a 	mov	r2,zero
  }
}
   25b00:	e037883a 	mov	sp,fp
   25b04:	df000017 	ldw	fp,0(sp)
   25b08:	dec00104 	addi	sp,sp,4
   25b0c:	f800283a 	ret

00025b10 <atexit>:
   25b10:	200b883a 	mov	r5,r4
   25b14:	000f883a 	mov	r7,zero
   25b18:	000d883a 	mov	r6,zero
   25b1c:	0009883a 	mov	r4,zero
   25b20:	0025bd01 	jmpi	25bd0 <__register_exitproc>

00025b24 <exit>:
   25b24:	defffe04 	addi	sp,sp,-8
   25b28:	000b883a 	mov	r5,zero
   25b2c:	dc000015 	stw	r16,0(sp)
   25b30:	dfc00115 	stw	ra,4(sp)
   25b34:	2021883a 	mov	r16,r4
   25b38:	0025c600 	call	25c60 <__call_exitprocs>
   25b3c:	008000b4 	movhi	r2,2
   25b40:	111e2817 	ldw	r4,30880(r2)
   25b44:	20800f17 	ldw	r2,60(r4)
   25b48:	10000126 	beq	r2,zero,25b50 <exit+0x2c>
   25b4c:	103ee83a 	callr	r2
   25b50:	8009883a 	mov	r4,r16
   25b54:	0025d800 	call	25d80 <_exit>

00025b58 <memcmp>:
   25b58:	30800130 	cmpltui	r2,r6,4
   25b5c:	10000b1e 	bne	r2,zero,25b8c <memcmp+0x34>
   25b60:	2144b03a 	or	r2,r4,r5
   25b64:	108000cc 	andi	r2,r2,3
   25b68:	1000171e 	bne	r2,zero,25bc8 <memcmp+0x70>
   25b6c:	20c00017 	ldw	r3,0(r4)
   25b70:	28800017 	ldw	r2,0(r5)
   25b74:	1880141e 	bne	r3,r2,25bc8 <memcmp+0x70>
   25b78:	31bfff04 	addi	r6,r6,-4
   25b7c:	30800128 	cmpgeui	r2,r6,4
   25b80:	21000104 	addi	r4,r4,4
   25b84:	29400104 	addi	r5,r5,4
   25b88:	103ff81e 	bne	r2,zero,25b6c <memcmp+0x14>
   25b8c:	30bfffc4 	addi	r2,r6,-1
   25b90:	30000b26 	beq	r6,zero,25bc0 <memcmp+0x68>
   25b94:	11800044 	addi	r6,r2,1
   25b98:	218d883a 	add	r6,r4,r6
   25b9c:	00000106 	br	25ba4 <memcmp+0x4c>
   25ba0:	21800726 	beq	r4,r6,25bc0 <memcmp+0x68>
   25ba4:	20800003 	ldbu	r2,0(r4)
   25ba8:	28c00003 	ldbu	r3,0(r5)
   25bac:	21000044 	addi	r4,r4,1
   25bb0:	29400044 	addi	r5,r5,1
   25bb4:	10fffa26 	beq	r2,r3,25ba0 <memcmp+0x48>
   25bb8:	10c5c83a 	sub	r2,r2,r3
   25bbc:	f800283a 	ret
   25bc0:	0005883a 	mov	r2,zero
   25bc4:	f800283a 	ret
   25bc8:	30bfffc4 	addi	r2,r6,-1
   25bcc:	003ff106 	br	25b94 <memcmp+0x3c>

00025bd0 <__register_exitproc>:
   25bd0:	008000b4 	movhi	r2,2
   25bd4:	10de2817 	ldw	r3,30880(r2)
   25bd8:	18805217 	ldw	r2,328(r3)
   25bdc:	10001726 	beq	r2,zero,25c3c <__register_exitproc+0x6c>
   25be0:	10c00117 	ldw	r3,4(r2)
   25be4:	1a000808 	cmpgei	r8,r3,32
   25be8:	40001b1e 	bne	r8,zero,25c58 <__register_exitproc+0x88>
   25bec:	20000b26 	beq	r4,zero,25c1c <__register_exitproc+0x4c>
   25bf0:	181090ba 	slli	r8,r3,2
   25bf4:	02400044 	movi	r9,1
   25bf8:	48d2983a 	sll	r9,r9,r3
   25bfc:	1211883a 	add	r8,r2,r8
   25c00:	41802215 	stw	r6,136(r8)
   25c04:	11806217 	ldw	r6,392(r2)
   25c08:	21000098 	cmpnei	r4,r4,2
   25c0c:	324cb03a 	or	r6,r6,r9
   25c10:	11806215 	stw	r6,392(r2)
   25c14:	41c04215 	stw	r7,264(r8)
   25c18:	20000b26 	beq	r4,zero,25c48 <__register_exitproc+0x78>
   25c1c:	19000084 	addi	r4,r3,2
   25c20:	200890ba 	slli	r4,r4,2
   25c24:	18c00044 	addi	r3,r3,1
   25c28:	10c00115 	stw	r3,4(r2)
   25c2c:	1105883a 	add	r2,r2,r4
   25c30:	11400015 	stw	r5,0(r2)
   25c34:	0005883a 	mov	r2,zero
   25c38:	f800283a 	ret
   25c3c:	18805304 	addi	r2,r3,332
   25c40:	18805215 	stw	r2,328(r3)
   25c44:	003fe606 	br	25be0 <__register_exitproc+0x10>
   25c48:	11006317 	ldw	r4,396(r2)
   25c4c:	2252b03a 	or	r9,r4,r9
   25c50:	12406315 	stw	r9,396(r2)
   25c54:	003ff106 	br	25c1c <__register_exitproc+0x4c>
   25c58:	00bfffc4 	movi	r2,-1
   25c5c:	f800283a 	ret

00025c60 <__call_exitprocs>:
   25c60:	defff704 	addi	sp,sp,-36
   25c64:	008000b4 	movhi	r2,2
   25c68:	dcc00315 	stw	r19,12(sp)
   25c6c:	14de2817 	ldw	r19,30880(r2)
   25c70:	dc800215 	stw	r18,8(sp)
   25c74:	dfc00815 	stw	ra,32(sp)
   25c78:	9c805217 	ldw	r18,328(r19)
   25c7c:	ddc00715 	stw	r23,28(sp)
   25c80:	dd800615 	stw	r22,24(sp)
   25c84:	dd400515 	stw	r21,20(sp)
   25c88:	dd000415 	stw	r20,16(sp)
   25c8c:	dc400115 	stw	r17,4(sp)
   25c90:	dc000015 	stw	r16,0(sp)
   25c94:	90001026 	beq	r18,zero,25cd8 <__call_exitprocs+0x78>
   25c98:	202b883a 	mov	r21,r4
   25c9c:	282d883a 	mov	r22,r5
   25ca0:	05000044 	movi	r20,1
   25ca4:	94000117 	ldw	r16,4(r18)
   25ca8:	847fffc4 	addi	r17,r16,-1
   25cac:	88000a16 	blt	r17,zero,25cd8 <__call_exitprocs+0x78>
   25cb0:	84000044 	addi	r16,r16,1
   25cb4:	802090ba 	slli	r16,r16,2
   25cb8:	9421883a 	add	r16,r18,r16
   25cbc:	b0001126 	beq	r22,zero,25d04 <__call_exitprocs+0xa4>
   25cc0:	80804017 	ldw	r2,256(r16)
   25cc4:	15800f26 	beq	r2,r22,25d04 <__call_exitprocs+0xa4>
   25cc8:	8c7fffc4 	addi	r17,r17,-1
   25ccc:	88bfffd8 	cmpnei	r2,r17,-1
   25cd0:	843fff04 	addi	r16,r16,-4
   25cd4:	103ff91e 	bne	r2,zero,25cbc <__call_exitprocs+0x5c>
   25cd8:	dfc00817 	ldw	ra,32(sp)
   25cdc:	ddc00717 	ldw	r23,28(sp)
   25ce0:	dd800617 	ldw	r22,24(sp)
   25ce4:	dd400517 	ldw	r21,20(sp)
   25ce8:	dd000417 	ldw	r20,16(sp)
   25cec:	dcc00317 	ldw	r19,12(sp)
   25cf0:	dc800217 	ldw	r18,8(sp)
   25cf4:	dc400117 	ldw	r17,4(sp)
   25cf8:	dc000017 	ldw	r16,0(sp)
   25cfc:	dec00904 	addi	sp,sp,36
   25d00:	f800283a 	ret
   25d04:	90800117 	ldw	r2,4(r18)
   25d08:	81800017 	ldw	r6,0(r16)
   25d0c:	10bfffc4 	addi	r2,r2,-1
   25d10:	14401726 	beq	r2,r17,25d70 <__call_exitprocs+0x110>
   25d14:	80000015 	stw	zero,0(r16)
   25d18:	303feb26 	beq	r6,zero,25cc8 <__call_exitprocs+0x68>
   25d1c:	a446983a 	sll	r3,r20,r17
   25d20:	90806217 	ldw	r2,392(r18)
   25d24:	95c00117 	ldw	r23,4(r18)
   25d28:	1884703a 	and	r2,r3,r2
   25d2c:	1000081e 	bne	r2,zero,25d50 <__call_exitprocs+0xf0>
   25d30:	303ee83a 	callr	r6
   25d34:	90c00117 	ldw	r3,4(r18)
   25d38:	98805217 	ldw	r2,328(r19)
   25d3c:	1dc0011e 	bne	r3,r23,25d44 <__call_exitprocs+0xe4>
   25d40:	90bfe126 	beq	r18,r2,25cc8 <__call_exitprocs+0x68>
   25d44:	103fe426 	beq	r2,zero,25cd8 <__call_exitprocs+0x78>
   25d48:	1025883a 	mov	r18,r2
   25d4c:	003fd506 	br	25ca4 <__call_exitprocs+0x44>
   25d50:	90806317 	ldw	r2,396(r18)
   25d54:	81002017 	ldw	r4,128(r16)
   25d58:	1886703a 	and	r3,r3,r2
   25d5c:	1800061e 	bne	r3,zero,25d78 <__call_exitprocs+0x118>
   25d60:	200b883a 	mov	r5,r4
   25d64:	a809883a 	mov	r4,r21
   25d68:	303ee83a 	callr	r6
   25d6c:	003ff106 	br	25d34 <__call_exitprocs+0xd4>
   25d70:	94400115 	stw	r17,4(r18)
   25d74:	003fe806 	br	25d18 <__call_exitprocs+0xb8>
   25d78:	303ee83a 	callr	r6
   25d7c:	003fed06 	br	25d34 <__call_exitprocs+0xd4>

00025d80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25d80:	defffd04 	addi	sp,sp,-12
   25d84:	df000215 	stw	fp,8(sp)
   25d88:	df000204 	addi	fp,sp,8
   25d8c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25d90:	0001883a 	nop
   25d94:	e0bffe17 	ldw	r2,-8(fp)
   25d98:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25d9c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25da0:	10000226 	beq	r2,zero,25dac <_exit+0x2c>
    ALT_SIM_FAIL();
   25da4:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   25da8:	00000106 	br	25db0 <_exit+0x30>
    ALT_SIM_PASS();
   25dac:	002af0b0 	cmpltui	zero,zero,43970
}
   25db0:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25db4:	003fff06 	br	25db4 <_exit+0x34>
